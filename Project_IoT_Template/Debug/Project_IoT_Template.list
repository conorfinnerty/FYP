
Project_IoT_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011544  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001768  080116d8  080116d8  000216d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e40  08012e40  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  08012e40  08012e40  00022e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e48  08012e48  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e48  08012e48  00022e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e4c  08012e4c  00022e4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08012e50  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016bc  200001dc  0801302c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001898  0801302c  00031898  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cbf0  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b55  00000000  00000000  0005cdfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002690  00000000  00000000  00062958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000024e0  00000000  00000000  00064fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000851b  00000000  00000000  000674c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002fe6e  00000000  00000000  0006f9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010be09  00000000  00000000  0009f851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ab65a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bbf8  00000000  00000000  001ab6ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080116bc 	.word	0x080116bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080116bc 	.word	0x080116bc

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <net_init>:
/* Private variables ---------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

int net_init(net_hnd_t * nethnd, net_if_t interface, net_if_init_t *f_netinit)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	60f8      	str	r0, [r7, #12]
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	607a      	str	r2, [r7, #4]
 8000ed8:	72fb      	strb	r3, [r7, #11]
  int rc = NET_ERR;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	617b      	str	r3, [r7, #20]
  net_ctxt_t *ctxt = NULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	613b      	str	r3, [r7, #16]

  if (f_netinit == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d103      	bne.n	8000ef2 <net_init+0x26>
  {
    rc = NET_PARAM;
 8000eea:	f06f 0301 	mvn.w	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	e036      	b.n	8000f60 <net_init+0x94>
  }
  else
  {
    ctxt = net_malloc(sizeof(net_ctxt_t));
 8000ef2:	2008      	movs	r0, #8
 8000ef4:	f00c fe68 	bl	800dbc8 <malloc>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	613b      	str	r3, [r7, #16]
    if (ctxt == NULL)
 8000efc:	693b      	ldr	r3, [r7, #16]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d10b      	bne.n	8000f1a <net_init+0x4e>
    {
      msg_error("net_init: allocation failed.\n");
 8000f02:	2253      	movs	r2, #83	; 0x53
 8000f04:	491f      	ldr	r1, [pc, #124]	; (8000f84 <net_init+0xb8>)
 8000f06:	4820      	ldr	r0, [pc, #128]	; (8000f88 <net_init+0xbc>)
 8000f08:	f00d fc0e 	bl	800e728 <iprintf>
 8000f0c:	481f      	ldr	r0, [pc, #124]	; (8000f8c <net_init+0xc0>)
 8000f0e:	f00d fca7 	bl	800e860 <puts>
      rc = NET_ERR;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	e022      	b.n	8000f60 <net_init+0x94>
    }
    else
    {
      memset(ctxt, 0, sizeof(net_ctxt_t));
 8000f1a:	2208      	movs	r2, #8
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	6938      	ldr	r0, [r7, #16]
 8000f20:	f00c fe9a 	bl	800dc58 <memset>
      switch(interface)
 8000f24:	7afb      	ldrb	r3, [r7, #11]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d10b      	bne.n	8000f42 <net_init+0x76>
      {
    #ifdef USE_WIFI
        case NET_IF_WLAN:
          ctxt->itf = interface;  // TODO: register a list of function pointers in function of the interface type. (to be provided by the caller?)
 8000f2a:	693b      	ldr	r3, [r7, #16]
 8000f2c:	7afa      	ldrb	r2, [r7, #11]
 8000f2e:	701a      	strb	r2, [r3, #0]
          if(f_netinit(NULL) == 0)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2000      	movs	r0, #0
 8000f34:	4798      	blx	r3
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d110      	bne.n	8000f5e <net_init+0x92>
          {
            rc = NET_OK;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
          }
          break;
 8000f40:	e00d      	b.n	8000f5e <net_init+0x92>
            rc = NET_OK;
          }
          break;
    #endif /* USE_LWIP */
        default:
          msg_error("net_init: interface type of %d not implemented.\n", interface);
 8000f42:	2277      	movs	r2, #119	; 0x77
 8000f44:	490f      	ldr	r1, [pc, #60]	; (8000f84 <net_init+0xb8>)
 8000f46:	4810      	ldr	r0, [pc, #64]	; (8000f88 <net_init+0xbc>)
 8000f48:	f00d fbee 	bl	800e728 <iprintf>
 8000f4c:	7afb      	ldrb	r3, [r7, #11]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	480f      	ldr	r0, [pc, #60]	; (8000f90 <net_init+0xc4>)
 8000f52:	f00d fbe9 	bl	800e728 <iprintf>
          rc = NET_PARAM;
 8000f56:	f06f 0301 	mvn.w	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	e000      	b.n	8000f60 <net_init+0x94>
          break;
 8000f5e:	bf00      	nop
      }
    }
  }

  if (rc == NET_OK)
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d103      	bne.n	8000f6e <net_init+0xa2>
  {
    *nethnd = (net_hnd_t) ctxt;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	e005      	b.n	8000f7a <net_init+0xae>
  }
  else
  {
    if (ctxt != NULL)
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <net_init+0xae>
    {
      net_free(ctxt);
 8000f74:	6938      	ldr	r0, [r7, #16]
 8000f76:	f00c fe2f 	bl	800dbd8 <free>
    }
  }
  
  return rc;
 8000f7a:	697b      	ldr	r3, [r7, #20]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	0801286c 	.word	0x0801286c
 8000f88:	080116d8 	.word	0x080116d8
 8000f8c:	080116e8 	.word	0x080116e8
 8000f90:	08011708 	.word	0x08011708

08000f94 <net_get_ip_address>:
  return rc;
}


int net_get_ip_address(net_hnd_t nethnd, net_ipaddr_t * ipAddress)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b086      	sub	sp, #24
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
 8000f9c:	6039      	str	r1, [r7, #0]
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	613b      	str	r3, [r7, #16]
  int rc = NET_ERR;
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	617b      	str	r3, [r7, #20]
  
  if (ipAddress == NULL)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d103      	bne.n	8000fb6 <net_get_ip_address+0x22>
  {
    rc = NET_PARAM;
 8000fae:	f06f 0301 	mvn.w	r3, #1
 8000fb2:	617b      	str	r3, [r7, #20]
 8000fb4:	e02f      	b.n	8001016 <net_get_ip_address+0x82>
  }
  else
  {
    switch(ctxt->itf)
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d11a      	bne.n	8000ff4 <net_get_ip_address+0x60>
#ifdef USE_WIFI
      case NET_IF_WLAN:
      {
        uint8_t addr[4];
        /* WIFI_GetIP_Address() returns IPv4 addresses in binary format, network byte order. */
        WIFI_Status_t ret = WIFI_GetIP_Address(addr);
 8000fbe:	f107 0308 	add.w	r3, r7, #8
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00c fc78 	bl	800d8b8 <WIFI_GetIP_Address>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	73fb      	strb	r3, [r7, #15]
        if (ret == WIFI_STATUS_OK)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d120      	bne.n	8001014 <net_get_ip_address+0x80>
        {
          ipAddress->ipv = NET_IP_V4;
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]
          memset(ipAddress->ip, 0xFF, sizeof(ipAddress->ip));
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	2210      	movs	r2, #16
 8000fde:	21ff      	movs	r1, #255	; 0xff
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f00c fe39 	bl	800dc58 <memset>
          memcpy(&ipAddress->ip[12], addr, 4);
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	330d      	adds	r3, #13
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	601a      	str	r2, [r3, #0]
          rc = NET_OK;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
        }
        break;
 8000ff2:	e00f      	b.n	8001014 <net_get_ip_address+0x80>
        }
        break;
      }
#endif /* USE_LWIP */
      default:
        msg_error("net_get_ip_address: interface type of %d not implemented.\n", ctxt->itf);
 8000ff4:	f44f 729b 	mov.w	r2, #310	; 0x136
 8000ff8:	4909      	ldr	r1, [pc, #36]	; (8001020 <net_get_ip_address+0x8c>)
 8000ffa:	480a      	ldr	r0, [pc, #40]	; (8001024 <net_get_ip_address+0x90>)
 8000ffc:	f00d fb94 	bl	800e728 <iprintf>
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	4619      	mov	r1, r3
 8001006:	4808      	ldr	r0, [pc, #32]	; (8001028 <net_get_ip_address+0x94>)
 8001008:	f00d fb8e 	bl	800e728 <iprintf>
        rc = NET_PARAM;
 800100c:	f06f 0301 	mvn.w	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
 8001012:	e000      	b.n	8001016 <net_get_ip_address+0x82>
        break;
 8001014:	bf00      	nop
    }
  }
  
  return rc;
 8001016:	697b      	ldr	r3, [r7, #20]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	08012878 	.word	0x08012878
 8001024:	080116d8 	.word	0x080116d8
 8001028:	080117a4 	.word	0x080117a4

0800102c <net_get_mac_address>:


int net_get_mac_address(net_hnd_t nethnd, net_macaddr_t * macAddress)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b086      	sub	sp, #24
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	613b      	str	r3, [r7, #16]
  int rc = NET_ERR;
 800103a:	f04f 33ff 	mov.w	r3, #4294967295
 800103e:	617b      	str	r3, [r7, #20]
  switch (ctxt->itf)
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d114      	bne.n	8001072 <net_get_mac_address+0x46>
  {
#ifdef USE_WIFI
    case NET_IF_WLAN:
    {
      uint8_t addr[6];  /* WIFI_GetMAC_Address() returns in binary format. */
      WIFI_Status_t ret = WIFI_GetMAC_Address(addr);
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4618      	mov	r0, r3
 800104e:	f00c fc1d 	bl	800d88c <WIFI_GetMAC_Address>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]
      if (ret == WIFI_STATUS_OK)
 8001056:	7bfb      	ldrb	r3, [r7, #15]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d11a      	bne.n	8001092 <net_get_mac_address+0x66>
      {
        memcpy(macAddress->mac, addr, MIN(sizeof(macAddress->mac), 6));
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	f107 0308 	add.w	r3, r7, #8
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	6010      	str	r0, [r2, #0]
 8001068:	889b      	ldrh	r3, [r3, #4]
 800106a:	8093      	strh	r3, [r2, #4]
        rc = NET_OK;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
      }
      break;
 8001070:	e00f      	b.n	8001092 <net_get_mac_address+0x66>
      }
    }
    break;
#endif /* USE_LWIP */
    default:
      msg_error("net_get_mac_address: interface type of %d not implemented.\n", ctxt->itf);
 8001072:	f44f 72b9 	mov.w	r2, #370	; 0x172
 8001076:	490a      	ldr	r1, [pc, #40]	; (80010a0 <net_get_mac_address+0x74>)
 8001078:	480a      	ldr	r0, [pc, #40]	; (80010a4 <net_get_mac_address+0x78>)
 800107a:	f00d fb55 	bl	800e728 <iprintf>
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	4619      	mov	r1, r3
 8001084:	4808      	ldr	r0, [pc, #32]	; (80010a8 <net_get_mac_address+0x7c>)
 8001086:	f00d fb4f 	bl	800e728 <iprintf>
      rc = NET_PARAM;
 800108a:	f06f 0301 	mvn.w	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
 8001090:	e000      	b.n	8001094 <net_get_mac_address+0x68>
      break;
 8001092:	bf00      	nop
  }
  
  return rc;
 8001094:	697b      	ldr	r3, [r7, #20]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	0801288c 	.word	0x0801288c
 80010a4:	080116d8 	.word	0x080116d8
 80010a8:	080117e0 	.word	0x080117e0

080010ac <net_sock_create>:
  return rc;
}


int net_sock_create(net_hnd_t nethnd, net_sockhnd_t * sockhnd, net_proto_t proto)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b086      	sub	sp, #24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	4613      	mov	r3, r2
 80010b8:	71fb      	strb	r3, [r7, #7]
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	617b      	str	r3, [r7, #20]
  switch(proto)
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d001      	beq.n	80010c8 <net_sock_create+0x1c>
 80010c4:	2b03      	cmp	r3, #3
 80010c6:	d10b      	bne.n	80010e0 <net_sock_create+0x34>
  {
    case NET_PROTO_TCP:
    case NET_PROTO_UDP:
      switch(ctxt->itf)
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d116      	bne.n	80010fe <net_sock_create+0x52>
      {
#ifdef USE_WIFI
        case NET_IF_WLAN:
          return net_sock_create_wifi(nethnd, sockhnd, proto);
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	461a      	mov	r2, r3
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f000 f928 	bl	800132c <net_sock_create_wifi>
 80010dc:	4603      	mov	r3, r0
 80010de:	e011      	b.n	8001104 <net_sock_create+0x58>
#ifdef USE_MBED_TLS
    case NET_PROTO_TLS:
      return net_sock_create_mbedtls(nethnd, sockhnd, proto);
#endif /* USE_MBED_TLS */
    default:
      msg_error("net_sock_create: interface type of %d not implemented.\n", ctxt->itf);
 80010e0:	f44f 72ed 	mov.w	r2, #474	; 0x1da
 80010e4:	4909      	ldr	r1, [pc, #36]	; (800110c <net_sock_create+0x60>)
 80010e6:	480a      	ldr	r0, [pc, #40]	; (8001110 <net_sock_create+0x64>)
 80010e8:	f00d fb1e 	bl	800e728 <iprintf>
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <net_sock_create+0x68>)
 80010f4:	f00d fb18 	bl	800e728 <iprintf>
      return NET_PARAM;
 80010f8:	f06f 0301 	mvn.w	r3, #1
 80010fc:	e002      	b.n	8001104 <net_sock_create+0x58>
      break;
 80010fe:	bf00      	nop
  }
  return NET_PARAM;
 8001100:	f06f 0301 	mvn.w	r3, #1
}
 8001104:	4618      	mov	r0, r3
 8001106:	3718      	adds	r7, #24
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	080128a0 	.word	0x080128a0
 8001110:	080116d8 	.word	0x080116d8
 8001114:	0801181c 	.word	0x0801181c

08001118 <net_sock_open>:


int net_sock_open(net_sockhnd_t sockhnd, const char * hostname, int remoteport, int localport)
{
 8001118:	b590      	push	{r4, r7, lr}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	617b      	str	r3, [r7, #20]
  return sock->methods.open(sockhnd, hostname, remoteport, localport);
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	689c      	ldr	r4, [r3, #8]
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	68f8      	ldr	r0, [r7, #12]
 8001136:	47a0      	blx	r4
 8001138:	4603      	mov	r3, r0
}
 800113a:	4618      	mov	r0, r3
 800113c:	371c      	adds	r7, #28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd90      	pop	{r4, r7, pc}
	...

08001144 <net_sock_setopt>:


int net_sock_setopt(net_sockhnd_t sockhnd, const char * optname, const uint8_t * optbuf, size_t optlen)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
  int rc = NET_PARAM;
 8001152:	f06f 0301 	mvn.w	r3, #1
 8001156:	61fb      	str	r3, [r7, #28]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	61bb      	str	r3, [r7, #24]
  bool has_opt_data = (optbuf != NULL) && (optlen > 0);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d004      	beq.n	800116c <net_sock_setopt+0x28>
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <net_sock_setopt+0x28>
 8001168:	2301      	movs	r3, #1
 800116a:	e000      	b.n	800116e <net_sock_setopt+0x2a>
 800116c:	2300      	movs	r3, #0
 800116e:	75fb      	strb	r3, [r7, #23]
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
#endif /* USE_MBED_TLS */
  
  if (strcmp(optname, "sock_blocking") == 0)
 8001178:	4928      	ldr	r1, [pc, #160]	; (800121c <net_sock_setopt+0xd8>)
 800117a:	68b8      	ldr	r0, [r7, #8]
 800117c:	f7ff f828 	bl	80001d0 <strcmp>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d10b      	bne.n	800119e <net_sock_setopt+0x5a>
  {
    if (!has_opt_data)
 8001186:	7dfb      	ldrb	r3, [r7, #23]
 8001188:	f083 0301 	eor.w	r3, r3, #1
 800118c:	b2db      	uxtb	r3, r3
 800118e:	2b00      	cmp	r3, #0
 8001190:	d005      	beq.n	800119e <net_sock_setopt+0x5a>
    {
      sock->blocking = true;
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      rc = NET_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    }
  }
  if (strcmp(optname, "sock_noblocking") == 0)
 800119e:	4920      	ldr	r1, [pc, #128]	; (8001220 <net_sock_setopt+0xdc>)
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f7ff f815 	bl	80001d0 <strcmp>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d10b      	bne.n	80011c4 <net_sock_setopt+0x80>
  {
    if (!has_opt_data)
 80011ac:	7dfb      	ldrb	r3, [r7, #23]
 80011ae:	f083 0301 	eor.w	r3, r3, #1
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d005      	beq.n	80011c4 <net_sock_setopt+0x80>
    {
      sock->blocking = false;
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	2200      	movs	r2, #0
 80011bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      rc = NET_OK;
 80011c0:	2300      	movs	r3, #0
 80011c2:	61fb      	str	r3, [r7, #28]
    }
  }
  if (strcmp(optname, "sock_read_timeout") == 0)
 80011c4:	4917      	ldr	r1, [pc, #92]	; (8001224 <net_sock_setopt+0xe0>)
 80011c6:	68b8      	ldr	r0, [r7, #8]
 80011c8:	f7ff f802 	bl	80001d0 <strcmp>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10b      	bne.n	80011ea <net_sock_setopt+0xa6>
  {
    if (has_opt_data)
 80011d2:	7dfb      	ldrb	r3, [r7, #23]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d008      	beq.n	80011ea <net_sock_setopt+0xa6>
    {
      sock->read_timeout = atoi((char const *)optbuf);
 80011d8:	6878      	ldr	r0, [r7, #4]
 80011da:	f00c fcc3 	bl	800db64 <atoi>
 80011de:	4603      	mov	r3, r0
 80011e0:	b29a      	uxth	r2, r3
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	84da      	strh	r2, [r3, #38]	; 0x26
      rc = NET_OK;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
    }
  }
  if (strcmp(optname, "sock_write_timeout") == 0)
 80011ea:	490f      	ldr	r1, [pc, #60]	; (8001228 <net_sock_setopt+0xe4>)
 80011ec:	68b8      	ldr	r0, [r7, #8]
 80011ee:	f7fe ffef 	bl	80001d0 <strcmp>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d10b      	bne.n	8001210 <net_sock_setopt+0xcc>
  {
    if (has_opt_data)
 80011f8:	7dfb      	ldrb	r3, [r7, #23]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d008      	beq.n	8001210 <net_sock_setopt+0xcc>
    {
      sock->write_timeout = atoi((char const *)optbuf);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f00c fcb0 	bl	800db64 <atoi>
 8001204:	4603      	mov	r3, r0
 8001206:	b29a      	uxth	r2, r3
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	851a      	strh	r2, [r3, #40]	; 0x28
      rc = NET_OK;
 800120c:	2300      	movs	r3, #0
 800120e:	61fb      	str	r3, [r7, #28]
    }
  }
  return rc;
 8001210:	69fb      	ldr	r3, [r7, #28]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	08011854 	.word	0x08011854
 8001220:	08011864 	.word	0x08011864
 8001224:	08011874 	.word	0x08011874
 8001228:	08011888 	.word	0x08011888

0800122c <net_sock_recv>:


int net_sock_recv(net_sockhnd_t sockhnd, uint8_t * const buf, size_t len)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	617b      	str	r3, [r7, #20]
  return (sock->methods.recv != NULL) ? sock->methods.recv(sockhnd, buf, len) : NET_PARAM;
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d007      	beq.n	8001254 <net_sock_recv+0x28>
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	68f8      	ldr	r0, [r7, #12]
 800124e:	4798      	blx	r3
 8001250:	4603      	mov	r3, r0
 8001252:	e001      	b.n	8001258 <net_sock_recv+0x2c>
 8001254:	f06f 0301 	mvn.w	r3, #1
}
 8001258:	4618      	mov	r0, r3
 800125a:	3718      	adds	r7, #24
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <net_sock_send>:
  return (sock->methods.recvfrom != NULL) ? sock->methods.recvfrom(sockhnd, buf, len, remoteaddress, remoteport) : NET_PARAM;
}


int net_sock_send(net_sockhnd_t sockhnd, const uint8_t * buf, size_t len)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	617b      	str	r3, [r7, #20]
  return (sock->methods.send != NULL) ? sock->methods.send(sockhnd, buf, len) : NET_PARAM;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d007      	beq.n	8001288 <net_sock_send+0x28>
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	695b      	ldr	r3, [r3, #20]
 800127c:	687a      	ldr	r2, [r7, #4]
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	68f8      	ldr	r0, [r7, #12]
 8001282:	4798      	blx	r3
 8001284:	4603      	mov	r3, r0
 8001286:	e001      	b.n	800128c <net_sock_send+0x2c>
 8001288:	f06f 0301 	mvn.w	r3, #1
} 
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <net_sock_close>:
  return (sock->methods.sendto != NULL) ? sock->methods.sendto(sockhnd, buf, len, remoteaddress, remoteport) : NET_PARAM;
} 
  

int net_sock_close(net_sockhnd_t sockhnd)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	60fb      	str	r3, [r7, #12]
  return (sock->methods.close != NULL) ? sock->methods.close(sockhnd) : NET_PARAM;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	69db      	ldr	r3, [r3, #28]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <net_sock_close+0x20>
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	4798      	blx	r3
 80012b0:	4603      	mov	r3, r0
 80012b2:	e001      	b.n	80012b8 <net_sock_close+0x24>
 80012b4:	f06f 0301 	mvn.w	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	3710      	adds	r7, #16
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}

080012c0 <net_sock_destroy>:


int net_sock_destroy(net_sockhnd_t sockhnd)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t *) sockhnd;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	60fb      	str	r3, [r7, #12]
  return (sock->methods.destroy != NULL) ? sock->methods.destroy(sockhnd) : NET_PARAM;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	6a1b      	ldr	r3, [r3, #32]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d005      	beq.n	80012e0 <net_sock_destroy+0x20>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	4798      	blx	r3
 80012dc:	4603      	mov	r3, r0
 80012de:	e001      	b.n	80012e4 <net_sock_destroy+0x24>
 80012e0:	f06f 0301 	mvn.w	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <net_timeout_left_ms>:
 * @param   In:   now       Current index.
 * @param   In:   timeout   Target index.
 * @retval  Number of units from now to target.
 */
int32_t net_timeout_left_ms(uint32_t init, uint32_t now, uint32_t timeout)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  int32_t ret = 0;
 80012f8:	2300      	movs	r3, #0
 80012fa:	613b      	str	r3, [r7, #16]
  uint32_t wrap_end = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  if (now < init)
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	429a      	cmp	r2, r3
 8001306:	d202      	bcs.n	800130e <net_timeout_left_ms+0x22>
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", init, now);
    wrap_end = UINT32_MAX - init;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	43db      	mvns	r3, r3
 800130c:	617b      	str	r3, [r7, #20]
  }
  ret = wrap_end - (now - init) + timeout;
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	1ad2      	subs	r2, r2, r3
 8001314:	697b      	ldr	r3, [r7, #20]
 8001316:	441a      	add	r2, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4413      	add	r3, r2
 800131c:	613b      	str	r3, [r7, #16]

  return ret;
 800131e:	693b      	ldr	r3, [r7, #16]
}
 8001320:	4618      	mov	r0, r3
 8001322:	371c      	adds	r7, #28
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <net_sock_create_wifi>:
int net_sock_destroy_tcp_wifi(net_sockhnd_t sockhnd);

/* Functions Definition ------------------------------------------------------*/

int net_sock_create_wifi(net_hnd_t nethnd, net_sockhnd_t * sockhnd, net_proto_t proto)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b088      	sub	sp, #32
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	4613      	mov	r3, r2
 8001338:	71fb      	strb	r3, [r7, #7]
  int rc = NET_ERR;
 800133a:	f04f 33ff 	mov.w	r3, #4294967295
 800133e:	61fb      	str	r3, [r7, #28]
  net_ctxt_t *ctxt = (net_ctxt_t *) nethnd;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	61bb      	str	r3, [r7, #24]
  net_sock_ctxt_t *sock = NULL;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  
  sock = net_malloc(sizeof(net_sock_ctxt_t));
 8001348:	2034      	movs	r0, #52	; 0x34
 800134a:	f00c fc3d 	bl	800dbc8 <malloc>
 800134e:	4603      	mov	r3, r0
 8001350:	617b      	str	r3, [r7, #20]
  if (sock == NULL)
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d10b      	bne.n	8001370 <net_sock_create_wifi+0x44>
  {
    msg_error("net_sock_create allocation failed.\n");
 8001358:	2259      	movs	r2, #89	; 0x59
 800135a:	492b      	ldr	r1, [pc, #172]	; (8001408 <net_sock_create_wifi+0xdc>)
 800135c:	482b      	ldr	r0, [pc, #172]	; (800140c <net_sock_create_wifi+0xe0>)
 800135e:	f00d f9e3 	bl	800e728 <iprintf>
 8001362:	482b      	ldr	r0, [pc, #172]	; (8001410 <net_sock_create_wifi+0xe4>)
 8001364:	f00d fa7c 	bl	800e860 <puts>
    rc = NET_ERR;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	e046      	b.n	80013fe <net_sock_create_wifi+0xd2>
  }
  else
  {
    memset(sock, 0, sizeof(net_sock_ctxt_t));
 8001370:	2234      	movs	r2, #52	; 0x34
 8001372:	2100      	movs	r1, #0
 8001374:	6978      	ldr	r0, [r7, #20]
 8001376:	f00c fc6f 	bl	800dc58 <memset>
    sock->net = ctxt;
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	601a      	str	r2, [r3, #0]
    sock->next = ctxt->sock_list;
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	605a      	str	r2, [r3, #4]
    sock->methods.open      = (net_sock_open_wifi);
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	4a22      	ldr	r2, [pc, #136]	; (8001414 <net_sock_create_wifi+0xe8>)
 800138c:	609a      	str	r2, [r3, #8]
    switch(proto)
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d002      	beq.n	800139a <net_sock_create_wifi+0x6e>
 8001394:	2b03      	cmp	r3, #3
 8001396:	d007      	beq.n	80013a8 <net_sock_create_wifi+0x7c>
 8001398:	e00d      	b.n	80013b6 <net_sock_create_wifi+0x8a>
    {
      case NET_PROTO_TCP:
        sock->methods.recv      = (net_sock_recv_tcp_wifi);
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	4a1e      	ldr	r2, [pc, #120]	; (8001418 <net_sock_create_wifi+0xec>)
 800139e:	60da      	str	r2, [r3, #12]
        sock->methods.send      = (net_sock_send_tcp_wifi);
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <net_sock_create_wifi+0xf0>)
 80013a4:	615a      	str	r2, [r3, #20]
        break;
 80013a6:	e00c      	b.n	80013c2 <net_sock_create_wifi+0x96>
      case NET_PROTO_UDP:
        sock->methods.recvfrom  = (net_sock_recvfrom_udp_wifi);
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <net_sock_create_wifi+0xf4>)
 80013ac:	611a      	str	r2, [r3, #16]
        sock->methods.sendto    = (net_sock_sendto_udp_wifi);
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	4a1c      	ldr	r2, [pc, #112]	; (8001424 <net_sock_create_wifi+0xf8>)
 80013b2:	619a      	str	r2, [r3, #24]
        break;
 80013b4:	e005      	b.n	80013c2 <net_sock_create_wifi+0x96>
      default:
        free(sock);
 80013b6:	6978      	ldr	r0, [r7, #20]
 80013b8:	f00c fc0e 	bl	800dbd8 <free>
        return NET_PARAM;
 80013bc:	f06f 0301 	mvn.w	r3, #1
 80013c0:	e01e      	b.n	8001400 <net_sock_create_wifi+0xd4>
    }
    sock->methods.close     = (net_sock_close_tcp_wifi);
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	4a18      	ldr	r2, [pc, #96]	; (8001428 <net_sock_create_wifi+0xfc>)
 80013c6:	61da      	str	r2, [r3, #28]
    sock->methods.destroy   = (net_sock_destroy_tcp_wifi);
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	4a18      	ldr	r2, [pc, #96]	; (800142c <net_sock_create_wifi+0x100>)
 80013cc:	621a      	str	r2, [r3, #32]
    sock->proto             = proto;
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	79fa      	ldrb	r2, [r7, #7]
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    sock->blocking          = NET_DEFAULT_BLOCKING;
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    sock->read_timeout      = NET_DEFAULT_BLOCKING_READ_TIMEOUT;
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013e4:	84da      	strh	r2, [r3, #38]	; 0x26
    sock->write_timeout     = NET_DEFAULT_BLOCKING_WRITE_TIMEOUT;
 80013e6:	697b      	ldr	r3, [r7, #20]
 80013e8:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80013ec:	851a      	strh	r2, [r3, #40]	; 0x28
    ctxt->sock_list         = sock; /* Insert at the head of the list */
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	697a      	ldr	r2, [r7, #20]
 80013f2:	605a      	str	r2, [r3, #4]
    *sockhnd = (net_sockhnd_t) sock;
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	601a      	str	r2, [r3, #0]

    rc = NET_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
  }
  
  return rc;
 80013fe:	69fb      	ldr	r3, [r7, #28]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3720      	adds	r7, #32
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	080128b0 	.word	0x080128b0
 800140c:	0801189c 	.word	0x0801189c
 8001410:	080118ac 	.word	0x080118ac
 8001414:	08001431 	.word	0x08001431
 8001418:	0800158d 	.word	0x0800158d
 800141c:	080018b5 	.word	0x080018b5
 8001420:	08001701 	.word	0x08001701
 8001424:	0800198d 	.word	0x0800198d
 8001428:	08001ab1 	.word	0x08001ab1
 800142c:	08001af9 	.word	0x08001af9

08001430 <net_sock_open_wifi>:


int net_sock_open_wifi(net_sockhnd_t sockhnd, const char * hostname, int remoteport, int localport)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b08f      	sub	sp, #60	; 0x3c
 8001434:	af02      	add	r7, sp, #8
 8001436:	60f8      	str	r0, [r7, #12]
 8001438:	60b9      	str	r1, [r7, #8]
 800143a:	607a      	str	r2, [r7, #4]
 800143c:	603b      	str	r3, [r7, #0]
  int rc = NET_ERR;
 800143e:	f04f 33ff 	mov.w	r3, #4294967295
 8001442:	62fb      	str	r3, [r7, #44]	; 0x2c
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	61fb      	str	r3, [r7, #28]
  uint8_t ip_addr[4] = { 0, 0, 0, 0 };
 8001448:	2300      	movs	r3, #0
 800144a:	61bb      	str	r3, [r7, #24]
  WIFI_Protocol_t proto;
  
  sock->underlying_sock_ctxt = (net_sockhnd_t) -1; /* Initialize to a non-null value which may not be confused with a valid port number. */
 800144c:	69fb      	ldr	r3, [r7, #28]
 800144e:	f04f 32ff 	mov.w	r2, #4294967295
 8001452:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Find a free underlying socket on the network interface. */
  bool underlying_socket_busy[WIFI_MAX_CONNECTIONS];
  memset(underlying_socket_busy, 0, sizeof(underlying_socket_busy));
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2204      	movs	r2, #4
 800145a:	2100      	movs	r1, #0
 800145c:	4618      	mov	r0, r3
 800145e:	f00c fbfb 	bl	800dc58 <memset>
  
  net_sock_ctxt_t * cur = sock->net->sock_list;
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	627b      	str	r3, [r7, #36]	; 0x24
  do 
  {
    if ( ((cur->proto == NET_PROTO_TCP) || (cur->proto == NET_PROTO_UDP) )&& ((int) cur->underlying_sock_ctxt >= 0) )
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001470:	2b01      	cmp	r3, #1
 8001472:	d004      	beq.n	800147e <net_sock_open_wifi+0x4e>
 8001474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001476:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800147a:	2b03      	cmp	r3, #3
 800147c:	d10a      	bne.n	8001494 <net_sock_open_wifi+0x64>
 800147e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001482:	2b00      	cmp	r3, #0
 8001484:	db06      	blt.n	8001494 <net_sock_open_wifi+0x64>
    {
      underlying_socket_busy[(int) cur->underlying_sock_ctxt] = true;
 8001486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800148a:	3330      	adds	r3, #48	; 0x30
 800148c:	443b      	add	r3, r7
 800148e:	2201      	movs	r2, #1
 8001490:	f803 2c1c 	strb.w	r2, [r3, #-28]
    }
    cur = cur->next;
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	627b      	str	r3, [r7, #36]	; 0x24
  } while (cur != NULL);
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1e4      	bne.n	800146a <net_sock_open_wifi+0x3a>
  
  for (int i = 0; i < WIFI_MAX_CONNECTIONS; i++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	623b      	str	r3, [r7, #32]
 80014a4:	e010      	b.n	80014c8 <net_sock_open_wifi+0x98>
  {
    if (underlying_socket_busy[i] == false)
 80014a6:	f107 0214 	add.w	r2, r7, #20
 80014aa:	6a3b      	ldr	r3, [r7, #32]
 80014ac:	4413      	add	r3, r2
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	f083 0301 	eor.w	r3, r3, #1
 80014b4:	b2db      	uxtb	r3, r3
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d003      	beq.n	80014c2 <net_sock_open_wifi+0x92>
    {
      sock->underlying_sock_ctxt = (net_sockhnd_t) i;
 80014ba:	6a3a      	ldr	r2, [r7, #32]
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	62da      	str	r2, [r3, #44]	; 0x2c
      break;
 80014c0:	e005      	b.n	80014ce <net_sock_open_wifi+0x9e>
  for (int i = 0; i < WIFI_MAX_CONNECTIONS; i++)
 80014c2:	6a3b      	ldr	r3, [r7, #32]
 80014c4:	3301      	adds	r3, #1
 80014c6:	623b      	str	r3, [r7, #32]
 80014c8:	6a3b      	ldr	r3, [r7, #32]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	ddeb      	ble.n	80014a6 <net_sock_open_wifi+0x76>
  }
  
  /* Free socket found */
  if (sock->underlying_sock_ctxt >= 0)
  {
    switch(sock->proto)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d002      	beq.n	80014de <net_sock_open_wifi+0xae>
 80014d8:	2b03      	cmp	r3, #3
 80014da:	d016      	beq.n	800150a <net_sock_open_wifi+0xda>
 80014dc:	e01f      	b.n	800151e <net_sock_open_wifi+0xee>
    {
      case NET_PROTO_TCP:
        if (localport != 0)
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d003      	beq.n	80014ec <net_sock_open_wifi+0xbc>
        { /* TCP local port setting is not implemented */
          rc = NET_PARAM;
 80014e4:	f06f 0301 	mvn.w	r3, #1
 80014e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          {
            proto = WIFI_TCP_PROTOCOL;
            rc = NET_OK;
          }
        }
        break;
 80014ea:	e017      	b.n	800151c <net_sock_open_wifi+0xec>
          if (WIFI_GetHostAddress((char *)hostname, ip_addr) != WIFI_STATUS_OK)
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	4619      	mov	r1, r3
 80014f2:	68b8      	ldr	r0, [r7, #8]
 80014f4:	f00c f9fc 	bl	800d8f0 <WIFI_GetHostAddress>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d10e      	bne.n	800151c <net_sock_open_wifi+0xec>
            proto = WIFI_TCP_PROTOCOL;
 80014fe:	2300      	movs	r3, #0
 8001500:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            rc = NET_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001508:	e008      	b.n	800151c <net_sock_open_wifi+0xec>
      case NET_PROTO_UDP:
        /* Record the local port binding. */
        sock->localport = localport;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	683a      	ldr	r2, [r7, #0]
 800150e:	631a      	str	r2, [r3, #48]	; 0x30
        proto = WIFI_UDP_PROTOCOL;
 8001510:	2301      	movs	r3, #1
 8001512:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        rc = NET_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800151a:	e000      	b.n	800151e <net_sock_open_wifi+0xee>
        break;
 800151c:	bf00      	nop
      default:
        ;
    }
        
    /* The Wifi "client connection" must be opened even in UDP mode. Otherwise the incoming traffic may be lost. */  
    if (rc == NET_OK)
 800151e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001520:	2b00      	cmp	r3, #0
 8001522:	d126      	bne.n	8001572 <net_sock_open_wifi+0x142>
    {
      if( WIFI_STATUS_OK != WIFI_OpenClientConnection((uint32_t) sock->underlying_sock_ctxt,
 8001524:	69fb      	ldr	r3, [r7, #28]
 8001526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001528:	461c      	mov	r4, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	b29b      	uxth	r3, r3
 800152e:	683a      	ldr	r2, [r7, #0]
 8001530:	b292      	uxth	r2, r2
 8001532:	f107 0018 	add.w	r0, r7, #24
 8001536:	f897 102b 	ldrb.w	r1, [r7, #43]	; 0x2b
 800153a:	9201      	str	r2, [sp, #4]
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	4603      	mov	r3, r0
 8001540:	4a0e      	ldr	r2, [pc, #56]	; (800157c <net_sock_open_wifi+0x14c>)
 8001542:	4620      	mov	r0, r4
 8001544:	f00c f9ec 	bl	800d920 <WIFI_OpenClientConnection>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d011      	beq.n	8001572 <net_sock_open_wifi+0x142>
            proto, "", ip_addr, remoteport, localport) )
      {
        msg_error("Failed opening the underlying Wifi socket %d.\n", (int) sock->underlying_sock_ctxt);
 800154e:	22c9      	movs	r2, #201	; 0xc9
 8001550:	490b      	ldr	r1, [pc, #44]	; (8001580 <net_sock_open_wifi+0x150>)
 8001552:	480c      	ldr	r0, [pc, #48]	; (8001584 <net_sock_open_wifi+0x154>)
 8001554:	f00d f8e8 	bl	800e728 <iprintf>
 8001558:	69fb      	ldr	r3, [r7, #28]
 800155a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800155c:	4619      	mov	r1, r3
 800155e:	480a      	ldr	r0, [pc, #40]	; (8001588 <net_sock_open_wifi+0x158>)
 8001560:	f00d f8e2 	bl	800e728 <iprintf>
        sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8001564:	69fb      	ldr	r3, [r7, #28]
 8001566:	f04f 32ff 	mov.w	r2, #4294967295
 800156a:	62da      	str	r2, [r3, #44]	; 0x2c
        rc = NET_ERR;
 800156c:	f04f 33ff 	mov.w	r3, #4294967295
 8001570:	62fb      	str	r3, [r7, #44]	; 0x2c
  {
    msg_error("Could not find a free socket on the specified network interface.\n");
    rc = NET_PARAM;
  }
  
  return rc;
 8001572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001574:	4618      	mov	r0, r3
 8001576:	3734      	adds	r7, #52	; 0x34
 8001578:	46bd      	mov	sp, r7
 800157a:	bd90      	pop	{r4, r7, pc}
 800157c:	080118d0 	.word	0x080118d0
 8001580:	080128c8 	.word	0x080128c8
 8001584:	0801189c 	.word	0x0801189c
 8001588:	080118d4 	.word	0x080118d4

0800158c <net_sock_recv_tcp_wifi>:


int net_sock_recv_tcp_wifi(net_sockhnd_t sockhnd, uint8_t * buf, size_t len)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08e      	sub	sp, #56	; 0x38
 8001590:	af02      	add	r7, sp, #8
 8001592:	60f8      	str	r0, [r7, #12]
 8001594:	60b9      	str	r1, [r7, #8]
 8001596:	607a      	str	r2, [r7, #4]
  int rc = 0;
 8001598:	2300      	movs	r3, #0
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  WIFI_Status_t status = WIFI_STATUS_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	61fb      	str	r3, [r7, #28]
  uint16_t read = 0;
 80015a6:	2300      	movs	r3, #0
 80015a8:	82fb      	strh	r3, [r7, #22]
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80015b0:	bf28      	it	cs
 80015b2:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 80015b6:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint8_t * tmp_buf = buf;
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t start_time = HAL_GetTick();
 80015bc:	f003 ff40 	bl	8005440 <HAL_GetTick>
 80015c0:	61b8      	str	r0, [r7, #24]
    
  /* Read the received payload by chunks of WIFI_PAYLOAD_SIZE bytes because of
   * a constraint of WIFI_ReceiveData(). */
  do
  {
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d00f      	beq.n	80015ec <net_sock_recv_tcp_wifi+0x60>
 80015cc:	f003 ff38 	bl	8005440 <HAL_GetTick>
 80015d0:	4601      	mov	r1, r0
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80015d6:	461a      	mov	r2, r3
 80015d8:	69b8      	ldr	r0, [r7, #24]
 80015da:	f7ff fe87 	bl	80012ec <net_timeout_left_ms>
 80015de:	4603      	mov	r3, r0
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	dc03      	bgt.n	80015ec <net_sock_recv_tcp_wifi+0x60>
    {
      rc = NET_TIMEOUT;
 80015e4:	f06f 0302 	mvn.w	r3, #2
 80015e8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 80015ea:	e072      	b.n	80016d2 <net_sock_recv_tcp_wifi+0x146>
    }
    
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015f0:	b2d8      	uxtb	r0, r3
                             (sock->blocking == true) ? sock->read_timeout : NET_DEFAULT_NOBLOCKING_READ_TIMEOUT);
 80015f2:	69fb      	ldr	r3, [r7, #28]
 80015f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d003      	beq.n	8001604 <net_sock_recv_tcp_wifi+0x78>
                             (sock->blocking == true) ? sock->read_timeout : NET_DEFAULT_NOBLOCKING_READ_TIMEOUT);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    status = WIFI_ReceiveData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 8001600:	4619      	mov	r1, r3
 8001602:	e000      	b.n	8001606 <net_sock_recv_tcp_wifi+0x7a>
 8001604:	2101      	movs	r1, #1
 8001606:	f107 0316 	add.w	r3, r7, #22
 800160a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800160c:	9100      	str	r1, [sp, #0]
 800160e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001610:	f00c fa24 	bl	800da5c <WIFI_ReceiveData>
 8001614:	4603      	mov	r3, r0
 8001616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    msg_debug("Read %d/%d.\n", read, tmp_len);
    if (status != WIFI_STATUS_OK)
 800161a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800161e:	2b00      	cmp	r3, #0
 8001620:	d01c      	beq.n	800165c <net_sock_recv_tcp_wifi+0xd0>
    {
      msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 8001622:	22f2      	movs	r2, #242	; 0xf2
 8001624:	4931      	ldr	r1, [pc, #196]	; (80016ec <net_sock_recv_tcp_wifi+0x160>)
 8001626:	4832      	ldr	r0, [pc, #200]	; (80016f0 <net_sock_recv_tcp_wifi+0x164>)
 8001628:	f00d f87e 	bl	800e728 <iprintf>
 800162c:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	4618      	mov	r0, r3
 8001636:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001638:	8afa      	ldrh	r2, [r7, #22]
 800163a:	9200      	str	r2, [sp, #0]
 800163c:	4602      	mov	r2, r0
 800163e:	482d      	ldr	r0, [pc, #180]	; (80016f4 <net_sock_recv_tcp_wifi+0x168>)
 8001640:	f00d f872 	bl	800e728 <iprintf>
             status, (int) sock->underlying_sock_ctxt, tmp_len, read);
      msg_error("The port is likely to have been closed by the server.\n")
 8001644:	22f4      	movs	r2, #244	; 0xf4
 8001646:	4929      	ldr	r1, [pc, #164]	; (80016ec <net_sock_recv_tcp_wifi+0x160>)
 8001648:	4829      	ldr	r0, [pc, #164]	; (80016f0 <net_sock_recv_tcp_wifi+0x164>)
 800164a:	f00d f86d 	bl	800e728 <iprintf>
 800164e:	482a      	ldr	r0, [pc, #168]	; (80016f8 <net_sock_recv_tcp_wifi+0x16c>)
 8001650:	f00d f906 	bl	800e860 <puts>
      rc = NET_EOF;
 8001654:	f06f 0303 	mvn.w	r3, #3
 8001658:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;  
 800165a:	e03a      	b.n	80016d2 <net_sock_recv_tcp_wifi+0x146>
    }
    else
    {
      if (read > tmp_len)
 800165c:	8afb      	ldrh	r3, [r7, #22]
 800165e:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8001660:	429a      	cmp	r2, r3
 8001662:	d20f      	bcs.n	8001684 <net_sock_recv_tcp_wifi+0xf8>
      {
        msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 8001664:	22fc      	movs	r2, #252	; 0xfc
 8001666:	4921      	ldr	r1, [pc, #132]	; (80016ec <net_sock_recv_tcp_wifi+0x160>)
 8001668:	4821      	ldr	r0, [pc, #132]	; (80016f0 <net_sock_recv_tcp_wifi+0x164>)
 800166a:	f00d f85d 	bl	800e728 <iprintf>
 800166e:	8afb      	ldrh	r3, [r7, #22]
 8001670:	4619      	mov	r1, r3
 8001672:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001674:	461a      	mov	r2, r3
 8001676:	4821      	ldr	r0, [pc, #132]	; (80016fc <net_sock_recv_tcp_wifi+0x170>)
 8001678:	f00d f856 	bl	800e728 <iprintf>
        rc = NET_ERR;
 800167c:	f04f 33ff 	mov.w	r3, #4294967295
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001682:	e026      	b.n	80016d2 <net_sock_recv_tcp_wifi+0x146>
      }
      tmp_buf += read;
 8001684:	8afb      	ldrh	r3, [r7, #22]
 8001686:	461a      	mov	r2, r3
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	4413      	add	r3, r2
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
      tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	461a      	mov	r2, r3
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4293      	cmp	r3, r2
 800169a:	d00c      	beq.n	80016b6 <net_sock_recv_tcp_wifi+0x12a>
 800169c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	461a      	mov	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	1a9b      	subs	r3, r3, r2
 80016a8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 80016ac:	bf28      	it	cs
 80016ae:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	e000      	b.n	80016b8 <net_sock_recv_tcp_wifi+0x12c>
 80016b6:	2300      	movs	r3, #0
 80016b8:	857b      	strh	r3, [r7, #42]	; 0x2a
    }
    
  } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 80016ba:	8afb      	ldrh	r3, [r7, #22]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d108      	bne.n	80016d2 <net_sock_recv_tcp_wifi+0x146>
 80016c0:	69fb      	ldr	r3, [r7, #28]
 80016c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d003      	beq.n	80016d2 <net_sock_recv_tcp_wifi+0x146>
 80016ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f43f af78 	beq.w	80015c2 <net_sock_recv_tcp_wifi+0x36>
    
  return (rc < 0) ? rc : tmp_buf - buf;
 80016d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	db03      	blt.n	80016e0 <net_sock_recv_tcp_wifi+0x154>
 80016d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	e000      	b.n	80016e2 <net_sock_recv_tcp_wifi+0x156>
 80016e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3730      	adds	r7, #48	; 0x30
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	080128dc 	.word	0x080128dc
 80016f0:	0801189c 	.word	0x0801189c
 80016f4:	08011904 	.word	0x08011904
 80016f8:	08011960 	.word	0x08011960
 80016fc:	08011998 	.word	0x08011998

08001700 <net_sock_recvfrom_udp_wifi>:


int net_sock_recvfrom_udp_wifi(net_sockhnd_t sockhnd, uint8_t * const buf, size_t len, net_ipaddr_t * remoteaddress, int * remoteport)
{
 8001700:	b590      	push	{r4, r7, lr}
 8001702:	b091      	sub	sp, #68	; 0x44
 8001704:	af04      	add	r7, sp, #16
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	60b9      	str	r1, [r7, #8]
 800170a:	607a      	str	r2, [r7, #4]
 800170c:	603b      	str	r3, [r7, #0]
  int rc = 0;
 800170e:	2300      	movs	r3, #0
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
  WIFI_Status_t status = WIFI_STATUS_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	61fb      	str	r3, [r7, #28]
  uint16_t read = 0;
 800171c:	2300      	movs	r3, #0
 800171e:	82fb      	strh	r3, [r7, #22]
  uint16_t tmp_len = MIN(len, WIFI_PAYLOAD_SIZE);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8001726:	bf28      	it	cs
 8001728:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 800172c:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint8_t * tmp_buf = buf;
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t start_time = HAL_GetTick();
 8001732:	f003 fe85 	bl	8005440 <HAL_GetTick>
 8001736:	61b8      	str	r0, [r7, #24]
  /* Note: The remote address and the remote port are unknown until a packet is received. */
  { /* Read the received payload by chunks of WIFI_PAYLOAD_SIZE bytes because of
     * a constraint of WIFI_ReceiveData(). */
    do
    {
      uint16_t port = 0;
 8001738:	2300      	movs	r3, #0
 800173a:	82bb      	strh	r3, [r7, #20]
      uint8_t ip[4] = { 0, 0, 0, 0 };
 800173c:	2300      	movs	r3, #0
 800173e:	613b      	str	r3, [r7, #16]
      if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->read_timeout) <= 0) )
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00f      	beq.n	800176a <net_sock_recvfrom_udp_wifi+0x6a>
 800174a:	f003 fe79 	bl	8005440 <HAL_GetTick>
 800174e:	4601      	mov	r1, r0
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001754:	461a      	mov	r2, r3
 8001756:	69b8      	ldr	r0, [r7, #24]
 8001758:	f7ff fdc8 	bl	80012ec <net_timeout_left_ms>
 800175c:	4603      	mov	r3, r0
 800175e:	2b00      	cmp	r3, #0
 8001760:	dc03      	bgt.n	800176a <net_sock_recvfrom_udp_wifi+0x6a>
      {
        rc = NET_TIMEOUT;
 8001762:	f06f 0302 	mvn.w	r3, #2
 8001766:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8001768:	e08e      	b.n	8001888 <net_sock_recvfrom_udp_wifi+0x188>
      }
      
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800176a:	69fb      	ldr	r3, [r7, #28]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176e:	b2d8      	uxtb	r0, r3
                               (sock->blocking == true) ? sock->read_timeout : NET_DEFAULT_NOBLOCKING_READ_TIMEOUT, ip , &port);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <net_sock_recvfrom_udp_wifi+0x82>
                               (sock->blocking == true) ? sock->read_timeout : NET_DEFAULT_NOBLOCKING_READ_TIMEOUT, ip , &port);
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
      status = WIFI_ReceiveDataFrom((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), tmp_buf, tmp_len, &read,
 800177e:	461c      	mov	r4, r3
 8001780:	e000      	b.n	8001784 <net_sock_recvfrom_udp_wifi+0x84>
 8001782:	2401      	movs	r4, #1
 8001784:	f107 0116 	add.w	r1, r7, #22
 8001788:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	9302      	str	r3, [sp, #8]
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	9301      	str	r3, [sp, #4]
 8001796:	9400      	str	r4, [sp, #0]
 8001798:	460b      	mov	r3, r1
 800179a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800179c:	f00c f980 	bl	800daa0 <WIFI_ReceiveDataFrom>
 80017a0:	4603      	mov	r3, r0
 80017a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      msg_debug("Read %d/%d.\n", read, tmp_len);
      if (status != WIFI_STATUS_OK)
 80017a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d01e      	beq.n	80017ec <net_sock_recvfrom_udp_wifi+0xec>
      {
        msg_error("net_sock_recv(): error %d in WIFI_ReceiveData() - socket=%d requestedLen=%d received=%d\n",
 80017ae:	f44f 7293 	mov.w	r2, #294	; 0x126
 80017b2:	493b      	ldr	r1, [pc, #236]	; (80018a0 <net_sock_recvfrom_udp_wifi+0x1a0>)
 80017b4:	483b      	ldr	r0, [pc, #236]	; (80018a4 <net_sock_recvfrom_udp_wifi+0x1a4>)
 80017b6:	f00c ffb7 	bl	800e728 <iprintf>
 80017ba:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c2:	4618      	mov	r0, r3
 80017c4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80017c6:	8afa      	ldrh	r2, [r7, #22]
 80017c8:	9200      	str	r2, [sp, #0]
 80017ca:	4602      	mov	r2, r0
 80017cc:	4836      	ldr	r0, [pc, #216]	; (80018a8 <net_sock_recvfrom_udp_wifi+0x1a8>)
 80017ce:	f00c ffab 	bl	800e728 <iprintf>
               status, (int) sock->underlying_sock_ctxt, tmp_len, read);
        msg_error("The port is likely to have been closed by the server.\n")
 80017d2:	f44f 7294 	mov.w	r2, #296	; 0x128
 80017d6:	4932      	ldr	r1, [pc, #200]	; (80018a0 <net_sock_recvfrom_udp_wifi+0x1a0>)
 80017d8:	4832      	ldr	r0, [pc, #200]	; (80018a4 <net_sock_recvfrom_udp_wifi+0x1a4>)
 80017da:	f00c ffa5 	bl	800e728 <iprintf>
 80017de:	4833      	ldr	r0, [pc, #204]	; (80018ac <net_sock_recvfrom_udp_wifi+0x1ac>)
 80017e0:	f00d f83e 	bl	800e860 <puts>
        rc = NET_EOF;
 80017e4:	f06f 0303 	mvn.w	r3, #3
 80017e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;  
 80017ea:	e04d      	b.n	8001888 <net_sock_recvfrom_udp_wifi+0x188>
      }
      else
      {
        if (read > tmp_len)
 80017ec:	8afb      	ldrh	r3, [r7, #22]
 80017ee:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d210      	bcs.n	8001816 <net_sock_recvfrom_udp_wifi+0x116>
        {
          msg_error("WIFI_ReceiveData() returned a longer payload than requested (%d/%d).\n", read, tmp_len);
 80017f4:	f44f 7298 	mov.w	r2, #304	; 0x130
 80017f8:	4929      	ldr	r1, [pc, #164]	; (80018a0 <net_sock_recvfrom_udp_wifi+0x1a0>)
 80017fa:	482a      	ldr	r0, [pc, #168]	; (80018a4 <net_sock_recvfrom_udp_wifi+0x1a4>)
 80017fc:	f00c ff94 	bl	800e728 <iprintf>
 8001800:	8afb      	ldrh	r3, [r7, #22]
 8001802:	4619      	mov	r1, r3
 8001804:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001806:	461a      	mov	r2, r3
 8001808:	4829      	ldr	r0, [pc, #164]	; (80018b0 <net_sock_recvfrom_udp_wifi+0x1b0>)
 800180a:	f00c ff8d 	bl	800e728 <iprintf>
          rc = NET_ERR;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
          break;
 8001814:	e038      	b.n	8001888 <net_sock_recvfrom_udp_wifi+0x188>
        }
        tmp_buf += read;
 8001816:	8afb      	ldrh	r3, [r7, #22]
 8001818:	461a      	mov	r2, r3
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	4413      	add	r3, r2
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
        tmp_len = MAX(0, MIN(len - (tmp_buf - buf), WIFI_PAYLOAD_SIZE));
 8001820:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	461a      	mov	r2, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4293      	cmp	r3, r2
 800182c:	d00c      	beq.n	8001848 <net_sock_recvfrom_udp_wifi+0x148>
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	461a      	mov	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800183e:	bf28      	it	cs
 8001840:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0
 8001844:	b29b      	uxth	r3, r3
 8001846:	e000      	b.n	800184a <net_sock_recvfrom_udp_wifi+0x14a>
 8001848:	2300      	movs	r3, #0
 800184a:	857b      	strh	r3, [r7, #42]	; 0x2a
      }
      
      remoteaddress->ipv = NET_IP_V4;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
      memset(remoteaddress->ip, 0xFF, sizeof(remoteaddress->ip));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	3301      	adds	r3, #1
 8001856:	2210      	movs	r2, #16
 8001858:	21ff      	movs	r1, #255	; 0xff
 800185a:	4618      	mov	r0, r3
 800185c:	f00c f9fc 	bl	800dc58 <memset>
      memcpy(&remoteaddress->ip[12], ip, 4);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	330d      	adds	r3, #13
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	601a      	str	r2, [r3, #0]
      *remoteport = port;
 8001868:	8abb      	ldrh	r3, [r7, #20]
 800186a:	461a      	mov	r2, r3
 800186c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800186e:	601a      	str	r2, [r3, #0]
    } while ( (read == 0) && (sock->blocking == true) && (rc == 0) );
 8001870:	8afb      	ldrh	r3, [r7, #22]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d108      	bne.n	8001888 <net_sock_recvfrom_udp_wifi+0x188>
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <net_sock_recvfrom_udp_wifi+0x188>
 8001880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001882:	2b00      	cmp	r3, #0
 8001884:	f43f af58 	beq.w	8001738 <net_sock_recvfrom_udp_wifi+0x38>
  }
  
  return (rc < 0) ? rc : tmp_buf - buf;
 8001888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800188a:	2b00      	cmp	r3, #0
 800188c:	db03      	blt.n	8001896 <net_sock_recvfrom_udp_wifi+0x196>
 800188e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	e000      	b.n	8001898 <net_sock_recvfrom_udp_wifi+0x198>
 8001896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001898:	4618      	mov	r0, r3
 800189a:	3734      	adds	r7, #52	; 0x34
 800189c:	46bd      	mov	sp, r7
 800189e:	bd90      	pop	{r4, r7, pc}
 80018a0:	080128f4 	.word	0x080128f4
 80018a4:	0801189c 	.word	0x0801189c
 80018a8:	08011904 	.word	0x08011904
 80018ac:	08011960 	.word	0x08011960
 80018b0:	08011998 	.word	0x08011998

080018b4 <net_sock_send_tcp_wifi>:


int net_sock_send_tcp_wifi( net_sockhnd_t sockhnd, const uint8_t * buf, size_t len)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08c      	sub	sp, #48	; 0x30
 80018b8:	af02      	add	r7, sp, #8
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  int rc = 0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	627b      	str	r3, [r7, #36]	; 0x24
  WIFI_Status_t status = WIFI_STATUS_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	61fb      	str	r3, [r7, #28]
  uint16_t sent = 0;
 80018ce:	2300      	movs	r3, #0
 80018d0:	82fb      	strh	r3, [r7, #22]
  uint32_t start_time = HAL_GetTick();
 80018d2:	f003 fdb5 	bl	8005440 <HAL_GetTick>
 80018d6:	61b8      	str	r0, [r7, #24]
  
  do
  {
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d00f      	beq.n	8001902 <net_sock_send_tcp_wifi+0x4e>
 80018e2:	f003 fdad 	bl	8005440 <HAL_GetTick>
 80018e6:	4601      	mov	r1, r0
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018ec:	461a      	mov	r2, r3
 80018ee:	69b8      	ldr	r0, [r7, #24]
 80018f0:	f7ff fcfc 	bl	80012ec <net_timeout_left_ms>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	dc03      	bgt.n	8001902 <net_sock_send_tcp_wifi+0x4e>
    {
      rc = NET_TIMEOUT;
 80018fa:	f06f 0302 	mvn.w	r3, #2
 80018fe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8001900:	e033      	b.n	800196a <net_sock_send_tcp_wifi+0xb6>
    }
    
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8001902:	69fb      	ldr	r3, [r7, #28]
 8001904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001906:	b2d8      	uxtb	r0, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	b29a      	uxth	r2, r3
                          (sock->blocking == true) ? sock->write_timeout : NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT );
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8001912:	2b00      	cmp	r3, #0
 8001914:	d003      	beq.n	800191e <net_sock_send_tcp_wifi+0x6a>
                          (sock->blocking == true) ? sock->write_timeout : NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT );
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    status = WIFI_SendData((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 800191a:	4619      	mov	r1, r3
 800191c:	e000      	b.n	8001920 <net_sock_send_tcp_wifi+0x6c>
 800191e:	2101      	movs	r1, #1
 8001920:	f107 0316 	add.w	r3, r7, #22
 8001924:	9100      	str	r1, [sp, #0]
 8001926:	68b9      	ldr	r1, [r7, #8]
 8001928:	f00c f850 	bl	800d9cc <WIFI_SendData>
 800192c:	4603      	mov	r3, r0
 800192e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (status !=  WIFI_STATUS_OK)
 8001932:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00c      	beq.n	8001954 <net_sock_send_tcp_wifi+0xa0>
    {
      rc = NET_ERR;
 800193a:	f04f 33ff 	mov.w	r3, #4294967295
 800193e:	627b      	str	r3, [r7, #36]	; 0x24
      msg_error("Send failed.\n");
 8001940:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8001944:	490e      	ldr	r1, [pc, #56]	; (8001980 <net_sock_send_tcp_wifi+0xcc>)
 8001946:	480f      	ldr	r0, [pc, #60]	; (8001984 <net_sock_send_tcp_wifi+0xd0>)
 8001948:	f00c feee 	bl	800e728 <iprintf>
 800194c:	480e      	ldr	r0, [pc, #56]	; (8001988 <net_sock_send_tcp_wifi+0xd4>)
 800194e:	f00c ff87 	bl	800e860 <puts>
      break;
 8001952:	e00a      	b.n	800196a <net_sock_send_tcp_wifi+0xb6>
    }
    msg_debug("send %d/%d.\n", sent, len);
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8001954:	8afb      	ldrh	r3, [r7, #22]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d107      	bne.n	800196a <net_sock_send_tcp_wifi+0xb6>
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001960:	2b00      	cmp	r3, #0
 8001962:	d002      	beq.n	800196a <net_sock_send_tcp_wifi+0xb6>
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	2b00      	cmp	r3, #0
 8001968:	d0b6      	beq.n	80018d8 <net_sock_send_tcp_wifi+0x24>
  
  return (rc < 0) ? rc : sent;
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	2b00      	cmp	r3, #0
 800196e:	db01      	blt.n	8001974 <net_sock_send_tcp_wifi+0xc0>
 8001970:	8afb      	ldrh	r3, [r7, #22]
 8001972:	e000      	b.n	8001976 <net_sock_send_tcp_wifi+0xc2>
 8001974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8001976:	4618      	mov	r0, r3
 8001978:	3728      	adds	r7, #40	; 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	08012910 	.word	0x08012910
 8001984:	0801189c 	.word	0x0801189c
 8001988:	080119e0 	.word	0x080119e0

0800198c <net_sock_sendto_udp_wifi>:


int net_sock_sendto_udp_wifi(net_sockhnd_t sockhnd, const uint8_t * buf, size_t len, net_ipaddr_t * remoteaddress, int remoteport)
{
 800198c:	b590      	push	{r4, r7, lr}
 800198e:	b091      	sub	sp, #68	; 0x44
 8001990:	af04      	add	r7, sp, #16
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  int rc = 0;
 800199a:	2300      	movs	r3, #0
 800199c:	62fb      	str	r3, [r7, #44]	; 0x2c
  WIFI_Status_t status = WIFI_STATUS_OK;
 800199e:	2300      	movs	r3, #0
 80019a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	623b      	str	r3, [r7, #32]
  uint16_t sent = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	833b      	strh	r3, [r7, #24]
  uint32_t start_time = HAL_GetTick();
 80019ac:	f003 fd48 	bl	8005440 <HAL_GetTick>
 80019b0:	61f8      	str	r0, [r7, #28]
  uint8_t ip_addr[4] = { 0, 0, 0, 0 };
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  int16_t port = remoteport;
 80019b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019b8:	837b      	strh	r3, [r7, #26]
  
  if (remoteaddress->ipv != NET_IP_V4)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d002      	beq.n	80019c8 <net_sock_sendto_udp_wifi+0x3c>
  {
    return NET_PARAM;
 80019c2:	f06f 0301 	mvn.w	r3, #1
 80019c6:	e068      	b.n	8001a9a <net_sock_sendto_udp_wifi+0x10e>
  }
  for (int i = 0; i < 4; i++)
 80019c8:	2300      	movs	r3, #0
 80019ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80019cc:	e00d      	b.n	80019ea <net_sock_sendto_udp_wifi+0x5e>
  {
    ip_addr[i] = remoteaddress->ip[12+i];
 80019ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019d0:	330c      	adds	r3, #12
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	4413      	add	r3, r2
 80019d6:	7859      	ldrb	r1, [r3, #1]
 80019d8:	f107 0214 	add.w	r2, r7, #20
 80019dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019de:	4413      	add	r3, r2
 80019e0:	460a      	mov	r2, r1
 80019e2:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 4; i++)
 80019e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019e6:	3301      	adds	r3, #1
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019ec:	2b03      	cmp	r3, #3
 80019ee:	ddee      	ble.n	80019ce <net_sock_sendto_udp_wifi+0x42>
  }
  
  do
  {
    if ( (sock->blocking == true) && (net_timeout_left_ms(start_time, HAL_GetTick(), sock->write_timeout) <= 0) )
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00f      	beq.n	8001a1a <net_sock_sendto_udp_wifi+0x8e>
 80019fa:	f003 fd21 	bl	8005440 <HAL_GetTick>
 80019fe:	4601      	mov	r1, r0
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	461a      	mov	r2, r3
 8001a06:	69f8      	ldr	r0, [r7, #28]
 8001a08:	f7ff fc70 	bl	80012ec <net_timeout_left_ms>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	dc03      	bgt.n	8001a1a <net_sock_sendto_udp_wifi+0x8e>
    {
      rc = NET_TIMEOUT;
 8001a12:	f06f 0302 	mvn.w	r3, #2
 8001a16:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8001a18:	e039      	b.n	8001a8e <net_sock_sendto_udp_wifi+0x102>
    }
    
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8001a1a:	6a3b      	ldr	r3, [r7, #32]
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	b2d8      	uxtb	r0, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	b29a      	uxth	r2, r3
                          (sock->blocking == true) ? sock->write_timeout : NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT, ip_addr, port );
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d003      	beq.n	8001a36 <net_sock_sendto_udp_wifi+0xaa>
                          (sock->blocking == true) ? sock->write_timeout : NET_DEFAULT_NOBLOCKING_WRITE_TIMEOUT, ip_addr, port );
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    status = WIFI_SendDataTo((uint8_t) ((uint32_t)sock->underlying_sock_ctxt & 0xFF), (uint8_t *)buf, len, &sent,
 8001a32:	461c      	mov	r4, r3
 8001a34:	e000      	b.n	8001a38 <net_sock_sendto_udp_wifi+0xac>
 8001a36:	2401      	movs	r4, #1
 8001a38:	8b7b      	ldrh	r3, [r7, #26]
 8001a3a:	f107 0118 	add.w	r1, r7, #24
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	9400      	str	r4, [sp, #0]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	68b9      	ldr	r1, [r7, #8]
 8001a4c:	f00b ffe0 	bl	800da10 <WIFI_SendDataTo>
 8001a50:	4603      	mov	r3, r0
 8001a52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    if (status !=  WIFI_STATUS_OK)
 8001a56:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00c      	beq.n	8001a78 <net_sock_sendto_udp_wifi+0xec>
    {
      rc = NET_ERR;
 8001a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a62:	62fb      	str	r3, [r7, #44]	; 0x2c
      msg_error("Send failed.\n");
 8001a64:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8001a68:	490e      	ldr	r1, [pc, #56]	; (8001aa4 <net_sock_sendto_udp_wifi+0x118>)
 8001a6a:	480f      	ldr	r0, [pc, #60]	; (8001aa8 <net_sock_sendto_udp_wifi+0x11c>)
 8001a6c:	f00c fe5c 	bl	800e728 <iprintf>
 8001a70:	480e      	ldr	r0, [pc, #56]	; (8001aac <net_sock_sendto_udp_wifi+0x120>)
 8001a72:	f00c fef5 	bl	800e860 <puts>
      break;
 8001a76:	e00a      	b.n	8001a8e <net_sock_sendto_udp_wifi+0x102>
    }
  
  } while ( (sent == 0) && (sock->blocking == true) && (rc == 0) );
 8001a78:	8b3b      	ldrh	r3, [r7, #24]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <net_sock_sendto_udp_wifi+0x102>
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <net_sock_sendto_udp_wifi+0x102>
 8001a88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0b0      	beq.n	80019f0 <net_sock_sendto_udp_wifi+0x64>
    
  return (rc < 0) ? rc : sent;
 8001a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	db01      	blt.n	8001a98 <net_sock_sendto_udp_wifi+0x10c>
 8001a94:	8b3b      	ldrh	r3, [r7, #24]
 8001a96:	e000      	b.n	8001a9a <net_sock_sendto_udp_wifi+0x10e>
 8001a98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3734      	adds	r7, #52	; 0x34
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd90      	pop	{r4, r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08012928 	.word	0x08012928
 8001aa8:	0801189c 	.word	0x0801189c
 8001aac:	080119e0 	.word	0x080119e0

08001ab0 <net_sock_close_tcp_wifi>:


int net_sock_close_tcp_wifi(net_sockhnd_t sockhnd)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  int rc = NET_ERR;
 8001ab8:	f04f 33ff 	mov.w	r3, #4294967295
 8001abc:	617b      	str	r3, [r7, #20]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	613b      	str	r3, [r7, #16]
  WIFI_Status_t status = WIFI_CloseClientConnection((uint8_t) ((uint32_t)sock->underlying_sock_ctxt && 0xFF));
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	bf14      	ite	ne
 8001aca:	2301      	movne	r3, #1
 8001acc:	2300      	moveq	r3, #0
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f00b ff5e 	bl	800d994 <WIFI_CloseClientConnection>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	73fb      	strb	r3, [r7, #15]
  if (status == WIFI_STATUS_OK)
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d105      	bne.n	8001aee <net_sock_close_tcp_wifi+0x3e>
  {
    sock->underlying_sock_ctxt = (net_sockhnd_t) -1;
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae8:	62da      	str	r2, [r3, #44]	; 0x2c
    rc = NET_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  }
  return rc;
 8001aee:	697b      	ldr	r3, [r7, #20]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <net_sock_destroy_tcp_wifi>:


int net_sock_destroy_tcp_wifi(net_sockhnd_t sockhnd)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  int rc = NET_ERR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295
 8001b04:	617b      	str	r3, [r7, #20]
  net_sock_ctxt_t *sock = (net_sock_ctxt_t * ) sockhnd;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
  net_ctxt_t *ctxt = sock->net;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60bb      	str	r3, [r7, #8]
    
  /* Find the parent in the linked list.
   * Unlink and free. 
   */
  if (sock == ctxt->sock_list)
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d106      	bne.n	8001b28 <net_sock_destroy_tcp_wifi+0x30>
  {
    ctxt->sock_list = sock->next;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	605a      	str	r2, [r3, #4]
    rc = NET_OK;
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	e015      	b.n	8001b54 <net_sock_destroy_tcp_wifi+0x5c>
  }
  else
  {
    net_sock_ctxt_t *cur = ctxt->sock_list;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
    do
    {
      if (cur->next == sock)
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d106      	bne.n	8001b46 <net_sock_destroy_tcp_wifi+0x4e>
      {
        cur->next = sock->next;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	605a      	str	r2, [r3, #4]
        rc = NET_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]
        break;
 8001b44:	e006      	b.n	8001b54 <net_sock_destroy_tcp_wifi+0x5c>
      }
      cur = cur->next;
 8001b46:	693b      	ldr	r3, [r7, #16]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	613b      	str	r3, [r7, #16]
    } while(cur->next != NULL);
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1ec      	bne.n	8001b2e <net_sock_destroy_tcp_wifi+0x36>
  }
  if (rc == NET_OK)
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d102      	bne.n	8001b60 <net_sock_destroy_tcp_wifi+0x68>
  {
    net_free(sock);
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f00c f83c 	bl	800dbd8 <free>
  }
  
  return rc;
 8001b60:	697b      	ldr	r3, [r7, #20]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <TimerCountdownMS>:
#include "main.h"
#include "paho_timer.h"  


void TimerCountdownMS(Timer* timer, unsigned int timeout_ms)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	6039      	str	r1, [r7, #0]
  timer->init_tick = HAL_GetTick();
 8001b74:	f003 fc64 	bl	8005440 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	601a      	str	r2, [r3, #0]
  timer->timeout_ms = timeout_ms;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	605a      	str	r2, [r3, #4]
}
 8001b84:	bf00      	nop
 8001b86:	3708      	adds	r7, #8
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <TimerCountdown>:


void TimerCountdown(Timer* timer, unsigned int timeout)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  TimerCountdownMS(timer, timeout * 1000);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001b9c:	fb02 f303 	mul.w	r3, r2, r3
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f7ff ffe1 	bl	8001b6a <TimerCountdownMS>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}

08001bb0 <TimerLeftMS>:


int TimerLeftMS(Timer* timer)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  uint32_t cur_tick = HAL_GetTick();  // The HAL tick period is 1 millisecond.
 8001bbc:	f003 fc40 	bl	8005440 <HAL_GetTick>
 8001bc0:	60b8      	str	r0, [r7, #8]
  if (cur_tick < timer->init_tick)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	68ba      	ldr	r2, [r7, #8]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d20a      	bcs.n	8001be2 <TimerLeftMS+0x32>
  { // Timer wrap-around detected
    // printf("Timer: wrap-around detected from %d to %d\n", timer->init_tick, cur_tick);
    timer->timeout_ms -= 0xFFFFFFFF - timer->init_tick;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4413      	add	r3, r2
 8001bd6:	1c5a      	adds	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	605a      	str	r2, [r3, #4]
    timer->init_tick = 0;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
  }
  ret = timer->timeout_ms - (cur_tick - timer->init_tick);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6819      	ldr	r1, [r3, #0]
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	1acb      	subs	r3, r1, r3
 8001bee:	4413      	add	r3, r2
 8001bf0:	60fb      	str	r3, [r7, #12]

  return (ret >= 0) ? ret : 0;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <TimerIsExpired>:


char TimerIsExpired(Timer* timer)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  return (TimerLeftMS(timer) > 0) ? 0 : 1;
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f7ff ffd1 	bl	8001bb0 <TimerLeftMS>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	bfd4      	ite	le
 8001c14:	2301      	movle	r3, #1
 8001c16:	2300      	movgt	r3, #0
 8001c18:	b2db      	uxtb	r3, r3
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <TimerInit>:


void TimerInit(Timer* timer)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  timer->init_tick = 0;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
  timer->timeout_ms = 0;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	605a      	str	r2, [r3, #4]
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <setRTCTimeDateFromNetwork>:
 *            TD_ERR_RTC          Could not set the RTC.
 *            TD_ERR_TLS_CERT     The server certificate verification failed. Applicable only when force_apply is false.
 *                                .
 */
int setRTCTimeDateFromNetwork(bool force_apply)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 8001c4a:	af06      	add	r7, sp, #24
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001c52:	f2a3 4351 	subw	r3, r3, #1105	; 0x451
 8001c56:	701a      	strb	r2, [r3, #0]
 // return 0;
  int rc = TD_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
  int ret = NET_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
  net_sockhnd_t socket = NULL;
 8001c64:	2300      	movs	r3, #0
 8001c66:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
  int len = strlen(http_request);
 8001c6a:	2325      	movs	r3, #37	; 0x25
 8001c6c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
  char buffer[NET_BUF_SIZE + 1]; /* +1 to be sure that the buffer is closed by a \0, so that it may be parsed by string commands. */
  memset(buffer, 0, sizeof(buffer));
 8001c70:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c74:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001c78:	2100      	movs	r1, #0
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f00b ffec 	bl	800dc58 <memset>
 
  ret = net_sock_create(hnet, &socket, TIME_SOURCE_HTTP_PROTO);
 8001c80:	4bcd      	ldr	r3, [pc, #820]	; (8001fb8 <setRTCTimeDateFromNetwork+0x374>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f507 6187 	add.w	r1, r7, #1080	; 0x438
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fa0e 	bl	80010ac <net_sock_create>
 8001c90:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
  if (ret != NET_OK)
 8001c94:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d008      	beq.n	8001cae <setRTCTimeDateFromNetwork+0x6a>
  {
    msg_error("Could not create the socket.\n");
 8001c9c:	2267      	movs	r2, #103	; 0x67
 8001c9e:	49c7      	ldr	r1, [pc, #796]	; (8001fbc <setRTCTimeDateFromNetwork+0x378>)
 8001ca0:	48c7      	ldr	r0, [pc, #796]	; (8001fc0 <setRTCTimeDateFromNetwork+0x37c>)
 8001ca2:	f00c fd41 	bl	800e728 <iprintf>
 8001ca6:	48c7      	ldr	r0, [pc, #796]	; (8001fc4 <setRTCTimeDateFromNetwork+0x380>)
 8001ca8:	f00c fdda 	bl	800e860 <puts>
 8001cac:	e00c      	b.n	8001cc8 <setRTCTimeDateFromNetwork+0x84>
  }
  else
  {
#define NET_READ_TIMEOUT  "5000"
    ret |= net_sock_setopt(socket, "sock_read_timeout", (uint8_t*)NET_READ_TIMEOUT, sizeof(NET_READ_TIMEOUT));
 8001cae:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8001cb2:	2305      	movs	r3, #5
 8001cb4:	4ac4      	ldr	r2, [pc, #784]	; (8001fc8 <setRTCTimeDateFromNetwork+0x384>)
 8001cb6:	49c5      	ldr	r1, [pc, #788]	; (8001fcc <setRTCTimeDateFromNetwork+0x388>)
 8001cb8:	f7ff fa44 	bl	8001144 <net_sock_setopt>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
      ret |= net_sock_setopt(socket, "tls_server_name", (uint8_t*)TIME_SOURCE_HTTP_HOST, sizeof(TIME_SOURCE_HTTP_HOST));
      ret |= net_sock_setopt(socket, (force_apply == true) ? "tls_server_noverification" : "tls_server_verification", NULL, 0);
    }
  }
  
  if (ret != NET_OK)
 8001cc8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d008      	beq.n	8001ce2 <setRTCTimeDateFromNetwork+0x9e>
  {
    msg_error("Could not set the socket options.\n");
 8001cd0:	2277      	movs	r2, #119	; 0x77
 8001cd2:	49ba      	ldr	r1, [pc, #744]	; (8001fbc <setRTCTimeDateFromNetwork+0x378>)
 8001cd4:	48ba      	ldr	r0, [pc, #744]	; (8001fc0 <setRTCTimeDateFromNetwork+0x37c>)
 8001cd6:	f00c fd27 	bl	800e728 <iprintf>
 8001cda:	48bd      	ldr	r0, [pc, #756]	; (8001fd0 <setRTCTimeDateFromNetwork+0x38c>)
 8001cdc:	f00c fdc0 	bl	800e860 <puts>
 8001ce0:	e008      	b.n	8001cf4 <setRTCTimeDateFromNetwork+0xb0>
  }
  else
  {
    ret = net_sock_open(socket, TIME_SOURCE_HTTP_HOST, TIME_SOURCE_HTTP_PORT, 0);
 8001ce2:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2250      	movs	r2, #80	; 0x50
 8001cea:	49ba      	ldr	r1, [pc, #744]	; (8001fd4 <setRTCTimeDateFromNetwork+0x390>)
 8001cec:	f7ff fa14 	bl	8001118 <net_sock_open>
 8001cf0:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
  }
  
  if (ret == NET_AUTH)
 8001cf4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001cf8:	f113 0f06 	cmn.w	r3, #6
 8001cfc:	d10b      	bne.n	8001d16 <setRTCTimeDateFromNetwork+0xd2>
  {
    msg_error("An incorrect system time may have resulted in a TLS authentication error.\n");
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	49ae      	ldr	r1, [pc, #696]	; (8001fbc <setRTCTimeDateFromNetwork+0x378>)
 8001d02:	48af      	ldr	r0, [pc, #700]	; (8001fc0 <setRTCTimeDateFromNetwork+0x37c>)
 8001d04:	f00c fd10 	bl	800e728 <iprintf>
 8001d08:	48b3      	ldr	r0, [pc, #716]	; (8001fd8 <setRTCTimeDateFromNetwork+0x394>)
 8001d0a:	f00c fda9 	bl	800e860 <puts>
    rc = TD_ERR_TLS_CERT;
 8001d0e:	f06f 0303 	mvn.w	r3, #3
 8001d12:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
  }
  
  if ( (ret != NET_OK) || (rc != TD_OK) )
 8001d16:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d103      	bne.n	8001d26 <setRTCTimeDateFromNetwork+0xe2>
 8001d1e:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <setRTCTimeDateFromNetwork+0xf4>
  {
    msg_error("Could not open the socket.\n");
 8001d26:	2286      	movs	r2, #134	; 0x86
 8001d28:	49a4      	ldr	r1, [pc, #656]	; (8001fbc <setRTCTimeDateFromNetwork+0x378>)
 8001d2a:	48a5      	ldr	r0, [pc, #660]	; (8001fc0 <setRTCTimeDateFromNetwork+0x37c>)
 8001d2c:	f00c fcfc 	bl	800e728 <iprintf>
 8001d30:	48aa      	ldr	r0, [pc, #680]	; (8001fdc <setRTCTimeDateFromNetwork+0x398>)
 8001d32:	f00c fd95 	bl	800e860 <puts>
 8001d36:	e2ac      	b.n	8002292 <setRTCTimeDateFromNetwork+0x64e>
  }
  else
  {
    ret = net_sock_send(socket, (uint8_t *) http_request, len);
 8001d38:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8001d3c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 8001d40:	49a7      	ldr	r1, [pc, #668]	; (8001fe0 <setRTCTimeDateFromNetwork+0x39c>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fa8c 	bl	8001260 <net_sock_send>
 8001d48:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
    
    if (ret != len)
 8001d4c:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8001d50:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d00a      	beq.n	8001d6e <setRTCTimeDateFromNetwork+0x12a>
    {
      msg_error("Could not send %d bytes.\n", len);
 8001d58:	228e      	movs	r2, #142	; 0x8e
 8001d5a:	4998      	ldr	r1, [pc, #608]	; (8001fbc <setRTCTimeDateFromNetwork+0x378>)
 8001d5c:	4898      	ldr	r0, [pc, #608]	; (8001fc0 <setRTCTimeDateFromNetwork+0x37c>)
 8001d5e:	f00c fce3 	bl	800e728 <iprintf>
 8001d62:	f8d7 1444 	ldr.w	r1, [r7, #1092]	; 0x444
 8001d66:	489f      	ldr	r0, [pc, #636]	; (8001fe4 <setRTCTimeDateFromNetwork+0x3a0>)
 8001d68:	f00c fcde 	bl	800e728 <iprintf>
 8001d6c:	e28a      	b.n	8002284 <setRTCTimeDateFromNetwork+0x640>
    }
    else
    {
      char *dateStr = NULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
      int read = 0;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
      do
      {
        len = net_sock_recv(socket, (uint8_t *) buffer + read, NET_BUF_SIZE - read);
 8001d7a:	f8d7 0438 	ldr.w	r0, [r7, #1080]	; 0x438
 8001d7e:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001d82:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8001d86:	18d1      	adds	r1, r2, r3
 8001d88:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001d8c:	f5c3 737a 	rsb	r3, r3, #1000	; 0x3e8
 8001d90:	461a      	mov	r2, r3
 8001d92:	f7ff fa4b 	bl	800122c <net_sock_recv>
 8001d96:	f8c7 0444 	str.w	r0, [r7, #1092]	; 0x444
        if (len > 0)
 8001d9a:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	dd0e      	ble.n	8001dc0 <setRTCTimeDateFromNetwork+0x17c>
        {
          read += len;
 8001da2:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8001da6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001daa:	4413      	add	r3, r2
 8001dac:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
          dateStr = strstr(buffer, "Date: ");
 8001db0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001db4:	498c      	ldr	r1, [pc, #560]	; (8001fe8 <setRTCTimeDateFromNetwork+0x3a4>)
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00c fe56 	bl	800ea68 <strstr>
 8001dbc:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
        }
      } while ( (dateStr == NULL) && ((len >= 0) || (len == NET_TIMEOUT)) && (read < NET_BUF_SIZE));
 8001dc0:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d10d      	bne.n	8001de4 <setRTCTimeDateFromNetwork+0x1a0>
 8001dc8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	da04      	bge.n	8001dda <setRTCTimeDateFromNetwork+0x196>
 8001dd0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 8001dd4:	f113 0f03 	cmn.w	r3, #3
 8001dd8:	d104      	bne.n	8001de4 <setRTCTimeDateFromNetwork+0x1a0>
 8001dda:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8001dde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001de2:	dbca      	blt.n	8001d7a <setRTCTimeDateFromNetwork+0x136>
      
      if (dateStr == NULL)
 8001de4:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d10c      	bne.n	8001e06 <setRTCTimeDateFromNetwork+0x1c2>
      {
        msg_error("No 'Date:' line found in the HTTP response header.\n");
 8001dec:	22a0      	movs	r2, #160	; 0xa0
 8001dee:	4973      	ldr	r1, [pc, #460]	; (8001fbc <setRTCTimeDateFromNetwork+0x378>)
 8001df0:	4873      	ldr	r0, [pc, #460]	; (8001fc0 <setRTCTimeDateFromNetwork+0x37c>)
 8001df2:	f00c fc99 	bl	800e728 <iprintf>
 8001df6:	487d      	ldr	r0, [pc, #500]	; (8001fec <setRTCTimeDateFromNetwork+0x3a8>)
 8001df8:	f00c fd32 	bl	800e860 <puts>
        rc = TD_ERR_HTTP;
 8001dfc:	f06f 0301 	mvn.w	r3, #1
 8001e00:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001e04:	e23e      	b.n	8002284 <setRTCTimeDateFromNetwork+0x640>
      }
      else
      {
        rc = TD_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
        char prefix[8], dow[8], month[4]; 
        int day, year, hour, min, sec;
      
        memset(dow, 0, sizeof(dow));
 8001e0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e10:	2208      	movs	r2, #8
 8001e12:	2100      	movs	r1, #0
 8001e14:	4618      	mov	r0, r3
 8001e16:	f00b ff1f 	bl	800dc58 <memset>
        memset(month, 0, sizeof(month));
 8001e1a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e1e:	2204      	movs	r2, #4
 8001e20:	2100      	movs	r1, #0
 8001e22:	4618      	mov	r0, r3
 8001e24:	f00b ff18 	bl	800dc58 <memset>
        day = year = hour = min = sec = 0;
 8001e28:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e2c:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e38:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e42:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e4c:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e56:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001e5a:	601a      	str	r2, [r3, #0]
 8001e5c:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e60:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e6a:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e74:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001e7e:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8001e82:	601a      	str	r2, [r3, #0]
        
        int count = sscanf(dateStr, "%s %s %d %s %d %02d:%02d:%02d ", prefix, dow, &day, month, &year, &hour, &min, &sec);
 8001e84:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8001e88:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8001e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e90:	9305      	str	r3, [sp, #20]
 8001e92:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e96:	9304      	str	r3, [sp, #16]
 8001e98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001e9c:	9303      	str	r3, [sp, #12]
 8001e9e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ea2:	9302      	str	r3, [sp, #8]
 8001ea4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	460b      	mov	r3, r1
 8001eb2:	494f      	ldr	r1, [pc, #316]	; (8001ff0 <setRTCTimeDateFromNetwork+0x3ac>)
 8001eb4:	f8d7 044c 	ldr.w	r0, [r7, #1100]	; 0x44c
 8001eb8:	f00c fd3e 	bl	800e938 <siscanf>
 8001ebc:	f8c7 0440 	str.w	r0, [r7, #1088]	; 0x440
        if (count < 8)
 8001ec0:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 8001ec4:	2b07      	cmp	r3, #7
 8001ec6:	dc11      	bgt.n	8001eec <setRTCTimeDateFromNetwork+0x2a8>
        {
          msg_error("At time initialization, only %d out of the 8 time/date data could be parsed from the HTTP response %s\n", count, buffer);
 8001ec8:	22b0      	movs	r2, #176	; 0xb0
 8001eca:	493c      	ldr	r1, [pc, #240]	; (8001fbc <setRTCTimeDateFromNetwork+0x378>)
 8001ecc:	483c      	ldr	r0, [pc, #240]	; (8001fc0 <setRTCTimeDateFromNetwork+0x37c>)
 8001ece:	f00c fc2b 	bl	800e728 <iprintf>
 8001ed2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	f8d7 1440 	ldr.w	r1, [r7, #1088]	; 0x440
 8001edc:	4845      	ldr	r0, [pc, #276]	; (8001ff4 <setRTCTimeDateFromNetwork+0x3b0>)
 8001ede:	f00c fc23 	bl	800e728 <iprintf>
          rc = TD_ERR_HTTP;
 8001ee2:	f06f 0301 	mvn.w	r3, #1
 8001ee6:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8001eea:	e1cb      	b.n	8002284 <setRTCTimeDateFromNetwork+0x640>
        }
        else
        {
          char * str = strstr(dateStr, "\r\n");
 8001eec:	4942      	ldr	r1, [pc, #264]	; (8001ff8 <setRTCTimeDateFromNetwork+0x3b4>)
 8001eee:	f8d7 044c 	ldr.w	r0, [r7, #1100]	; 0x44c
 8001ef2:	f00c fdb9 	bl	800ea68 <strstr>
 8001ef6:	f8c7 043c 	str.w	r0, [r7, #1084]	; 0x43c
          str[0] = '\0';
 8001efa:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 8001efe:	2200      	movs	r2, #0
 8001f00:	701a      	strb	r2, [r3, #0]
          msg_info("Configuring the RTC from %s\n", dateStr);
          
          RTC_TimeTypeDef sTime;
          sTime.Hours = hour;
 8001f02:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f06:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b2da      	uxtb	r2, r3
 8001f0e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f12:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001f16:	701a      	strb	r2, [r3, #0]
          sTime.Minutes = min;
 8001f18:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f1c:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b2da      	uxtb	r2, r3
 8001f24:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f28:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001f2c:	705a      	strb	r2, [r3, #1]
          sTime.Seconds = sec;
 8001f2e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f32:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f3e:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001f42:	709a      	strb	r2, [r3, #2]
          sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f44:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f48:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
          sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f50:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f54:	f5a3 6389 	sub.w	r3, r3, #1096	; 0x448
 8001f58:	2200      	movs	r2, #0
 8001f5a:	611a      	str	r2, [r3, #16]
          if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	2200      	movs	r2, #0
 8001f62:	4619      	mov	r1, r3
 8001f64:	4825      	ldr	r0, [pc, #148]	; (8001ffc <setRTCTimeDateFromNetwork+0x3b8>)
 8001f66:	f006 fa5d 	bl	8008424 <HAL_RTC_SetTime>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <setRTCTimeDateFromNetwork+0x334>
          {
            rc = TD_ERR_RTC;
 8001f70:	f06f 0302 	mvn.w	r3, #2
 8001f74:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
          }

          RTC_DateTypeDef sDate;
          if (strcmp(dow, "Mon,") == 0) { sDate.WeekDay = RTC_WEEKDAY_MONDAY; } else
 8001f78:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f7c:	4920      	ldr	r1, [pc, #128]	; (8002000 <setRTCTimeDateFromNetwork+0x3bc>)
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f7fe f926 	bl	80001d0 <strcmp>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <setRTCTimeDateFromNetwork+0x354>
 8001f8a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001f8e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001f92:	2201      	movs	r2, #1
 8001f94:	701a      	strb	r2, [r3, #0]
 8001f96:	e08b      	b.n	80020b0 <setRTCTimeDateFromNetwork+0x46c>
            if (strcmp(dow, "Tue,") == 0) { sDate.WeekDay = RTC_WEEKDAY_TUESDAY; } else
 8001f98:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001f9c:	4919      	ldr	r1, [pc, #100]	; (8002004 <setRTCTimeDateFromNetwork+0x3c0>)
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe f916 	bl	80001d0 <strcmp>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d12e      	bne.n	8002008 <setRTCTimeDateFromNetwork+0x3c4>
 8001faa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8001fae:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8001fb2:	2202      	movs	r2, #2
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	e07b      	b.n	80020b0 <setRTCTimeDateFromNetwork+0x46c>
 8001fb8:	200009c4 	.word	0x200009c4
 8001fbc:	0801296c 	.word	0x0801296c
 8001fc0:	080119f0 	.word	0x080119f0
 8001fc4:	08011a00 	.word	0x08011a00
 8001fc8:	08011a20 	.word	0x08011a20
 8001fcc:	08011a28 	.word	0x08011a28
 8001fd0:	08011a3c 	.word	0x08011a3c
 8001fd4:	08011a60 	.word	0x08011a60
 8001fd8:	08011a6c 	.word	0x08011a6c
 8001fdc:	08011ab8 	.word	0x08011ab8
 8001fe0:	08012944 	.word	0x08012944
 8001fe4:	08011ad4 	.word	0x08011ad4
 8001fe8:	08011af0 	.word	0x08011af0
 8001fec:	08011af8 	.word	0x08011af8
 8001ff0:	08011b2c 	.word	0x08011b2c
 8001ff4:	08011b4c 	.word	0x08011b4c
 8001ff8:	08011bb4 	.word	0x08011bb4
 8001ffc:	200002d8 	.word	0x200002d8
 8002000:	08011bb8 	.word	0x08011bb8
 8002004:	08011bc0 	.word	0x08011bc0
              if (strcmp(dow, "Wed,") == 0) { sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY; } else  
 8002008:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800200c:	49b2      	ldr	r1, [pc, #712]	; (80022d8 <setRTCTimeDateFromNetwork+0x694>)
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe f8de 	bl	80001d0 <strcmp>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d106      	bne.n	8002028 <setRTCTimeDateFromNetwork+0x3e4>
 800201a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800201e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8002022:	2203      	movs	r2, #3
 8002024:	701a      	strb	r2, [r3, #0]
 8002026:	e043      	b.n	80020b0 <setRTCTimeDateFromNetwork+0x46c>
                if (strcmp(dow, "Thu,") == 0) { sDate.WeekDay = RTC_WEEKDAY_THURSDAY; } else  
 8002028:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800202c:	49ab      	ldr	r1, [pc, #684]	; (80022dc <setRTCTimeDateFromNetwork+0x698>)
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe f8ce 	bl	80001d0 <strcmp>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <setRTCTimeDateFromNetwork+0x404>
 800203a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800203e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8002042:	2204      	movs	r2, #4
 8002044:	701a      	strb	r2, [r3, #0]
 8002046:	e033      	b.n	80020b0 <setRTCTimeDateFromNetwork+0x46c>
                  if (strcmp(dow, "Fri,") == 0) { sDate.WeekDay = RTC_WEEKDAY_FRIDAY; } else
 8002048:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800204c:	49a4      	ldr	r1, [pc, #656]	; (80022e0 <setRTCTimeDateFromNetwork+0x69c>)
 800204e:	4618      	mov	r0, r3
 8002050:	f7fe f8be 	bl	80001d0 <strcmp>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d106      	bne.n	8002068 <setRTCTimeDateFromNetwork+0x424>
 800205a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800205e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8002062:	2205      	movs	r2, #5
 8002064:	701a      	strb	r2, [r3, #0]
 8002066:	e023      	b.n	80020b0 <setRTCTimeDateFromNetwork+0x46c>
                    if (strcmp(dow, "Sat,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SATURDAY; } else
 8002068:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800206c:	499d      	ldr	r1, [pc, #628]	; (80022e4 <setRTCTimeDateFromNetwork+0x6a0>)
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f8ae 	bl	80001d0 <strcmp>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d106      	bne.n	8002088 <setRTCTimeDateFromNetwork+0x444>
 800207a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800207e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8002082:	2206      	movs	r2, #6
 8002084:	701a      	strb	r2, [r3, #0]
 8002086:	e013      	b.n	80020b0 <setRTCTimeDateFromNetwork+0x46c>
                      if (strcmp(dow, "Sun,") == 0) { sDate.WeekDay = RTC_WEEKDAY_SUNDAY; } else ret = -1;
 8002088:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800208c:	4996      	ldr	r1, [pc, #600]	; (80022e8 <setRTCTimeDateFromNetwork+0x6a4>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe f89e 	bl	80001d0 <strcmp>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d106      	bne.n	80020a8 <setRTCTimeDateFromNetwork+0x464>
 800209a:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800209e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80020a2:	2207      	movs	r2, #7
 80020a4:	701a      	strb	r2, [r3, #0]
 80020a6:	e003      	b.n	80020b0 <setRTCTimeDateFromNetwork+0x46c>
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
 80020ac:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450

          if (strcmp(month, "Jan") == 0) { sDate.Month = RTC_MONTH_JANUARY; } else
 80020b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020b4:	498d      	ldr	r1, [pc, #564]	; (80022ec <setRTCTimeDateFromNetwork+0x6a8>)
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe f88a 	bl	80001d0 <strcmp>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d106      	bne.n	80020d0 <setRTCTimeDateFromNetwork+0x48c>
 80020c2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80020c6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80020ca:	2201      	movs	r2, #1
 80020cc:	705a      	strb	r2, [r3, #1]
 80020ce:	e0b3      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
            if (strcmp(month, "Feb") == 0) { sDate.Month = RTC_MONTH_FEBRUARY; } else
 80020d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d4:	4986      	ldr	r1, [pc, #536]	; (80022f0 <setRTCTimeDateFromNetwork+0x6ac>)
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe f87a 	bl	80001d0 <strcmp>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d106      	bne.n	80020f0 <setRTCTimeDateFromNetwork+0x4ac>
 80020e2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80020e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80020ea:	2202      	movs	r2, #2
 80020ec:	705a      	strb	r2, [r3, #1]
 80020ee:	e0a3      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
              if (strcmp(month, "Mar") == 0) { sDate.Month = RTC_MONTH_MARCH; } else
 80020f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020f4:	497f      	ldr	r1, [pc, #508]	; (80022f4 <setRTCTimeDateFromNetwork+0x6b0>)
 80020f6:	4618      	mov	r0, r3
 80020f8:	f7fe f86a 	bl	80001d0 <strcmp>
 80020fc:	4603      	mov	r3, r0
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d106      	bne.n	8002110 <setRTCTimeDateFromNetwork+0x4cc>
 8002102:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002106:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800210a:	2203      	movs	r2, #3
 800210c:	705a      	strb	r2, [r3, #1]
 800210e:	e093      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                if (strcmp(month, "Apr") == 0) { sDate.Month = RTC_MONTH_APRIL; } else
 8002110:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002114:	4978      	ldr	r1, [pc, #480]	; (80022f8 <setRTCTimeDateFromNetwork+0x6b4>)
 8002116:	4618      	mov	r0, r3
 8002118:	f7fe f85a 	bl	80001d0 <strcmp>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <setRTCTimeDateFromNetwork+0x4ec>
 8002122:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002126:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800212a:	2204      	movs	r2, #4
 800212c:	705a      	strb	r2, [r3, #1]
 800212e:	e083      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                  if (strcmp(month, "May") == 0) { sDate.Month = RTC_MONTH_MAY; } else
 8002130:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002134:	4971      	ldr	r1, [pc, #452]	; (80022fc <setRTCTimeDateFromNetwork+0x6b8>)
 8002136:	4618      	mov	r0, r3
 8002138:	f7fe f84a 	bl	80001d0 <strcmp>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d106      	bne.n	8002150 <setRTCTimeDateFromNetwork+0x50c>
 8002142:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002146:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800214a:	2205      	movs	r2, #5
 800214c:	705a      	strb	r2, [r3, #1]
 800214e:	e073      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                    if (strcmp(month, "Jun") == 0) { sDate.Month = RTC_MONTH_JUNE; } else
 8002150:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002154:	496a      	ldr	r1, [pc, #424]	; (8002300 <setRTCTimeDateFromNetwork+0x6bc>)
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f83a 	bl	80001d0 <strcmp>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d106      	bne.n	8002170 <setRTCTimeDateFromNetwork+0x52c>
 8002162:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002166:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800216a:	2206      	movs	r2, #6
 800216c:	705a      	strb	r2, [r3, #1]
 800216e:	e063      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                      if (strcmp(month, "Jul") == 0) { sDate.Month = RTC_MONTH_JULY; } else
 8002170:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002174:	4963      	ldr	r1, [pc, #396]	; (8002304 <setRTCTimeDateFromNetwork+0x6c0>)
 8002176:	4618      	mov	r0, r3
 8002178:	f7fe f82a 	bl	80001d0 <strcmp>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <setRTCTimeDateFromNetwork+0x54c>
 8002182:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002186:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800218a:	2207      	movs	r2, #7
 800218c:	705a      	strb	r2, [r3, #1]
 800218e:	e053      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                        if (strcmp(month, "Aug") == 0) { sDate.Month = RTC_MONTH_AUGUST; } else
 8002190:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002194:	495c      	ldr	r1, [pc, #368]	; (8002308 <setRTCTimeDateFromNetwork+0x6c4>)
 8002196:	4618      	mov	r0, r3
 8002198:	f7fe f81a 	bl	80001d0 <strcmp>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <setRTCTimeDateFromNetwork+0x56c>
 80021a2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80021a6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80021aa:	2208      	movs	r2, #8
 80021ac:	705a      	strb	r2, [r3, #1]
 80021ae:	e043      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                          if (strcmp(month, "Sep") == 0) { sDate.Month = RTC_MONTH_SEPTEMBER; } else
 80021b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021b4:	4955      	ldr	r1, [pc, #340]	; (800230c <setRTCTimeDateFromNetwork+0x6c8>)
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe f80a 	bl	80001d0 <strcmp>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d106      	bne.n	80021d0 <setRTCTimeDateFromNetwork+0x58c>
 80021c2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80021c6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80021ca:	2209      	movs	r2, #9
 80021cc:	705a      	strb	r2, [r3, #1]
 80021ce:	e033      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                            if (strcmp(month, "Oct") == 0) { sDate.Month = RTC_MONTH_OCTOBER; } else
 80021d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021d4:	494e      	ldr	r1, [pc, #312]	; (8002310 <setRTCTimeDateFromNetwork+0x6cc>)
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7fd fffa 	bl	80001d0 <strcmp>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d106      	bne.n	80021f0 <setRTCTimeDateFromNetwork+0x5ac>
 80021e2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80021e6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 80021ea:	2210      	movs	r2, #16
 80021ec:	705a      	strb	r2, [r3, #1]
 80021ee:	e023      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                              if (strcmp(month, "Nov") == 0) { sDate.Month = RTC_MONTH_NOVEMBER; } else
 80021f0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021f4:	4947      	ldr	r1, [pc, #284]	; (8002314 <setRTCTimeDateFromNetwork+0x6d0>)
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7fd ffea 	bl	80001d0 <strcmp>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d106      	bne.n	8002210 <setRTCTimeDateFromNetwork+0x5cc>
 8002202:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002206:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800220a:	2211      	movs	r2, #17
 800220c:	705a      	strb	r2, [r3, #1]
 800220e:	e013      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
                                if (strcmp(month, "Dec") == 0) { sDate.Month = RTC_MONTH_DECEMBER; } else ret = -1;
 8002210:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002214:	4940      	ldr	r1, [pc, #256]	; (8002318 <setRTCTimeDateFromNetwork+0x6d4>)
 8002216:	4618      	mov	r0, r3
 8002218:	f7fd ffda 	bl	80001d0 <strcmp>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d106      	bne.n	8002230 <setRTCTimeDateFromNetwork+0x5ec>
 8002222:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002226:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800222a:	2212      	movs	r2, #18
 800222c:	705a      	strb	r2, [r3, #1]
 800222e:	e003      	b.n	8002238 <setRTCTimeDateFromNetwork+0x5f4>
 8002230:	f04f 33ff 	mov.w	r3, #4294967295
 8002234:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450

          sDate.Date = day;
 8002238:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800223c:	f2a3 4324 	subw	r3, r3, #1060	; 0x424
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	b2da      	uxtb	r2, r3
 8002244:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002248:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800224c:	709a      	strb	r2, [r3, #2]
          sDate.Year = year - 2000;
 800224e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002252:	f5a3 6385 	sub.w	r3, r3, #1064	; 0x428
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b2db      	uxtb	r3, r3
 800225a:	3330      	adds	r3, #48	; 0x30
 800225c:	b2da      	uxtb	r2, r3
 800225e:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8002262:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 8002266:	70da      	strb	r2, [r3, #3]
          if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8002268:	f107 030c 	add.w	r3, r7, #12
 800226c:	2200      	movs	r2, #0
 800226e:	4619      	mov	r1, r3
 8002270:	482a      	ldr	r0, [pc, #168]	; (800231c <setRTCTimeDateFromNetwork+0x6d8>)
 8002272:	f006 f974 	bl	800855e <HAL_RTC_SetDate>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <setRTCTimeDateFromNetwork+0x640>
          {
            rc = TD_ERR_RTC;
 800227c:	f06f 0302 	mvn.w	r3, #2
 8002280:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
          }
        }
      }
    }
    
    ret = net_sock_close(socket);  
 8002284:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f803 	bl	8001294 <net_sock_close>
 800228e:	f8c7 0450 	str.w	r0, [r7, #1104]	; 0x450
  }
  
  if (socket != NULL)
 8002292:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 8002296:	2b00      	cmp	r3, #0
 8002298:	d00a      	beq.n	80022b0 <setRTCTimeDateFromNetwork+0x66c>
  {
    ret |= net_sock_destroy(socket);
 800229a:	f8d7 3438 	ldr.w	r3, [r7, #1080]	; 0x438
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f80e 	bl	80012c0 <net_sock_destroy>
 80022a4:	4602      	mov	r2, r0
 80022a6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80022aa:	4313      	orrs	r3, r2
 80022ac:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
  }
  /* Translate a socket closure error in network error. */
  if ((rc == TD_OK) && (ret != NET_OK))
 80022b0:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <setRTCTimeDateFromNetwork+0x684>
 80022b8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d003      	beq.n	80022c8 <setRTCTimeDateFromNetwork+0x684>
  {
    rc = TD_ERR_CONNECT;
 80022c0:	f04f 33ff 	mov.w	r3, #4294967295
 80022c4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
  }
  
  return rc;
 80022c8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	08011bc8 	.word	0x08011bc8
 80022dc:	08011bd0 	.word	0x08011bd0
 80022e0:	08011bd8 	.word	0x08011bd8
 80022e4:	08011be0 	.word	0x08011be0
 80022e8:	08011be8 	.word	0x08011be8
 80022ec:	08011bf0 	.word	0x08011bf0
 80022f0:	08011bf4 	.word	0x08011bf4
 80022f4:	08011bf8 	.word	0x08011bf8
 80022f8:	08011bfc 	.word	0x08011bfc
 80022fc:	08011c00 	.word	0x08011c00
 8002300:	08011c04 	.word	0x08011c04
 8002304:	08011c08 	.word	0x08011c08
 8002308:	08011c0c 	.word	0x08011c0c
 800230c:	08011c10 	.word	0x08011c10
 8002310:	08011c14 	.word	0x08011c14
 8002314:	08011c18 	.word	0x08011c18
 8002318:	08011c1c 	.word	0x08011c1c
 800231c:	200002d8 	.word	0x200002d8

08002320 <wifi_net_if_init>:
int net_if_reinit(void * if_ctxt);
int wifi_net_if_init(void * if_ctxt);

/* Functions Definition ------------------------------------------------------*/
int wifi_net_if_init(void * if_ctxt)
{
 8002320:	b5b0      	push	{r4, r5, r7, lr}
 8002322:	b092      	sub	sp, #72	; 0x48
 8002324:	af04      	add	r7, sp, #16
 8002326:	6078      	str	r0, [r7, #4]
	//const char *ssid = "eir98388741-2.4G";
	//const char  *psk = "zyp3jmqd";
	WIFI_Ecn_t security_mode = 3;
 8002328:	2303      	movs	r3, #3
 800232a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	char moduleinfo[WIFI_PRODUCT_INFO_SIZE];
	WIFI_Status_t wifiRes;
	uint8_t macAddress[6];
	int wifiConnectCounter = 0;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	; 0x34
	bool skip_reconf = false;
 8002332:	2300      	movs	r3, #0
 8002334:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	printf("\r\n*** WIFI connection ***\r\n\n");
 8002338:	4849      	ldr	r0, [pc, #292]	; (8002460 <wifi_net_if_init+0x140>)
 800233a:	f00c fa91 	bl	800e860 <puts>
	  updateWiFiCredentials();
	} while (checkWiFiCredentials(&ssid, &psk, (uint8_t *) &security_mode) != HAL_OK);
	}*/

	/*  Wifi Module initialization */
	printf("Initializing the WiFi module\r\n");
 800233e:	4849      	ldr	r0, [pc, #292]	; (8002464 <wifi_net_if_init+0x144>)
 8002340:	f00c fa8e 	bl	800e860 <puts>

	wifiRes = WIFI_Init();
 8002344:	f00b fa54 	bl	800d7f0 <WIFI_Init>
 8002348:	4603      	mov	r3, r0
 800234a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	if ( WIFI_STATUS_OK != wifiRes )
 800234e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002352:	2b00      	cmp	r3, #0
 8002354:	d005      	beq.n	8002362 <wifi_net_if_init+0x42>
	{
	printf("\n\rFailed to initialize WIFI module\r\n");
 8002356:	4844      	ldr	r0, [pc, #272]	; (8002468 <wifi_net_if_init+0x148>)
 8002358:	f00c fa82 	bl	800e860 <puts>
	return -1;
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
 8002360:	e079      	b.n	8002456 <wifi_net_if_init+0x136>
	}

	/* Retrieve the WiFi module mac address to confirm that it is detected and communicating. */
	WIFI_GetModuleName(moduleinfo);
 8002362:	f107 0310 	add.w	r3, r7, #16
 8002366:	4618      	mov	r0, r3
 8002368:	f00b fbe8 	bl	800db3c <WIFI_GetModuleName>
	printf("Module initialized successfully: %s",moduleinfo);
 800236c:	f107 0310 	add.w	r3, r7, #16
 8002370:	4619      	mov	r1, r3
 8002372:	483e      	ldr	r0, [pc, #248]	; (800246c <wifi_net_if_init+0x14c>)
 8002374:	f00c f9d8 	bl	800e728 <iprintf>

	WIFI_GetModuleID(moduleinfo);
 8002378:	f107 0310 	add.w	r3, r7, #16
 800237c:	4618      	mov	r0, r3
 800237e:	f00b fbc9 	bl	800db14 <WIFI_GetModuleID>
	printf(" %s",moduleinfo);
 8002382:	f107 0310 	add.w	r3, r7, #16
 8002386:	4619      	mov	r1, r3
 8002388:	4839      	ldr	r0, [pc, #228]	; (8002470 <wifi_net_if_init+0x150>)
 800238a:	f00c f9cd 	bl	800e728 <iprintf>

	WIFI_GetModuleFwRevision(moduleinfo);
 800238e:	f107 0310 	add.w	r3, r7, #16
 8002392:	4618      	mov	r0, r3
 8002394:	f00b fbaa 	bl	800daec <WIFI_GetModuleFwRevision>
	printf(" %s\r\n",moduleinfo);
 8002398:	f107 0310 	add.w	r3, r7, #16
 800239c:	4619      	mov	r1, r3
 800239e:	4835      	ldr	r0, [pc, #212]	; (8002474 <wifi_net_if_init+0x154>)
 80023a0:	f00c f9c2 	bl	800e728 <iprintf>

	printf("Retrieving the WiFi module MAC address:");
 80023a4:	4834      	ldr	r0, [pc, #208]	; (8002478 <wifi_net_if_init+0x158>)
 80023a6:	f00c f9bf 	bl	800e728 <iprintf>
	wifiRes = WIFI_GetMAC_Address( (uint8_t*)macAddress);
 80023aa:	f107 0308 	add.w	r3, r7, #8
 80023ae:	4618      	mov	r0, r3
 80023b0:	f00b fa6c 	bl	800d88c <WIFI_GetMAC_Address>
 80023b4:	4603      	mov	r3, r0
 80023b6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	if ( WIFI_STATUS_OK == wifiRes)
 80023ba:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d112      	bne.n	80023e8 <wifi_net_if_init+0xc8>
	{
	printf(" %02x:%02x:%02x:%02x:%02x:%02x\n\r",
		 macAddress[0], macAddress[1], macAddress[2],
 80023c2:	7a3b      	ldrb	r3, [r7, #8]
	printf(" %02x:%02x:%02x:%02x:%02x:%02x\n\r",
 80023c4:	4618      	mov	r0, r3
		 macAddress[0], macAddress[1], macAddress[2],
 80023c6:	7a7b      	ldrb	r3, [r7, #9]
	printf(" %02x:%02x:%02x:%02x:%02x:%02x\n\r",
 80023c8:	461c      	mov	r4, r3
		 macAddress[0], macAddress[1], macAddress[2],
 80023ca:	7abb      	ldrb	r3, [r7, #10]
	printf(" %02x:%02x:%02x:%02x:%02x:%02x\n\r",
 80023cc:	461d      	mov	r5, r3
		 macAddress[3], macAddress[4], macAddress[5]);
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	7b3a      	ldrb	r2, [r7, #12]
 80023d2:	7b79      	ldrb	r1, [r7, #13]
	printf(" %02x:%02x:%02x:%02x:%02x:%02x\n\r",
 80023d4:	9102      	str	r1, [sp, #8]
 80023d6:	9201      	str	r2, [sp, #4]
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	462b      	mov	r3, r5
 80023dc:	4622      	mov	r2, r4
 80023de:	4601      	mov	r1, r0
 80023e0:	4826      	ldr	r0, [pc, #152]	; (800247c <wifi_net_if_init+0x15c>)
 80023e2:	f00c f9a1 	bl	800e728 <iprintf>
 80023e6:	e002      	b.n	80023ee <wifi_net_if_init+0xce>
	}
	else
	{
	   printf("Failed to get MAC address\r\n");
 80023e8:	4825      	ldr	r0, [pc, #148]	; (8002480 <wifi_net_if_init+0x160>)
 80023ea:	f00c fa39 	bl	800e860 <puts>
	}
	/* Connect to the specified SSID. */

	printf("\n");
 80023ee:	200a      	movs	r0, #10
 80023f0:	f00c f9b2 	bl	800e758 <putchar>
	do
	{
	printf("\rConnecting to AP: %s  Attempt %d/%d ...",SSID, ++wifiConnectCounter,WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	3301      	adds	r3, #1
 80023f8:	637b      	str	r3, [r7, #52]	; 0x34
 80023fa:	2303      	movs	r3, #3
 80023fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80023fe:	4921      	ldr	r1, [pc, #132]	; (8002484 <wifi_net_if_init+0x164>)
 8002400:	4821      	ldr	r0, [pc, #132]	; (8002488 <wifi_net_if_init+0x168>)
 8002402:	f00c f991 	bl	800e728 <iprintf>
	wifiRes = WIFI_Connect(SSID, PASSWORD, security_mode);
 8002406:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800240a:	461a      	mov	r2, r3
 800240c:	491f      	ldr	r1, [pc, #124]	; (800248c <wifi_net_if_init+0x16c>)
 800240e:	481d      	ldr	r0, [pc, #116]	; (8002484 <wifi_net_if_init+0x164>)
 8002410:	f00b fa1a 	bl	800d848 <WIFI_Connect>
 8002414:	4603      	mov	r3, r0
 8002416:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	if (wifiRes == WIFI_STATUS_OK) break;
 800241a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800241e:	2b00      	cmp	r3, #0
 8002420:	d003      	beq.n	800242a <wifi_net_if_init+0x10a>
	}
	while (wifiConnectCounter < WIFI_CONNECT_MAX_ATTEMPT_COUNT);
 8002422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002424:	2b02      	cmp	r3, #2
 8002426:	dde5      	ble.n	80023f4 <wifi_net_if_init+0xd4>
 8002428:	e000      	b.n	800242c <wifi_net_if_init+0x10c>
	if (wifiRes == WIFI_STATUS_OK) break;
 800242a:	bf00      	nop

	if (wifiRes == WIFI_STATUS_OK)
 800242c:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8002430:	2b00      	cmp	r3, #0
 8002432:	d104      	bne.n	800243e <wifi_net_if_init+0x11e>
	{
	printf("\nConnected to AP %s\r\n",SSID);
 8002434:	4913      	ldr	r1, [pc, #76]	; (8002484 <wifi_net_if_init+0x164>)
 8002436:	4816      	ldr	r0, [pc, #88]	; (8002490 <wifi_net_if_init+0x170>)
 8002438:	f00c f976 	bl	800e728 <iprintf>
 800243c:	e003      	b.n	8002446 <wifi_net_if_init+0x126>
	}
	else
	{
	printf("\nFailed to connect to AP %s\r\n",SSID);
 800243e:	4911      	ldr	r1, [pc, #68]	; (8002484 <wifi_net_if_init+0x164>)
 8002440:	4814      	ldr	r0, [pc, #80]	; (8002494 <wifi_net_if_init+0x174>)
 8002442:	f00c f971 	bl	800e728 <iprintf>
	}

	return (wifiRes == WIFI_STATUS_OK)?0:-1;
 8002446:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <wifi_net_if_init+0x132>
 800244e:	2300      	movs	r3, #0
 8002450:	e001      	b.n	8002456 <wifi_net_if_init+0x136>
 8002452:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002456:	4618      	mov	r0, r3
 8002458:	3738      	adds	r7, #56	; 0x38
 800245a:	46bd      	mov	sp, r7
 800245c:	bdb0      	pop	{r4, r5, r7, pc}
 800245e:	bf00      	nop
 8002460:	08011c20 	.word	0x08011c20
 8002464:	08011c3c 	.word	0x08011c3c
 8002468:	08011c5c 	.word	0x08011c5c
 800246c:	08011c80 	.word	0x08011c80
 8002470:	08011ca4 	.word	0x08011ca4
 8002474:	08011ca8 	.word	0x08011ca8
 8002478:	08011cb0 	.word	0x08011cb0
 800247c:	08011cd8 	.word	0x08011cd8
 8002480:	08011cfc 	.word	0x08011cfc
 8002484:	08011d18 	.word	0x08011d18
 8002488:	08011d20 	.word	0x08011d20
 800248c:	08011d4c 	.word	0x08011d4c
 8002490:	08011d58 	.word	0x08011d58
 8002494:	08011d70 	.word	0x08011d70

08002498 <_write>:
//void HAL_GPIO_WritePin();
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	60f8      	str	r0, [r7, #12]
 80024a0:	60b9      	str	r1, [r7, #8]
 80024a2:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	f04f 33ff 	mov.w	r3, #4294967295
 80024ac:	68b9      	ldr	r1, [r7, #8]
 80024ae:	4804      	ldr	r0, [pc, #16]	; (80024c0 <_write+0x28>)
 80024b0:	f008 f91c 	bl	800a6ec <HAL_UART_Transmit>
	return len;
 80024b4:	687b      	ldr	r3, [r7, #4]
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3710      	adds	r7, #16
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}
 80024be:	bf00      	nop
 80024c0:	200003ac 	.word	0x200003ac

080024c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  ------------------------------------------------------------------------------*/
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	4603      	mov	r3, r0
 80024cc:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d102      	bne.n	80024da <HAL_GPIO_EXTI_Callback+0x16>
  {
	case (GPIO_PIN_1):
	{
		SPI_WIFI_ISR();
 80024d4:	f00b f97c 	bl	800d7d0 <SPI_WIFI_ISR>
		break;
 80024d8:	e000      	b.n	80024dc <HAL_GPIO_EXTI_Callback+0x18>
	}

    default:
    {
      break;
 80024da:	bf00      	nop
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_RTCEx_WakeUpTimerEventCallback>:

/*------------------------------------------------------------------
 * RTC timer event callback function
 * Runs every second
 ------------------------------------------------------------------*/
void HAL_RTCEx_WakeUpTimerEventCallback (RTC_HandleTypeDef * hrtc) {
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
	timeDisplay = 1;
 80024ec:	4b04      	ldr	r3, [pc, #16]	; (8002500 <HAL_RTCEx_WakeUpTimerEventCallback+0x1c>)
 80024ee:	2201      	movs	r2, #1
 80024f0:	701a      	strb	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	200009c0 	.word	0x200009c0

08002504 <HAL_TIM_PeriodElapsedCallback>:

/*--------------------------------------------------------------
 * Timer 6 overflow callback function
 --------------------------------------------------------------*/
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef * htim) {
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6) {
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a05      	ldr	r2, [pc, #20]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d102      	bne.n	800251c <HAL_TIM_PeriodElapsedCallback+0x18>
		readSensor = 1;
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002518:	2201      	movs	r2, #1
 800251a:	701a      	strb	r2, [r3, #0]
	}
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	40001000 	.word	0x40001000
 800252c:	200009c1 	.word	0x200009c1

08002530 <subscribeMessageHandler>:
/*--------------------------------------------------------------------------
 * Subscribe message callback function
 * Called every time a publish meassage is received from a subscribed topic
 --------------------------------------------------------------------------*/
void subscribeMessageHandler(MessageData* data)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	static char mqtt_msg[MQTT_MSG_BUFFER_SIZE], mqtt_topic[MQTT_TOPIC_BUFFER_SIZE];
	snprintf(mqtt_msg, data->message->payloadlen+1, "%s", (char *)data->message->payload);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	1c59      	adds	r1, r3, #1
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	4a1b      	ldr	r2, [pc, #108]	; (80025b4 <subscribeMessageHandler+0x84>)
 8002548:	481b      	ldr	r0, [pc, #108]	; (80025b8 <subscribeMessageHandler+0x88>)
 800254a:	f00c f9a1 	bl	800e890 <sniprintf>
	snprintf(mqtt_topic, data->topicName->lenstring.len+1, "%s", data->topicName->lenstring.data);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	3301      	adds	r3, #1
 8002556:	4619      	mov	r1, r3
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <subscribeMessageHandler+0x84>)
 8002560:	4816      	ldr	r0, [pc, #88]	; (80025bc <subscribeMessageHandler+0x8c>)
 8002562:	f00c f995 	bl	800e890 <sniprintf>
	printf("\r\nPublished message from MQTT broker\r\n");
 8002566:	4816      	ldr	r0, [pc, #88]	; (80025c0 <subscribeMessageHandler+0x90>)
 8002568:	f00c f97a 	bl	800e860 <puts>
	printf("Topic: %s, Payload: %s\r\n\n", mqtt_topic, mqtt_msg);
 800256c:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <subscribeMessageHandler+0x88>)
 800256e:	4913      	ldr	r1, [pc, #76]	; (80025bc <subscribeMessageHandler+0x8c>)
 8002570:	4814      	ldr	r0, [pc, #80]	; (80025c4 <subscribeMessageHandler+0x94>)
 8002572:	f00c f8d9 	bl	800e728 <iprintf>
	if(strstr(mqtt_msg, "ON")) {
 8002576:	4914      	ldr	r1, [pc, #80]	; (80025c8 <subscribeMessageHandler+0x98>)
 8002578:	480f      	ldr	r0, [pc, #60]	; (80025b8 <subscribeMessageHandler+0x88>)
 800257a:	f00c fa75 	bl	800ea68 <strstr>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d006      	beq.n	8002592 <subscribeMessageHandler+0x62>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8002584:	2201      	movs	r2, #1
 8002586:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800258a:	4810      	ldr	r0, [pc, #64]	; (80025cc <subscribeMessageHandler+0x9c>)
 800258c:	f003 fc9e 	bl	8005ecc <HAL_GPIO_WritePin>
	}
	else if(strstr(mqtt_msg, "OFF")){
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
	}
}
 8002590:	e00c      	b.n	80025ac <subscribeMessageHandler+0x7c>
	else if(strstr(mqtt_msg, "OFF")){
 8002592:	490f      	ldr	r1, [pc, #60]	; (80025d0 <subscribeMessageHandler+0xa0>)
 8002594:	4808      	ldr	r0, [pc, #32]	; (80025b8 <subscribeMessageHandler+0x88>)
 8002596:	f00c fa67 	bl	800ea68 <strstr>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d005      	beq.n	80025ac <subscribeMessageHandler+0x7c>
		HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80025a0:	2200      	movs	r2, #0
 80025a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025a6:	4809      	ldr	r0, [pc, #36]	; (80025cc <subscribeMessageHandler+0x9c>)
 80025a8:	f003 fc90 	bl	8005ecc <HAL_GPIO_WritePin>
}
 80025ac:	bf00      	nop
 80025ae:	3708      	adds	r7, #8
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	08011f54 	.word	0x08011f54
 80025b8:	200009c8 	.word	0x200009c8
 80025bc:	20000c20 	.word	0x20000c20
 80025c0:	08011f58 	.word	0x08011f58
 80025c4:	08011f80 	.word	0x08011f80
 80025c8:	08011f9c 	.word	0x08011f9c
 80025cc:	48000400 	.word	0x48000400
 80025d0:	08011fa0 	.word	0x08011fa0

080025d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025d4:	b5b0      	push	{r4, r5, r7, lr}
 80025d6:	b0e0      	sub	sp, #384	; 0x180
 80025d8:	af04      	add	r7, sp, #16
	//Network and MQTT variables
	device_config_t MQTT_Config;
	MQTTMessage mqmsg;
	MQTTClient client;
	Network network;
	MQTTPacket_connectData options = MQTTPacket_connectData_initializer;
 80025da:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80025de:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80025e2:	4ac0      	ldr	r2, [pc, #768]	; (80028e4 <main+0x310>)
 80025e4:	4618      	mov	r0, r3
 80025e6:	4611      	mov	r1, r2
 80025e8:	2358      	movs	r3, #88	; 0x58
 80025ea:	461a      	mov	r2, r3
 80025ec:	f00b fb0c 	bl	800dc08 <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f0:	f002 febe 	bl	8005370 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025f4:	f000 fac2 	bl	8002b7c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80025f8:	f000 fb24 	bl	8002c44 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025fc:	f000 fd2e 	bl	800305c <MX_GPIO_Init>
  MX_QUADSPI_Init();
 8002600:	f000 fbc6 	bl	8002d90 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 8002604:	f000 fc26 	bl	8002e54 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8002608:	f000 fc9a 	bl	8002f40 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800260c:	f000 fcc8 	bl	8002fa0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002610:	f000 fcf6 	bl	8003000 <MX_USB_OTG_FS_PCD_Init>
  MX_RTC_Init();
 8002614:	f000 fbf6 	bl	8002e04 <MX_RTC_Init>
  MX_TIM6_Init();
 8002618:	f000 fc5a 	bl	8002ed0 <MX_TIM6_Init>
  MX_RNG_Init();
 800261c:	f000 fbde 	bl	8002ddc <MX_RNG_Init>
  MX_I2C3_Init();
 8002620:	f000 fb76 	bl	8002d10 <MX_I2C3_Init>
  MX_DFSDM1_Init();
 8002624:	f000 fb3c 	bl	8002ca0 <MX_DFSDM1_Init>
  /* USER CODE BEGIN 2 */
  printf("HydroSystem connecting to Ubidots STEM...\r\n\n");
 8002628:	48af      	ldr	r0, [pc, #700]	; (80028e8 <main+0x314>)
 800262a:	f00c f919 	bl	800e860 <puts>

  //LED off at initialisation
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 800262e:	2200      	movs	r2, #0
 8002630:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002634:	48ad      	ldr	r0, [pc, #692]	; (80028ec <main+0x318>)
 8002636:	f003 fc49 	bl	8005ecc <HAL_GPIO_WritePin>

  //Initialise MQTT broker structure
  //Fill in this section with MQTT broker credentials from header file
  MQTT_Config.HostName = CloudBroker_HostName;
 800263a:	4bad      	ldr	r3, [pc, #692]	; (80028f0 <main+0x31c>)
 800263c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  MQTT_Config.HostPort = CloudBroker_Port;
 8002640:	4bac      	ldr	r3, [pc, #688]	; (80028f4 <main+0x320>)
 8002642:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  MQTT_Config.ConnSecurity = "0";	//plain TCP connection with no security
 8002646:	4bac      	ldr	r3, [pc, #688]	; (80028f8 <main+0x324>)
 8002648:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  MQTT_Config.MQUserName = CloudBroker_Username;
 800264c:	4bab      	ldr	r3, [pc, #684]	; (80028fc <main+0x328>)
 800264e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  MQTT_Config.MQUserPwd = CloudBroker_Password;
 8002652:	4bab      	ldr	r3, [pc, #684]	; (8002900 <main+0x32c>)
 8002654:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  MQTT_Config.MQClientId = CloudBroker_ClientID;
 8002658:	4baa      	ldr	r3, [pc, #680]	; (8002904 <main+0x330>)
 800265a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

  //Initialise WiFi network
  if (net_init(&hnet, NET_IF, (wifi_net_if_init)) != NET_OK) {
 800265e:	4aaa      	ldr	r2, [pc, #680]	; (8002908 <main+0x334>)
 8002660:	2101      	movs	r1, #1
 8002662:	48aa      	ldr	r0, [pc, #680]	; (800290c <main+0x338>)
 8002664:	f7fe fc32 	bl	8000ecc <net_init>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <main+0xa2>
	  printf("\n\rError");
 800266e:	48a8      	ldr	r0, [pc, #672]	; (8002910 <main+0x33c>)
 8002670:	f00c f85a 	bl	800e728 <iprintf>
 8002674:	e002      	b.n	800267c <main+0xa8>
  }
  else {
	  printf("\n\rOK");
 8002676:	48a7      	ldr	r0, [pc, #668]	; (8002914 <main+0x340>)
 8002678:	f00c f856 	bl	800e728 <iprintf>
  }
  HAL_Delay(500);
 800267c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002680:	f002 feea 	bl	8005458 <HAL_Delay>

  printf("\n\rRetrieving the IP address.");
 8002684:	48a4      	ldr	r0, [pc, #656]	; (8002918 <main+0x344>)
 8002686:	f00c f84f 	bl	800e728 <iprintf>

  if (net_get_ip_address(hnet, &ipAddr) != NET_OK) {
 800268a:	4ba0      	ldr	r3, [pc, #640]	; (800290c <main+0x338>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f107 020c 	add.w	r2, r7, #12
 8002692:	4611      	mov	r1, r2
 8002694:	4618      	mov	r0, r3
 8002696:	f7fe fc7d 	bl	8000f94 <net_get_ip_address>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d003      	beq.n	80026a8 <main+0xd4>
	  printf("\n\rError 2");
 80026a0:	489e      	ldr	r0, [pc, #632]	; (800291c <main+0x348>)
 80026a2:	f00c f841 	bl	800e728 <iprintf>
 80026a6:	e026      	b.n	80026f6 <main+0x122>
  }
  else
  {
    switch(ipAddr.ipv) {
 80026a8:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80026ac:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11c      	bne.n	80026f0 <main+0x11c>
      case NET_IP_V4:
        printf("\n\rIP address: %d.%d.%d.%d\n\r", ipAddr.ip[12], ipAddr.ip[13], ipAddr.ip[14], ipAddr.ip[15]);
 80026b6:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80026ba:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026be:	7b5b      	ldrb	r3, [r3, #13]
 80026c0:	4619      	mov	r1, r3
 80026c2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80026c6:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026ca:	7b9b      	ldrb	r3, [r3, #14]
 80026cc:	461a      	mov	r2, r3
 80026ce:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80026d2:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026d6:	7bdb      	ldrb	r3, [r3, #15]
 80026d8:	4618      	mov	r0, r3
 80026da:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80026de:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80026e2:	7c1b      	ldrb	r3, [r3, #16]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4603      	mov	r3, r0
 80026e8:	488d      	ldr	r0, [pc, #564]	; (8002920 <main+0x34c>)
 80026ea:	f00c f81d 	bl	800e728 <iprintf>
        break;
 80026ee:	e002      	b.n	80026f6 <main+0x122>
      case NET_IP_V6:
      default:
    	  printf("\n\rError 3");
 80026f0:	488c      	ldr	r0, [pc, #560]	; (8002924 <main+0x350>)
 80026f2:	f00c f819 	bl	800e728 <iprintf>
    }
  }

  if (net_get_mac_address(hnet, &macAddr) == NET_OK) {
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <main+0x338>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	1d3a      	adds	r2, r7, #4
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fe fc94 	bl	800102c <net_get_mac_address>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d12b      	bne.n	8002762 <main+0x18e>
      printf("\n\rMac Address: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
               macAddr.mac[0], macAddr.mac[1], macAddr.mac[2], macAddr.mac[3], macAddr.mac[4], macAddr.mac[5]);
 800270a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800270e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002712:	781b      	ldrb	r3, [r3, #0]
      printf("\n\rMac Address: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002714:	4618      	mov	r0, r3
               macAddr.mac[0], macAddr.mac[1], macAddr.mac[2], macAddr.mac[3], macAddr.mac[4], macAddr.mac[5]);
 8002716:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800271a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800271e:	785b      	ldrb	r3, [r3, #1]
      printf("\n\rMac Address: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002720:	461c      	mov	r4, r3
               macAddr.mac[0], macAddr.mac[1], macAddr.mac[2], macAddr.mac[3], macAddr.mac[4], macAddr.mac[5]);
 8002722:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002726:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800272a:	789b      	ldrb	r3, [r3, #2]
      printf("\n\rMac Address: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 800272c:	461d      	mov	r5, r3
               macAddr.mac[0], macAddr.mac[1], macAddr.mac[2], macAddr.mac[3], macAddr.mac[4], macAddr.mac[5]);
 800272e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002732:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002736:	78db      	ldrb	r3, [r3, #3]
      printf("\n\rMac Address: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002738:	461a      	mov	r2, r3
               macAddr.mac[0], macAddr.mac[1], macAddr.mac[2], macAddr.mac[3], macAddr.mac[4], macAddr.mac[5]);
 800273a:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800273e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002742:	791b      	ldrb	r3, [r3, #4]
      printf("\n\rMac Address: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002744:	4619      	mov	r1, r3
               macAddr.mac[0], macAddr.mac[1], macAddr.mac[2], macAddr.mac[3], macAddr.mac[4], macAddr.mac[5]);
 8002746:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 800274a:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800274e:	795b      	ldrb	r3, [r3, #5]
      printf("\n\rMac Address: %02x:%02x:%02x:%02x:%02x:%02x\r\n",
 8002750:	9302      	str	r3, [sp, #8]
 8002752:	9101      	str	r1, [sp, #4]
 8002754:	9200      	str	r2, [sp, #0]
 8002756:	462b      	mov	r3, r5
 8002758:	4622      	mov	r2, r4
 800275a:	4601      	mov	r1, r0
 800275c:	4872      	ldr	r0, [pc, #456]	; (8002928 <main+0x354>)
 800275e:	f00b ffe3 	bl	800e728 <iprintf>
  }

  /*
   * Fetch the epoch time from st.com and use it to set the RTC time
   */
  if (setRTCTimeDateFromNetwork(true) != TD_OK) {
 8002762:	2001      	movs	r0, #1
 8002764:	f7ff fa6e 	bl	8001c44 <setRTCTimeDateFromNetwork>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <main+0x1a2>
	  printf("Fail setting time\r\n");
 800276e:	486f      	ldr	r0, [pc, #444]	; (800292c <main+0x358>)
 8002770:	f00c f876 	bl	800e860 <puts>
 8002774:	e008      	b.n	8002788 <main+0x1b4>
  }
  else {
	  printf("Time set, Starting RTC\r\n");
 8002776:	486e      	ldr	r0, [pc, #440]	; (8002930 <main+0x35c>)
 8002778:	f00c f872 	bl	800e860 <puts>
	  //RTC started with a 1-second wake-up interrupt
	  HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 2047, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800277c:	2200      	movs	r2, #0
 800277e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002782:	486c      	ldr	r0, [pc, #432]	; (8002934 <main+0x360>)
 8002784:	f006 f82a 	bl	80087dc <HAL_RTCEx_SetWakeUpTimer_IT>
  }

  printf("Connecting to MQTT Broker\r\n\n");
 8002788:	486b      	ldr	r0, [pc, #428]	; (8002938 <main+0x364>)
 800278a:	f00c f869 	bl	800e860 <puts>
  //Create network socket
  ret = net_sock_create(hnet, &socket, NET_PROTO_TCP);
 800278e:	4b5f      	ldr	r3, [pc, #380]	; (800290c <main+0x338>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f107 0120 	add.w	r1, r7, #32
 8002796:	2201      	movs	r2, #1
 8002798:	4618      	mov	r0, r3
 800279a:	f7fe fc87 	bl	80010ac <net_sock_create>
 800279e:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  if (ret != NET_OK)
 80027a2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <main+0x1de>
  {
    printf("\n\rCould not create the socket.\r\n");
 80027aa:	4864      	ldr	r0, [pc, #400]	; (800293c <main+0x368>)
 80027ac:	f00c f858 	bl	800e860 <puts>
 80027b0:	e00f      	b.n	80027d2 <main+0x1fe>
  }
  else
  {
	  ret |= net_sock_setopt(socket, "sock_noblocking", NULL, 0);
 80027b2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80027b6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	2300      	movs	r3, #0
 80027be:	2200      	movs	r2, #0
 80027c0:	495f      	ldr	r1, [pc, #380]	; (8002940 <main+0x36c>)
 80027c2:	f7fe fcbf 	bl	8001144 <net_sock_setopt>
 80027c6:	4602      	mov	r2, r0
 80027c8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80027cc:	4313      	orrs	r3, r2
 80027ce:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  }

  ret = net_sock_open(socket, MQTT_Config.HostName, 1883, 0);
 80027d2:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 80027d6:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80027e0:	2300      	movs	r3, #0
 80027e2:	f240 725b 	movw	r2, #1883	; 0x75b
 80027e6:	f7fe fc97 	bl	8001118 <net_sock_open>
 80027ea:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  if (ret != NET_OK)
 80027ee:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <main+0x232>
	{
	  printf("\n\rCould not open the socket.");
 80027f6:	4853      	ldr	r0, [pc, #332]	; (8002944 <main+0x370>)
 80027f8:	f00b ff96 	bl	800e728 <iprintf>
	  HAL_Delay(1000);
 80027fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002800:	f002 fe2a 	bl	8005458 <HAL_Delay>
 8002804:	e006      	b.n	8002814 <main+0x240>
	}
  else {
	  printf("\n\rConnected to server");
 8002806:	4850      	ldr	r0, [pc, #320]	; (8002948 <main+0x374>)
 8002808:	f00b ff8e 	bl	800e728 <iprintf>
	  HAL_Delay(1000);
 800280c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002810:	f002 fe22 	bl	8005458 <HAL_Delay>
  }

  network.my_socket = socket;
 8002814:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002818:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	67fb      	str	r3, [r7, #124]	; 0x7c
  network.mqttread = (network_rd);
 8002820:	4b4a      	ldr	r3, [pc, #296]	; (800294c <main+0x378>)
 8002822:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  network.mqttwrite = (network_wr);
 8002826:	4b4a      	ldr	r3, [pc, #296]	; (8002950 <main+0x37c>)
 8002828:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  MQTTClientInit(&client, &network, MQTT_CMD_TIMEOUT, mqtt_send_buffer, MQTT_SEND_BUFFER_SIZE,
 800282c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8002830:	f107 0088 	add.w	r0, r7, #136	; 0x88
 8002834:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002838:	9302      	str	r3, [sp, #8]
 800283a:	4b46      	ldr	r3, [pc, #280]	; (8002954 <main+0x380>)
 800283c:	9301      	str	r3, [sp, #4]
 800283e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	4b44      	ldr	r3, [pc, #272]	; (8002958 <main+0x384>)
 8002846:	f241 3288 	movw	r2, #5000	; 0x1388
 800284a:	f008 ff79 	bl	800b740 <MQTTClientInit>
	 mqtt_read_buffer, MQTT_READ_BUFFER_SIZE);

  /* MQTT connect */
  options.clientID.cstring = MQTT_Config.MQClientId;
 800284e:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8002852:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002856:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800285a:	60da      	str	r2, [r3, #12]
  options.username.cstring = MQTT_Config.MQUserName;
 800285c:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8002860:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002864:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002868:	641a      	str	r2, [r3, #64]	; 0x40
  options.password.cstring = MQTT_Config.MQUserPwd;
 800286a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800286e:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8002872:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002876:	64da      	str	r2, [r3, #76]	; 0x4c

  HAL_Delay(1000);
 8002878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800287c:	f002 fdec 	bl	8005458 <HAL_Delay>

  ret = MQTTConnect(&client, &options);
 8002880:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8002884:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f009 fb9c 	bl	800bfc8 <MQTTConnect>
 8002890:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  if (ret != 0)
 8002894:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <main+0x2d4>
  {
	printf("\n\rMQTTConnect() failed: %ld\n", ret);
 800289c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80028a0:	482e      	ldr	r0, [pc, #184]	; (800295c <main+0x388>)
 80028a2:	f00b ff41 	bl	800e728 <iprintf>
 80028a6:	e006      	b.n	80028b6 <main+0x2e2>
  }
  else
  {
	printf("\n\rConnected to MQTT Broker");
 80028a8:	482d      	ldr	r0, [pc, #180]	; (8002960 <main+0x38c>)
 80028aa:	f00b ff3d 	bl	800e728 <iprintf>
	HAL_Delay(1000);
 80028ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028b2:	f002 fdd1 	bl	8005458 <HAL_Delay>
  }
  HAL_Delay(1000);
 80028b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ba:	f002 fdcd 	bl	8005458 <HAL_Delay>

  //Add code here to subscribe to topics
  ret = MQTTSubscribe(&client, "/v1.6/devices/hydrosystem/motor", QOS0, (subscribeMessageHandler));
 80028be:	f107 0088 	add.w	r0, r7, #136	; 0x88
 80028c2:	4b28      	ldr	r3, [pc, #160]	; (8002964 <main+0x390>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	4928      	ldr	r1, [pc, #160]	; (8002968 <main+0x394>)
 80028c8:	f009 fc87 	bl	800c1da <MQTTSubscribe>
 80028cc:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  if (ret != MQSUCCESS) {
 80028d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d04b      	beq.n	8002970 <main+0x39c>
	printf("\n\rSubscribe failed: %ld\n\r", ret);
 80028d8:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80028dc:	4823      	ldr	r0, [pc, #140]	; (800296c <main+0x398>)
 80028de:	f00b ff23 	bl	800e728 <iprintf>
 80028e2:	e051      	b.n	8002988 <main+0x3b4>
 80028e4:	080122c4 	.word	0x080122c4
 80028e8:	08011fa4 	.word	0x08011fa4
 80028ec:	48000400 	.word	0x48000400
 80028f0:	08011fd0 	.word	0x08011fd0
 80028f4:	08011fec 	.word	0x08011fec
 80028f8:	08011ff4 	.word	0x08011ff4
 80028fc:	08011ff8 	.word	0x08011ff8
 8002900:	0801201c 	.word	0x0801201c
 8002904:	08012020 	.word	0x08012020
 8002908:	08002321 	.word	0x08002321
 800290c:	200009c4 	.word	0x200009c4
 8002910:	0801203c 	.word	0x0801203c
 8002914:	08012044 	.word	0x08012044
 8002918:	0801204c 	.word	0x0801204c
 800291c:	0801206c 	.word	0x0801206c
 8002920:	08012078 	.word	0x08012078
 8002924:	08012094 	.word	0x08012094
 8002928:	080120a0 	.word	0x080120a0
 800292c:	080120d0 	.word	0x080120d0
 8002930:	080120e4 	.word	0x080120e4
 8002934:	200002d8 	.word	0x200002d8
 8002938:	080120fc 	.word	0x080120fc
 800293c:	08012118 	.word	0x08012118
 8002940:	08012138 	.word	0x08012138
 8002944:	08012148 	.word	0x08012148
 8002948:	08012168 	.word	0x08012168
 800294c:	08003559 	.word	0x08003559
 8002950:	080035ad 	.word	0x080035ad
 8002954:	20000edc 	.word	0x20000edc
 8002958:	20000c84 	.word	0x20000c84
 800295c:	08012180 	.word	0x08012180
 8002960:	080121a0 	.word	0x080121a0
 8002964:	08002531 	.word	0x08002531
 8002968:	080121bc 	.word	0x080121bc
 800296c:	080121dc 	.word	0x080121dc
  }
  else {
	printf("\n\rSubscribed to topic \n\r");
 8002970:	4876      	ldr	r0, [pc, #472]	; (8002b4c <main+0x578>)
 8002972:	f00b fed9 	bl	800e728 <iprintf>
	ret = MQTTYield(&client, 500);
 8002976:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800297a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800297e:	4618      	mov	r0, r3
 8002980:	f009 fa40 	bl	800be04 <MQTTYield>
 8002984:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
  }
  HAL_Delay(1000);
 8002988:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800298c:	f002 fd64 	bl	8005458 <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim6);	//start timer 6. Used for periodic interrupt
 8002990:	486f      	ldr	r0, [pc, #444]	; (8002b50 <main+0x57c>)
 8002992:	f007 fb65 	bl	800a060 <HAL_TIM_Base_Start_IT>
    /* USER CODE BEGIN 3 */

	/*
	 * Need to yield to test for a received publish message from broker
	 */
	ret = MQTTYield(&client, 500);
 8002996:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800299a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800299e:	4618      	mov	r0, r3
 80029a0:	f009 fa30 	bl	800be04 <MQTTYield>
 80029a4:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c


	HAL_I2C_Master_Receive(&hi2c3, 0x9B, buffer, 2, 1000);
 80029a8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80029ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029b0:	9300      	str	r3, [sp, #0]
 80029b2:	2302      	movs	r3, #2
 80029b4:	219b      	movs	r1, #155	; 0x9b
 80029b6:	4867      	ldr	r0, [pc, #412]	; (8002b54 <main+0x580>)
 80029b8:	f003 fb48 	bl	800604c <HAL_I2C_Master_Receive>
	sample = (((uint16_t)(buffer[0]))<<8) + buffer[1];
 80029bc:	f897 3118 	ldrb.w	r3, [r7, #280]	; 0x118
 80029c0:	021b      	lsls	r3, r3, #8
 80029c2:	f897 2119 	ldrb.w	r2, [r7, #281]	; 0x119
 80029c6:	4413      	add	r3, r2
 80029c8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
	voltage_mv = 5000 * sample/4096;
 80029cc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80029d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	0b1b      	lsrs	r3, r3, #12
 80029da:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
	printf("Sample: 0x%04x %lu decimal, voltage %lumV\r\n", sample, sample, voltage_mv);
 80029de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80029e2:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 80029e6:	f8d7 1168 	ldr.w	r1, [r7, #360]	; 0x168
 80029ea:	485b      	ldr	r0, [pc, #364]	; (8002b58 <main+0x584>)
 80029ec:	f00b fe9c 	bl	800e728 <iprintf>
	turbidity_get_ntu(sample, &turbidity);
 80029f0:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80029f4:	4619      	mov	r1, r3
 80029f6:	f8d7 0168 	ldr.w	r0, [r7, #360]	; 0x168
 80029fa:	f000 fcfb 	bl	80033f4 <turbidity_get_ntu>
	printf("NTU Reading: %f\r\n\n", turbidity);
 80029fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a02:	4618      	mov	r0, r3
 8002a04:	f7fd fdb0 	bl	8000568 <__aeabi_f2d>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4853      	ldr	r0, [pc, #332]	; (8002b5c <main+0x588>)
 8002a0e:	f00b fe8b 	bl	800e728 <iprintf>


	sprintf(speedMsg, "{\"Turbidity\": {\"value\": %f}}", turbidity);
 8002a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fda6 	bl	8000568 <__aeabi_f2d>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8002a24:	494e      	ldr	r1, [pc, #312]	; (8002b60 <main+0x58c>)
 8002a26:	f00b ff67 	bl	800e8f8 <siprintf>
	printf("%s\n\r", speedMsg);
 8002a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a2e:	4619      	mov	r1, r3
 8002a30:	484c      	ldr	r0, [pc, #304]	; (8002b64 <main+0x590>)
 8002a32:	f00b fe79 	bl	800e728 <iprintf>
	memset(&mqmsg, 0, sizeof(MQTTMessage));
 8002a36:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f00b f90a 	bl	800dc58 <memset>
	mqmsg.qos = QOS0;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f887 30f0 	strb.w	r3, [r7, #240]	; 0xf0
	mqmsg.payload = (char *) speedMsg;
 8002a4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	mqmsg.payloadlen = strlen(speedMsg);
 8002a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fbc4 	bl	80001e4 <strlen>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	MQTTPublish(&client, "/v1.6/devices/hydrosystem", &mqmsg);
 8002a62:	f107 02f0 	add.w	r2, r7, #240	; 0xf0
 8002a66:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002a6a:	493f      	ldr	r1, [pc, #252]	; (8002b68 <main+0x594>)
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f009 fbca 	bl	800c206 <MQTTPublish>
	HAL_Delay(5000);
 8002a72:	f241 3088 	movw	r0, #5000	; 0x1388
 8002a76:	f002 fcef 	bl	8005458 <HAL_Delay>



	if(turbidity > 3050){
 8002a7a:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 8002a7e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002b6c <main+0x598>
 8002a82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a8a:	dd4e      	ble.n	8002b2a <main+0x556>
		printf("Feeding plants\r\n");
 8002a8c:	4838      	ldr	r0, [pc, #224]	; (8002b70 <main+0x59c>)
 8002a8e:	f00b fee7 	bl	800e860 <puts>
		printf("Motor opening feed hatch\r\n\n");
 8002a92:	4838      	ldr	r0, [pc, #224]	; (8002b74 <main+0x5a0>)
 8002a94:	f00b fee4 	bl	800e860 <puts>
		HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin, 0);
 8002a98:	2200      	movs	r2, #0
 8002a9a:	2110      	movs	r1, #16
 8002a9c:	4836      	ldr	r0, [pc, #216]	; (8002b78 <main+0x5a4>)
 8002a9e:	f003 fa15 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin, 1);
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	2108      	movs	r1, #8
 8002aa6:	4834      	ldr	r0, [pc, #208]	; (8002b78 <main+0x5a4>)
 8002aa8:	f003 fa10 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, 1);//rotates motor
 8002aac:	2201      	movs	r2, #1
 8002aae:	2120      	movs	r1, #32
 8002ab0:	4831      	ldr	r0, [pc, #196]	; (8002b78 <main+0x5a4>)
 8002ab2:	f003 fa0b 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_Delay(3500);
 8002ab6:	f640 50ac 	movw	r0, #3500	; 0xdac
 8002aba:	f002 fccd 	bl	8005458 <HAL_Delay>
		HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin, 0);
 8002abe:	2200      	movs	r2, #0
 8002ac0:	2110      	movs	r1, #16
 8002ac2:	482d      	ldr	r0, [pc, #180]	; (8002b78 <main+0x5a4>)
 8002ac4:	f003 fa02 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin, 0);
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2108      	movs	r1, #8
 8002acc:	482a      	ldr	r0, [pc, #168]	; (8002b78 <main+0x5a4>)
 8002ace:	f003 f9fd 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, 1);//stops motor
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	2120      	movs	r1, #32
 8002ad6:	4828      	ldr	r0, [pc, #160]	; (8002b78 <main+0x5a4>)
 8002ad8:	f003 f9f8 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8002adc:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002ae0:	f002 fcba 	bl	8005458 <HAL_Delay>
		HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin, 1);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	2110      	movs	r1, #16
 8002ae8:	4823      	ldr	r0, [pc, #140]	; (8002b78 <main+0x5a4>)
 8002aea:	f003 f9ef 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2108      	movs	r1, #8
 8002af2:	4821      	ldr	r0, [pc, #132]	; (8002b78 <main+0x5a4>)
 8002af4:	f003 f9ea 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, 1);//reverses motor
 8002af8:	2201      	movs	r2, #1
 8002afa:	2120      	movs	r1, #32
 8002afc:	481e      	ldr	r0, [pc, #120]	; (8002b78 <main+0x5a4>)
 8002afe:	f003 f9e5 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_Delay(3500);
 8002b02:	f640 50ac 	movw	r0, #3500	; 0xdac
 8002b06:	f002 fca7 	bl	8005458 <HAL_Delay>
		HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin, 0);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	2110      	movs	r1, #16
 8002b0e:	481a      	ldr	r0, [pc, #104]	; (8002b78 <main+0x5a4>)
 8002b10:	f003 f9dc 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin, 0);
 8002b14:	2200      	movs	r2, #0
 8002b16:	2108      	movs	r1, #8
 8002b18:	4817      	ldr	r0, [pc, #92]	; (8002b78 <main+0x5a4>)
 8002b1a:	f003 f9d7 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, 1);//stops motor
 8002b1e:	2201      	movs	r2, #1
 8002b20:	2120      	movs	r1, #32
 8002b22:	4815      	ldr	r0, [pc, #84]	; (8002b78 <main+0x5a4>)
 8002b24:	f003 f9d2 	bl	8005ecc <HAL_GPIO_WritePin>
 8002b28:	e735      	b.n	8002996 <main+0x3c2>
	}else{
		HAL_GPIO_WritePin(IN1A_GPIO_Port, IN1A_Pin, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2110      	movs	r1, #16
 8002b2e:	4812      	ldr	r0, [pc, #72]	; (8002b78 <main+0x5a4>)
 8002b30:	f003 f9cc 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN2A_GPIO_Port, IN2A_Pin, 0);
 8002b34:	2200      	movs	r2, #0
 8002b36:	2108      	movs	r1, #8
 8002b38:	480f      	ldr	r0, [pc, #60]	; (8002b78 <main+0x5a4>)
 8002b3a:	f003 f9c7 	bl	8005ecc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENABLE_GPIO_Port, ENABLE_Pin, 1);//stops motor
 8002b3e:	2201      	movs	r2, #1
 8002b40:	2120      	movs	r1, #32
 8002b42:	480d      	ldr	r0, [pc, #52]	; (8002b78 <main+0x5a4>)
 8002b44:	f003 f9c2 	bl	8005ecc <HAL_GPIO_WritePin>
	ret = MQTTYield(&client, 500);
 8002b48:	e725      	b.n	8002996 <main+0x3c2>
 8002b4a:	bf00      	nop
 8002b4c:	080121f8 	.word	0x080121f8
 8002b50:	20000360 	.word	0x20000360
 8002b54:	20000230 	.word	0x20000230
 8002b58:	08012214 	.word	0x08012214
 8002b5c:	08012240 	.word	0x08012240
 8002b60:	08012254 	.word	0x08012254
 8002b64:	08012274 	.word	0x08012274
 8002b68:	0801227c 	.word	0x0801227c
 8002b6c:	453ea000 	.word	0x453ea000
 8002b70:	08012298 	.word	0x08012298
 8002b74:	080122a8 	.word	0x080122a8
 8002b78:	48000800 	.word	0x48000800

08002b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b096      	sub	sp, #88	; 0x58
 8002b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b82:	f107 0314 	add.w	r3, r7, #20
 8002b86:	2244      	movs	r2, #68	; 0x44
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f00b f864 	bl	800dc58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002b90:	463b      	mov	r3, r7
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
 8002b9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002b9e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ba2:	f003 ff7f 	bl	8006aa4 <HAL_PWREx_ControlVoltageScaling>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002bac:	f000 fd28 	bl	8003600 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002bb0:	f003 ff5a 	bl	8006a68 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002bb4:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <SystemClock_Config+0xc4>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	4a21      	ldr	r2, [pc, #132]	; (8002c40 <SystemClock_Config+0xc4>)
 8002bbc:	f023 0318 	bic.w	r3, r3, #24
 8002bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 8002bc4:	231c      	movs	r3, #28
 8002bc6:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002bd8:	2360      	movs	r3, #96	; 0x60
 8002bda:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002be0:	2301      	movs	r3, #1
 8002be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002be4:	2301      	movs	r3, #1
 8002be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002be8:	2328      	movs	r3, #40	; 0x28
 8002bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002bec:	2307      	movs	r3, #7
 8002bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002bf0:	2302      	movs	r3, #2
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002bf8:	f107 0314 	add.w	r3, r7, #20
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f004 f873 	bl	8006ce8 <HAL_RCC_OscConfig>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d001      	beq.n	8002c0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8002c08:	f000 fcfa 	bl	8003600 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c0c:	230f      	movs	r3, #15
 8002c0e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c10:	2303      	movs	r3, #3
 8002c12:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c14:	2300      	movs	r3, #0
 8002c16:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002c20:	463b      	mov	r3, r7
 8002c22:	2104      	movs	r1, #4
 8002c24:	4618      	mov	r0, r3
 8002c26:	f004 fc3b 	bl	80074a0 <HAL_RCC_ClockConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8002c30:	f000 fce6 	bl	8003600 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002c34:	f005 f942 	bl	8007ebc <HAL_RCCEx_EnableMSIPLLMode>
}
 8002c38:	bf00      	nop
 8002c3a:	3758      	adds	r7, #88	; 0x58
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40021000 	.word	0x40021000

08002c44 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b0a2      	sub	sp, #136	; 0x88
 8002c48:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c4a:	463b      	mov	r3, r7
 8002c4c:	2288      	movs	r2, #136	; 0x88
 8002c4e:	2100      	movs	r1, #0
 8002c50:	4618      	mov	r0, r3
 8002c52:	f00b f801 	bl	800dc58 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_RNG;
 8002c56:	f44f 2384 	mov.w	r3, #270336	; 0x42000
 8002c5a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8002c5c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c60:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8002c62:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002c66:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8002c70:	2318      	movs	r3, #24
 8002c72:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8002c74:	2307      	movs	r3, #7
 8002c76:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8002c80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002c84:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002c86:	463b      	mov	r3, r7
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f004 fe2d 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 8002c94:	f000 fcb4 	bl	8003600 <Error_Handler>
  }
}
 8002c98:	bf00      	nop
 8002c9a:	3788      	adds	r7, #136	; 0x88
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}

08002ca0 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 8002ca4:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002ca6:	4a19      	ldr	r2, [pc, #100]	; (8002d0c <MX_DFSDM1_Init+0x6c>)
 8002ca8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = DISABLE;
 8002caa:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8002cb0:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 8002cb6:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cb8:	2202      	movs	r2, #2
 8002cba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8002cbc:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002ccc:	2200      	movs	r2, #0
 8002cce:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8002cd0:	4b0d      	ldr	r3, [pc, #52]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 8002cd6:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8002ce8:	4b07      	ldr	r3, [pc, #28]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8002cee:	4b06      	ldr	r3, [pc, #24]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 8002cf4:	4804      	ldr	r0, [pc, #16]	; (8002d08 <MX_DFSDM1_Init+0x68>)
 8002cf6:	f002 fce5 	bl	80056c4 <HAL_DFSDM_ChannelInit>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d001      	beq.n	8002d04 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8002d00:	f000 fc7e 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8002d04:	bf00      	nop
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200001f8 	.word	0x200001f8
 8002d0c:	40016000 	.word	0x40016000

08002d10 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002d14:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d16:	4a1c      	ldr	r2, [pc, #112]	; (8002d88 <MX_I2C3_Init+0x78>)
 8002d18:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10909CEC;
 8002d1a:	4b1a      	ldr	r3, [pc, #104]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d1c:	4a1b      	ldr	r2, [pc, #108]	; (8002d8c <MX_I2C3_Init+0x7c>)
 8002d1e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002d20:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d22:	2200      	movs	r2, #0
 8002d24:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d26:	4b17      	ldr	r3, [pc, #92]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d28:	2201      	movs	r2, #1
 8002d2a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d2c:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d3e:	4b11      	ldr	r3, [pc, #68]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002d4a:	480e      	ldr	r0, [pc, #56]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d4c:	f003 f8ee 	bl	8005f2c <HAL_I2C_Init>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002d56:	f000 fc53 	bl	8003600 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	4809      	ldr	r0, [pc, #36]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d5e:	f003 fca3 	bl	80066a8 <HAL_I2CEx_ConfigAnalogFilter>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002d68:	f000 fc4a 	bl	8003600 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4805      	ldr	r0, [pc, #20]	; (8002d84 <MX_I2C3_Init+0x74>)
 8002d70:	f003 fce5 	bl	800673e <HAL_I2CEx_ConfigDigitalFilter>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8002d7a:	f000 fc41 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002d7e:	bf00      	nop
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	20000230 	.word	0x20000230
 8002d88:	40005c00 	.word	0x40005c00
 8002d8c:	10909cec 	.word	0x10909cec

08002d90 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8002d94:	4b0f      	ldr	r3, [pc, #60]	; (8002dd4 <MX_QUADSPI_Init+0x44>)
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <MX_QUADSPI_Init+0x48>)
 8002d98:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 8002d9a:	4b0e      	ldr	r3, [pc, #56]	; (8002dd4 <MX_QUADSPI_Init+0x44>)
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8002da0:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <MX_QUADSPI_Init+0x44>)
 8002da2:	2204      	movs	r2, #4
 8002da4:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <MX_QUADSPI_Init+0x44>)
 8002da8:	2210      	movs	r2, #16
 8002daa:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8002dac:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <MX_QUADSPI_Init+0x44>)
 8002dae:	2217      	movs	r2, #23
 8002db0:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8002db2:	4b08      	ldr	r3, [pc, #32]	; (8002dd4 <MX_QUADSPI_Init+0x44>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8002db8:	4b06      	ldr	r3, [pc, #24]	; (8002dd4 <MX_QUADSPI_Init+0x44>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8002dbe:	4805      	ldr	r0, [pc, #20]	; (8002dd4 <MX_QUADSPI_Init+0x44>)
 8002dc0:	f003 fed6 	bl	8006b70 <HAL_QSPI_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8002dca:	f000 fc19 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	20000284 	.word	0x20000284
 8002dd8:	a0001000 	.word	0xa0001000

08002ddc <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8002de0:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <MX_RNG_Init+0x20>)
 8002de2:	4a07      	ldr	r2, [pc, #28]	; (8002e00 <MX_RNG_Init+0x24>)
 8002de4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002de6:	4805      	ldr	r0, [pc, #20]	; (8002dfc <MX_RNG_Init+0x20>)
 8002de8:	f005 fa4a 	bl	8008280 <HAL_RNG_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8002df2:	f000 fc05 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	200002c8 	.word	0x200002c8
 8002e00:	50060800 	.word	0x50060800

08002e04 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002e08:	4b10      	ldr	r3, [pc, #64]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e0a:	4a11      	ldr	r2, [pc, #68]	; (8002e50 <MX_RTC_Init+0x4c>)
 8002e0c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002e0e:	4b0f      	ldr	r3, [pc, #60]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8002e14:	4b0d      	ldr	r3, [pc, #52]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e16:	227f      	movs	r2, #127	; 0x7f
 8002e18:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002e1a:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e1c:	22ff      	movs	r2, #255	; 0xff
 8002e1e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002e20:	4b0a      	ldr	r3, [pc, #40]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8002e26:	4b09      	ldr	r3, [pc, #36]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002e2c:	4b07      	ldr	r3, [pc, #28]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8002e32:	4b06      	ldr	r3, [pc, #24]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8002e38:	4804      	ldr	r0, [pc, #16]	; (8002e4c <MX_RTC_Init+0x48>)
 8002e3a:	f005 fa78 	bl	800832e <HAL_RTC_Init>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d001      	beq.n	8002e48 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8002e44:	f000 fbdc 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002e48:	bf00      	nop
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	200002d8 	.word	0x200002d8
 8002e50:	40002800 	.word	0x40002800

08002e54 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	; (8002ecc <MX_SPI3_Init+0x78>)
 8002e5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002e5e:	4b1a      	ldr	r3, [pc, #104]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002e64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002e6c:	4b16      	ldr	r3, [pc, #88]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e6e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8002e72:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e74:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e82:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e86:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002e88:	4b0f      	ldr	r3, [pc, #60]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002e8e:	4b0e      	ldr	r3, [pc, #56]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e90:	2200      	movs	r2, #0
 8002e92:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002e94:	4b0c      	ldr	r3, [pc, #48]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002ea0:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002ea2:	2207      	movs	r2, #7
 8002ea4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002ea6:	4b08      	ldr	r3, [pc, #32]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002eac:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002eae:	2208      	movs	r2, #8
 8002eb0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002eb2:	4805      	ldr	r0, [pc, #20]	; (8002ec8 <MX_SPI3_Init+0x74>)
 8002eb4:	f005 fd4c 	bl	8008950 <HAL_SPI_Init>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d001      	beq.n	8002ec2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8002ebe:	f000 fb9f 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002ec2:	bf00      	nop
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200002fc 	.word	0x200002fc
 8002ecc:	40003c00 	.word	0x40003c00

08002ed0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ed6:	1d3b      	adds	r3, r7, #4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002ee0:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <MX_TIM6_Init+0x68>)
 8002ee2:	4a16      	ldr	r2, [pc, #88]	; (8002f3c <MX_TIM6_Init+0x6c>)
 8002ee4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8000;
 8002ee6:	4b14      	ldr	r3, [pc, #80]	; (8002f38 <MX_TIM6_Init+0x68>)
 8002ee8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8002eec:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002eee:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <MX_TIM6_Init+0x68>)
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 49999;
 8002ef4:	4b10      	ldr	r3, [pc, #64]	; (8002f38 <MX_TIM6_Init+0x68>)
 8002ef6:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002efa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002efc:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <MX_TIM6_Init+0x68>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002f02:	480d      	ldr	r0, [pc, #52]	; (8002f38 <MX_TIM6_Init+0x68>)
 8002f04:	f007 f855 	bl	8009fb2 <HAL_TIM_Base_Init>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d001      	beq.n	8002f12 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8002f0e:	f000 fb77 	bl	8003600 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4806      	ldr	r0, [pc, #24]	; (8002f38 <MX_TIM6_Init+0x68>)
 8002f20:	f007 faf0 	bl	800a504 <HAL_TIMEx_MasterConfigSynchronization>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 8002f2a:	f000 fb69 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002f2e:	bf00      	nop
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	20000360 	.word	0x20000360
 8002f3c:	40001000 	.word	0x40001000

08002f40 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f46:	4a15      	ldr	r2, [pc, #84]	; (8002f9c <MX_USART1_UART_Init+0x5c>)
 8002f48:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002f4a:	4b13      	ldr	r3, [pc, #76]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f50:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002f52:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002f58:	4b0f      	ldr	r3, [pc, #60]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002f5e:	4b0e      	ldr	r3, [pc, #56]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002f64:	4b0c      	ldr	r3, [pc, #48]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f66:	220c      	movs	r2, #12
 8002f68:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f6a:	4b0b      	ldr	r3, [pc, #44]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f70:	4b09      	ldr	r3, [pc, #36]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f76:	4b08      	ldr	r3, [pc, #32]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002f82:	4805      	ldr	r0, [pc, #20]	; (8002f98 <MX_USART1_UART_Init+0x58>)
 8002f84:	f007 fb64 	bl	800a650 <HAL_UART_Init>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002f8e:	f000 fb37 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200003ac 	.word	0x200003ac
 8002f9c:	40013800 	.word	0x40013800

08002fa0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002fa4:	4b14      	ldr	r3, [pc, #80]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fa6:	4a15      	ldr	r2, [pc, #84]	; (8002ffc <MX_USART3_UART_Init+0x5c>)
 8002fa8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002faa:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002fb0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002fb2:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fba:	2200      	movs	r2, #0
 8002fbc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002fbe:	4b0e      	ldr	r3, [pc, #56]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002fc4:	4b0c      	ldr	r3, [pc, #48]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fc6:	220c      	movs	r2, #12
 8002fc8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002fca:	4b0b      	ldr	r3, [pc, #44]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002fd0:	4b09      	ldr	r3, [pc, #36]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002fd6:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fde:	2200      	movs	r2, #0
 8002fe0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002fe2:	4805      	ldr	r0, [pc, #20]	; (8002ff8 <MX_USART3_UART_Init+0x58>)
 8002fe4:	f007 fb34 	bl	800a650 <HAL_UART_Init>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d001      	beq.n	8002ff2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002fee:	f000 fb07 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20000430 	.word	0x20000430
 8002ffc:	40004800 	.word	0x40004800

08003000 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8003004:	4b14      	ldr	r3, [pc, #80]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003006:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800300a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800300c:	4b12      	ldr	r3, [pc, #72]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800300e:	2206      	movs	r2, #6
 8003010:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003014:	2202      	movs	r2, #2
 8003016:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800301a:	2202      	movs	r2, #2
 800301c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800301e:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003020:	2200      	movs	r2, #0
 8003022:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8003024:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003026:	2200      	movs	r2, #0
 8003028:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800302a:	4b0b      	ldr	r3, [pc, #44]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800302c:	2200      	movs	r2, #0
 800302e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8003030:	4b09      	ldr	r3, [pc, #36]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003032:	2200      	movs	r2, #0
 8003034:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8003036:	4b08      	ldr	r3, [pc, #32]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003038:	2200      	movs	r2, #0
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800303c:	4b06      	ldr	r3, [pc, #24]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800303e:	2200      	movs	r2, #0
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8003042:	4805      	ldr	r0, [pc, #20]	; (8003058 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8003044:	f003 fbc7 	bl	80067d6 <HAL_PCD_Init>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800304e:	f000 fad7 	bl	8003600 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8003052:	bf00      	nop
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	200004b4 	.word	0x200004b4

0800305c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	; 0x28
 8003060:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003062:	f107 0314 	add.w	r3, r7, #20
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
 800306a:	605a      	str	r2, [r3, #4]
 800306c:	609a      	str	r2, [r3, #8]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003072:	4bbd      	ldr	r3, [pc, #756]	; (8003368 <MX_GPIO_Init+0x30c>)
 8003074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003076:	4abc      	ldr	r2, [pc, #752]	; (8003368 <MX_GPIO_Init+0x30c>)
 8003078:	f043 0310 	orr.w	r3, r3, #16
 800307c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800307e:	4bba      	ldr	r3, [pc, #744]	; (8003368 <MX_GPIO_Init+0x30c>)
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	f003 0310 	and.w	r3, r3, #16
 8003086:	613b      	str	r3, [r7, #16]
 8003088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800308a:	4bb7      	ldr	r3, [pc, #732]	; (8003368 <MX_GPIO_Init+0x30c>)
 800308c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800308e:	4ab6      	ldr	r2, [pc, #728]	; (8003368 <MX_GPIO_Init+0x30c>)
 8003090:	f043 0304 	orr.w	r3, r3, #4
 8003094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003096:	4bb4      	ldr	r3, [pc, #720]	; (8003368 <MX_GPIO_Init+0x30c>)
 8003098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309a:	f003 0304 	and.w	r3, r3, #4
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030a2:	4bb1      	ldr	r3, [pc, #708]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a6:	4ab0      	ldr	r2, [pc, #704]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030a8:	f043 0301 	orr.w	r3, r3, #1
 80030ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ae:	4bae      	ldr	r3, [pc, #696]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030b2:	f003 0301 	and.w	r3, r3, #1
 80030b6:	60bb      	str	r3, [r7, #8]
 80030b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80030ba:	4bab      	ldr	r3, [pc, #684]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030be:	4aaa      	ldr	r2, [pc, #680]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030c0:	f043 0302 	orr.w	r3, r3, #2
 80030c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030c6:	4ba8      	ldr	r3, [pc, #672]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	607b      	str	r3, [r7, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80030d2:	4ba5      	ldr	r3, [pc, #660]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d6:	4aa4      	ldr	r2, [pc, #656]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030d8:	f043 0308 	orr.w	r3, r3, #8
 80030dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030de:	4ba2      	ldr	r3, [pc, #648]	; (8003368 <MX_GPIO_Init+0x30c>)
 80030e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030e2:	f003 0308 	and.w	r3, r3, #8
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 80030ea:	2200      	movs	r2, #0
 80030ec:	f44f 718a 	mov.w	r1, #276	; 0x114
 80030f0:	489e      	ldr	r0, [pc, #632]	; (800336c <MX_GPIO_Init+0x310>)
 80030f2:	f002 feeb 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN2A_Pin|IN1A_Pin|ENABLE_Pin|VL53L0X_XSHUT_Pin
 80030f6:	2200      	movs	r2, #0
 80030f8:	f44f 711e 	mov.w	r1, #632	; 0x278
 80030fc:	489c      	ldr	r0, [pc, #624]	; (8003370 <MX_GPIO_Init+0x314>)
 80030fe:	f002 fee5 	bl	8005ecc <HAL_GPIO_WritePin>
                          |LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8003102:	2200      	movs	r2, #0
 8003104:	f248 1104 	movw	r1, #33028	; 0x8104
 8003108:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800310c:	f002 fede 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8003110:	2200      	movs	r2, #0
 8003112:	f24f 0114 	movw	r1, #61460	; 0xf014
 8003116:	4897      	ldr	r0, [pc, #604]	; (8003374 <MX_GPIO_Init+0x318>)
 8003118:	f002 fed8 	bl	8005ecc <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 800311c:	2200      	movs	r2, #0
 800311e:	f241 0181 	movw	r1, #4225	; 0x1081
 8003122:	4895      	ldr	r0, [pc, #596]	; (8003378 <MX_GPIO_Init+0x31c>)
 8003124:	f002 fed2 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003128:	2201      	movs	r2, #1
 800312a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800312e:	4892      	ldr	r0, [pc, #584]	; (8003378 <MX_GPIO_Init+0x31c>)
 8003130:	f002 fecc 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8003134:	2201      	movs	r2, #1
 8003136:	2120      	movs	r1, #32
 8003138:	488e      	ldr	r0, [pc, #568]	; (8003374 <MX_GPIO_Init+0x318>)
 800313a:	f002 fec7 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 800313e:	2201      	movs	r2, #1
 8003140:	2101      	movs	r1, #1
 8003142:	488a      	ldr	r0, [pc, #552]	; (800336c <MX_GPIO_Init+0x310>)
 8003144:	f002 fec2 	bl	8005ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8003148:	f240 1315 	movw	r3, #277	; 0x115
 800314c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314e:	2301      	movs	r3, #1
 8003150:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800315a:	f107 0314 	add.w	r3, r7, #20
 800315e:	4619      	mov	r1, r3
 8003160:	4882      	ldr	r0, [pc, #520]	; (800336c <MX_GPIO_Init+0x310>)
 8003162:	f002 fbfd 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8003166:	236a      	movs	r3, #106	; 0x6a
 8003168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800316a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800316e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003174:	f107 0314 	add.w	r3, r7, #20
 8003178:	4619      	mov	r1, r3
 800317a:	487c      	ldr	r0, [pc, #496]	; (800336c <MX_GPIO_Init+0x310>)
 800317c:	f002 fbf0 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8003180:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003184:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003186:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800318a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800318c:	2300      	movs	r3, #0
 800318e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8003190:	f107 0314 	add.w	r3, r7, #20
 8003194:	4619      	mov	r1, r3
 8003196:	4876      	ldr	r0, [pc, #472]	; (8003370 <MX_GPIO_Init+0x314>)
 8003198:	f002 fbe2 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800319c:	2304      	movs	r3, #4
 800319e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80031a0:	230b      	movs	r3, #11
 80031a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031a4:	2300      	movs	r3, #0
 80031a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031a8:	f107 0314 	add.w	r3, r7, #20
 80031ac:	4619      	mov	r1, r3
 80031ae:	4870      	ldr	r0, [pc, #448]	; (8003370 <MX_GPIO_Init+0x314>)
 80031b0:	f002 fbd6 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : IN2A_Pin IN1A_Pin ENABLE_Pin VL53L0X_XSHUT_Pin
                           LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = IN2A_Pin|IN1A_Pin|ENABLE_Pin|VL53L0X_XSHUT_Pin
 80031b4:	f44f 731e 	mov.w	r3, #632	; 0x278
 80031b8:	617b      	str	r3, [r7, #20]
                          |LED3_WIFI__LED4_BLE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031be:	2300      	movs	r3, #0
 80031c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031c2:	2300      	movs	r3, #0
 80031c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80031c6:	f107 0314 	add.w	r3, r7, #20
 80031ca:	4619      	mov	r1, r3
 80031cc:	4868      	ldr	r0, [pc, #416]	; (8003370 <MX_GPIO_Init+0x314>)
 80031ce:	f002 fbc7 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 80031d2:	2303      	movs	r3, #3
 80031d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031d6:	2302      	movs	r3, #2
 80031d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031da:	2300      	movs	r3, #0
 80031dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031de:	2303      	movs	r3, #3
 80031e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80031e2:	2308      	movs	r3, #8
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031e6:	f107 0314 	add.w	r3, r7, #20
 80031ea:	4619      	mov	r1, r3
 80031ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031f0:	f002 fbb6 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 80031f4:	f248 1304 	movw	r3, #33028	; 0x8104
 80031f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031fa:	2301      	movs	r3, #1
 80031fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003202:	2300      	movs	r3, #0
 8003204:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003206:	f107 0314 	add.w	r3, r7, #20
 800320a:	4619      	mov	r1, r3
 800320c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003210:	f002 fba6 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8003214:	2308      	movs	r3, #8
 8003216:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003218:	2302      	movs	r3, #2
 800321a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003220:	2300      	movs	r3, #0
 8003222:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003224:	2301      	movs	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	4619      	mov	r1, r3
 800322e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003232:	f002 fb95 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8003236:	2310      	movs	r3, #16
 8003238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800323a:	230b      	movs	r3, #11
 800323c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800323e:	2300      	movs	r3, #0
 8003240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8003242:	f107 0314 	add.w	r3, r7, #20
 8003246:	4619      	mov	r1, r3
 8003248:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800324c:	f002 fb88 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8003250:	23e0      	movs	r3, #224	; 0xe0
 8003252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003254:	2302      	movs	r3, #2
 8003256:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800325c:	2303      	movs	r3, #3
 800325e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003260:	2305      	movs	r3, #5
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003264:	f107 0314 	add.w	r3, r7, #20
 8003268:	4619      	mov	r1, r3
 800326a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800326e:	f002 fb77 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8003272:	2301      	movs	r3, #1
 8003274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003276:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800327a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327c:	2300      	movs	r3, #0
 800327e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8003280:	f107 0314 	add.w	r3, r7, #20
 8003284:	4619      	mov	r1, r3
 8003286:	483b      	ldr	r0, [pc, #236]	; (8003374 <MX_GPIO_Init+0x318>)
 8003288:	f002 fb6a 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 800328c:	2302      	movs	r3, #2
 800328e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003290:	230b      	movs	r3, #11
 8003292:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003294:	2300      	movs	r3, #0
 8003296:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8003298:	f107 0314 	add.w	r3, r7, #20
 800329c:	4619      	mov	r1, r3
 800329e:	4835      	ldr	r0, [pc, #212]	; (8003374 <MX_GPIO_Init+0x318>)
 80032a0:	f002 fb5e 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 80032a4:	f24f 0334 	movw	r3, #61492	; 0xf034
 80032a8:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032aa:	2301      	movs	r3, #1
 80032ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032b2:	2300      	movs	r3, #0
 80032b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032b6:	f107 0314 	add.w	r3, r7, #20
 80032ba:	4619      	mov	r1, r3
 80032bc:	482d      	ldr	r0, [pc, #180]	; (8003374 <MX_GPIO_Init+0x318>)
 80032be:	f002 fb4f 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80032c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80032c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80032c8:	2312      	movs	r3, #18
 80032ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032cc:	2300      	movs	r3, #0
 80032ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032d0:	2303      	movs	r3, #3
 80032d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80032d4:	2304      	movs	r3, #4
 80032d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032d8:	f107 0314 	add.w	r3, r7, #20
 80032dc:	4619      	mov	r1, r3
 80032de:	4825      	ldr	r0, [pc, #148]	; (8003374 <MX_GPIO_Init+0x318>)
 80032e0:	f002 fb3e 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin;
 80032e4:	f44f 434c 	mov.w	r3, #52224	; 0xcc00
 80032e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80032ea:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80032ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f0:	2300      	movs	r3, #0
 80032f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032f4:	f107 0314 	add.w	r3, r7, #20
 80032f8:	4619      	mov	r1, r3
 80032fa:	481f      	ldr	r0, [pc, #124]	; (8003378 <MX_GPIO_Init+0x31c>)
 80032fc:	f002 fb30 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8003300:	f243 0381 	movw	r3, #12417	; 0x3081
 8003304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003306:	2301      	movs	r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330a:	2300      	movs	r3, #0
 800330c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800330e:	2300      	movs	r3, #0
 8003310:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003312:	f107 0314 	add.w	r3, r7, #20
 8003316:	4619      	mov	r1, r3
 8003318:	4817      	ldr	r0, [pc, #92]	; (8003378 <MX_GPIO_Init+0x31c>)
 800331a:	f002 fb21 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 800331e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003322:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003324:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003328:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800332e:	f107 0314 	add.w	r3, r7, #20
 8003332:	4619      	mov	r1, r3
 8003334:	480e      	ldr	r0, [pc, #56]	; (8003370 <MX_GPIO_Init+0x314>)
 8003336:	f002 fb13 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 800333a:	2302      	movs	r3, #2
 800333c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003346:	2303      	movs	r3, #3
 8003348:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800334a:	2305      	movs	r3, #5
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4619      	mov	r1, r3
 8003354:	4808      	ldr	r0, [pc, #32]	; (8003378 <MX_GPIO_Init+0x31c>)
 8003356:	f002 fb03 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 800335a:	2378      	movs	r3, #120	; 0x78
 800335c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800335e:	2302      	movs	r3, #2
 8003360:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003362:	2300      	movs	r3, #0
 8003364:	e00a      	b.n	800337c <MX_GPIO_Init+0x320>
 8003366:	bf00      	nop
 8003368:	40021000 	.word	0x40021000
 800336c:	48001000 	.word	0x48001000
 8003370:	48000800 	.word	0x48000800
 8003374:	48000400 	.word	0x48000400
 8003378:	48000c00 	.word	0x48000c00
 800337c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800337e:	2303      	movs	r3, #3
 8003380:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003382:	2307      	movs	r3, #7
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003386:	f107 0314 	add.w	r3, r7, #20
 800338a:	4619      	mov	r1, r3
 800338c:	4817      	ldr	r0, [pc, #92]	; (80033ec <MX_GPIO_Init+0x390>)
 800338e:	f002 fae7 	bl	8005960 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8003392:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003396:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003398:	2312      	movs	r3, #18
 800339a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339c:	2300      	movs	r3, #0
 800339e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033a0:	2303      	movs	r3, #3
 80033a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80033a4:	2304      	movs	r3, #4
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033a8:	f107 0314 	add.w	r3, r7, #20
 80033ac:	4619      	mov	r1, r3
 80033ae:	4810      	ldr	r0, [pc, #64]	; (80033f0 <MX_GPIO_Init+0x394>)
 80033b0:	f002 fad6 	bl	8005960 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80033b4:	2200      	movs	r2, #0
 80033b6:	2100      	movs	r1, #0
 80033b8:	2007      	movs	r0, #7
 80033ba:	f002 f94c 	bl	8005656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80033be:	2007      	movs	r0, #7
 80033c0:	f002 f965 	bl	800568e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80033c4:	2200      	movs	r2, #0
 80033c6:	2100      	movs	r1, #0
 80033c8:	2017      	movs	r0, #23
 80033ca:	f002 f944 	bl	8005656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80033ce:	2017      	movs	r0, #23
 80033d0:	f002 f95d 	bl	800568e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80033d4:	2200      	movs	r2, #0
 80033d6:	2100      	movs	r1, #0
 80033d8:	2028      	movs	r0, #40	; 0x28
 80033da:	f002 f93c 	bl	8005656 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80033de:	2028      	movs	r0, #40	; 0x28
 80033e0:	f002 f955 	bl	800568e <HAL_NVIC_EnableIRQ>

}
 80033e4:	bf00      	nop
 80033e6:	3728      	adds	r7, #40	; 0x28
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	48000c00 	.word	0x48000c00
 80033f0:	48000400 	.word	0x48000400

080033f4 <turbidity_get_ntu>:

/* USER CODE BEGIN 4 */
int8_t turbidity_get_ntu ( uint32_t sample, float * ntu )
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b084      	sub	sp, #16
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
 80033fc:	6039      	str	r1, [r7, #0]
    float voltage;
    float coeff_c;

    voltage = (float)sample;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	ee07 3a90 	vmov	s15, r3
 8003404:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003408:	edc7 7a02 	vstr	s15, [r7, #8]
    voltage *= TURBIDITY_VREF_5000_mV;
 800340c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003410:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003504 <turbidity_get_ntu+0x110>
 8003414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003418:	edc7 7a02 	vstr	s15, [r7, #8]
    voltage /= TURBIDITY_ADC_RESOLUTION;
 800341c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003420:	eddf 6a39 	vldr	s13, [pc, #228]	; 8003508 <turbidity_get_ntu+0x114>
 8003424:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003428:	edc7 7a02 	vstr	s15, [r7, #8]
    printf("Input voltage: %fmV\r\n", voltage);
 800342c:	68b8      	ldr	r0, [r7, #8]
 800342e:	f7fd f89b 	bl	8000568 <__aeabi_f2d>
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4835      	ldr	r0, [pc, #212]	; (800350c <turbidity_get_ntu+0x118>)
 8003438:	f00b f976 	bl	800e728 <iprintf>

    coeff_c = TURBIDITY_NTU_CALC_FACT_0;
 800343c:	4b34      	ldr	r3, [pc, #208]	; (8003510 <turbidity_get_ntu+0x11c>)
 800343e:	60fb      	str	r3, [r7, #12]

    if ( voltage > TURBIDITY_VOLTAGE_LEVEL_1 )
 8003440:	edd7 7a02 	vldr	s15, [r7, #8]
 8003444:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003514 <turbidity_get_ntu+0x120>
 8003448:	eef4 7ac7 	vcmpe.f32	s15, s14
 800344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003450:	dd01      	ble.n	8003456 <turbidity_get_ntu+0x62>
    {
        coeff_c = TURBIDITY_NTU_CALC_FACT_1;
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <turbidity_get_ntu+0x124>)
 8003454:	60fb      	str	r3, [r7, #12]
    }

    if ( voltage > TURBIDITY_VOLTAGE_LEVEL_2 )
 8003456:	edd7 7a02 	vldr	s15, [r7, #8]
 800345a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800351c <turbidity_get_ntu+0x128>
 800345e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003466:	dd01      	ble.n	800346c <turbidity_get_ntu+0x78>
    {
        coeff_c = TURBIDITY_NTU_CALC_FACT_2;
 8003468:	4b2d      	ldr	r3, [pc, #180]	; (8003520 <turbidity_get_ntu+0x12c>)
 800346a:	60fb      	str	r3, [r7, #12]
    }

    if ( voltage > TURBIDITY_VOLTAGE_LEVEL_3 )
 800346c:	edd7 7a02 	vldr	s15, [r7, #8]
 8003470:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003524 <turbidity_get_ntu+0x130>
 8003474:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800347c:	dd01      	ble.n	8003482 <turbidity_get_ntu+0x8e>
    {
        coeff_c = TURBIDITY_NTU_CALC_FACT_3;
 800347e:	4b2a      	ldr	r3, [pc, #168]	; (8003528 <turbidity_get_ntu+0x134>)
 8003480:	60fb      	str	r3, [r7, #12]
    }

    if ( voltage > TURBIDITY_VOLTAGE_LEVEL_4 )
 8003482:	edd7 7a02 	vldr	s15, [r7, #8]
 8003486:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800352c <turbidity_get_ntu+0x138>
 800348a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800348e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003492:	dd01      	ble.n	8003498 <turbidity_get_ntu+0xa4>
    {
        coeff_c = TURBIDITY_NTU_CALC_FACT_4;
 8003494:	4b26      	ldr	r3, [pc, #152]	; (8003530 <turbidity_get_ntu+0x13c>)
 8003496:	60fb      	str	r3, [r7, #12]
    }

    *ntu = TURBIDITY_ADC_VOLTAGE_MAX;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	4a26      	ldr	r2, [pc, #152]	; (8003534 <turbidity_get_ntu+0x140>)
 800349c:	601a      	str	r2, [r3, #0]
    *ntu -= voltage;
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	ed93 7a00 	vldr	s14, [r3]
 80034a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80034a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	edc3 7a00 	vstr	s15, [r3]
    *ntu /= coeff_c;
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	edd3 6a00 	vldr	s13, [r3]
 80034b8:	ed97 7a03 	vldr	s14, [r7, #12]
 80034bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	edc3 7a00 	vstr	s15, [r3]

    if ( voltage > TURBIDITY_ADC_VOLTAGE_MAX )
 80034c6:	edd7 7a02 	vldr	s15, [r7, #8]
 80034ca:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003538 <turbidity_get_ntu+0x144>
 80034ce:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d6:	dd03      	ble.n	80034e0 <turbidity_get_ntu+0xec>
    {
        *ntu = TURBIDITY_NTU_MIN;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	f04f 0200 	mov.w	r2, #0
 80034de:	601a      	str	r2, [r3, #0]
    }

    if ( voltage < TURBIDITY_ADC_VOLTAGE_MIN )
 80034e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80034e4:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800353c <turbidity_get_ntu+0x148>
 80034e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80034ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034f0:	d502      	bpl.n	80034f8 <turbidity_get_ntu+0x104>
    {
        *ntu = TURBIDITY_NTU_MAX;
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	4a12      	ldr	r2, [pc, #72]	; (8003540 <turbidity_get_ntu+0x14c>)
 80034f6:	601a      	str	r2, [r3, #0]
    }

    return 0;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	459c4000 	.word	0x459c4000
 8003508:	45800000 	.word	0x45800000
 800350c:	0801231c 	.word	0x0801231c
 8003510:	3f6318fc 	.word	0x3f6318fc
 8003514:	4525a000 	.word	0x4525a000
 8003518:	3f874f0e 	.word	0x3f874f0e
 800351c:	45372000 	.word	0x45372000
 8003520:	3f8f5c29 	.word	0x3f8f5c29
 8003524:	45516000 	.word	0x45516000
 8003528:	3faaa993 	.word	0x3faaa993
 800352c:	456d8000 	.word	0x456d8000
 8003530:	3fcccccd 	.word	0x3fcccccd
 8003534:	458fc000 	.word	0x458fc000
 8003538:	458fc000 	.word	0x458fc000
 800353c:	44c80000 	.word	0x44c80000
 8003540:	457a0000 	.word	0x457a0000

08003544 <SPI3_IRQHandler>:
}



void SPI3_IRQHandler(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
  HAL_SPI_IRQHandler(&hspi);
 8003548:	4802      	ldr	r0, [pc, #8]	; (8003554 <SPI3_IRQHandler+0x10>)
 800354a:	f005 fffd 	bl	8009548 <HAL_SPI_IRQHandler>
}/** Function to read data from the socket opened into provided buffer
 800354e:	bf00      	nop
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	2000116c 	.word	0x2000116c

08003558 <network_rd>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes read on SUCCESS
 *         - -1 on FAILURE
 **/
int network_rd(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b086      	sub	sp, #24
 800355c:	af00      	add	r7, sp, #0
 800355e:	60f8      	str	r0, [r7, #12]
 8003560:	60b9      	str	r1, [r7, #8]
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	603b      	str	r3, [r7, #0]
  int bytes;

  bytes = net_sock_recv((net_sockhnd_t) n->my_socket, buffer, len);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	68b9      	ldr	r1, [r7, #8]
 800356e:	4618      	mov	r0, r3
 8003570:	f7fd fe5c 	bl	800122c <net_sock_recv>
 8003574:	6178      	str	r0, [r7, #20]
  if(bytes < 0)
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2b00      	cmp	r3, #0
 800357a:	da0c      	bge.n	8003596 <network_rd+0x3e>
  {
    msg_error("net_sock_recv failed - %d\n", bytes);
 800357c:	f240 42e5 	movw	r2, #1253	; 0x4e5
 8003580:	4907      	ldr	r1, [pc, #28]	; (80035a0 <network_rd+0x48>)
 8003582:	4808      	ldr	r0, [pc, #32]	; (80035a4 <network_rd+0x4c>)
 8003584:	f00b f8d0 	bl	800e728 <iprintf>
 8003588:	6979      	ldr	r1, [r7, #20]
 800358a:	4807      	ldr	r0, [pc, #28]	; (80035a8 <network_rd+0x50>)
 800358c:	f00b f8cc 	bl	800e728 <iprintf>
    bytes = -1;
 8003590:	f04f 33ff 	mov.w	r3, #4294967295
 8003594:	617b      	str	r3, [r7, #20]
  }

   return bytes;
 8003596:	697b      	ldr	r3, [r7, #20]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3718      	adds	r7, #24
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	08012988 	.word	0x08012988
 80035a4:	08012334 	.word	0x08012334
 80035a8:	08012344 	.word	0x08012344

080035ac <network_wr>:
 *        - Timeout in milliseconds
 * @return - Number of Bytes written on SUCCESS
 *         - -1 on FAILURE
 **/
int network_wr(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
  int rc;

  rc = net_sock_send((net_sockhnd_t) n->my_socket, buffer, len);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fe4c 	bl	8001260 <net_sock_send>
 80035c8:	6178      	str	r0, [r7, #20]
  if(rc < 0)
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	da0c      	bge.n	80035ea <network_wr+0x3e>
  {
    msg_error("net_sock_send failed - %d\n", rc);
 80035d0:	f240 42fb 	movw	r2, #1275	; 0x4fb
 80035d4:	4907      	ldr	r1, [pc, #28]	; (80035f4 <network_wr+0x48>)
 80035d6:	4808      	ldr	r0, [pc, #32]	; (80035f8 <network_wr+0x4c>)
 80035d8:	f00b f8a6 	bl	800e728 <iprintf>
 80035dc:	6979      	ldr	r1, [r7, #20]
 80035de:	4807      	ldr	r0, [pc, #28]	; (80035fc <network_wr+0x50>)
 80035e0:	f00b f8a2 	bl	800e728 <iprintf>
    rc = -1;
 80035e4:	f04f 33ff 	mov.w	r3, #4294967295
 80035e8:	617b      	str	r3, [r7, #20]
  }

  return rc;
 80035ea:	697b      	ldr	r3, [r7, #20]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3718      	adds	r7, #24
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	08012994 	.word	0x08012994
 80035f8:	08012334 	.word	0x08012334
 80035fc:	08012360 	.word	0x08012360

08003600 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003600:	b480      	push	{r7}
 8003602:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003604:	b672      	cpsid	i
}
 8003606:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003608:	e7fe      	b.n	8003608 <Error_Handler+0x8>
	...

0800360c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003612:	4b0f      	ldr	r3, [pc, #60]	; (8003650 <HAL_MspInit+0x44>)
 8003614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003616:	4a0e      	ldr	r2, [pc, #56]	; (8003650 <HAL_MspInit+0x44>)
 8003618:	f043 0301 	orr.w	r3, r3, #1
 800361c:	6613      	str	r3, [r2, #96]	; 0x60
 800361e:	4b0c      	ldr	r3, [pc, #48]	; (8003650 <HAL_MspInit+0x44>)
 8003620:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003622:	f003 0301 	and.w	r3, r3, #1
 8003626:	607b      	str	r3, [r7, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800362a:	4b09      	ldr	r3, [pc, #36]	; (8003650 <HAL_MspInit+0x44>)
 800362c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362e:	4a08      	ldr	r2, [pc, #32]	; (8003650 <HAL_MspInit+0x44>)
 8003630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003634:	6593      	str	r3, [r2, #88]	; 0x58
 8003636:	4b06      	ldr	r3, [pc, #24]	; (8003650 <HAL_MspInit+0x44>)
 8003638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800363e:	603b      	str	r3, [r7, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003642:	bf00      	nop
 8003644:	370c      	adds	r7, #12
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40021000 	.word	0x40021000

08003654 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b0ac      	sub	sp, #176	; 0xb0
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800365c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003660:	2200      	movs	r2, #0
 8003662:	601a      	str	r2, [r3, #0]
 8003664:	605a      	str	r2, [r3, #4]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	60da      	str	r2, [r3, #12]
 800366a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800366c:	f107 0314 	add.w	r3, r7, #20
 8003670:	2288      	movs	r2, #136	; 0x88
 8003672:	2100      	movs	r1, #0
 8003674:	4618      	mov	r0, r3
 8003676:	f00a faef 	bl	800dc58 <memset>
  if(DFSDM1_Init == 0)
 800367a:	4b25      	ldr	r3, [pc, #148]	; (8003710 <HAL_DFSDM_ChannelMspInit+0xbc>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d141      	bne.n	8003706 <HAL_DFSDM_ChannelMspInit+0xb2>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8003682:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003686:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800368e:	f107 0314 	add.w	r3, r7, #20
 8003692:	4618      	mov	r0, r3
 8003694:	f004 f928 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800369e:	f7ff ffaf 	bl	8003600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 80036a2:	4b1c      	ldr	r3, [pc, #112]	; (8003714 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80036a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036a6:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80036a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ac:	6613      	str	r3, [r2, #96]	; 0x60
 80036ae:	4b19      	ldr	r3, [pc, #100]	; (8003714 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80036b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80036ba:	4b16      	ldr	r3, [pc, #88]	; (8003714 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036be:	4a15      	ldr	r2, [pc, #84]	; (8003714 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80036c0:	f043 0310 	orr.w	r3, r3, #16
 80036c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80036c6:	4b13      	ldr	r3, [pc, #76]	; (8003714 <HAL_DFSDM_ChannelMspInit+0xc0>)
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin;
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036d8:	2302      	movs	r3, #2
 80036da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036de:	2300      	movs	r3, #0
 80036e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036e4:	2300      	movs	r3, #0
 80036e6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80036ea:	2306      	movs	r3, #6
 80036ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(DFSDM1_DATIN2_GPIO_Port, &GPIO_InitStruct);
 80036f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80036f4:	4619      	mov	r1, r3
 80036f6:	4808      	ldr	r0, [pc, #32]	; (8003718 <HAL_DFSDM_ChannelMspInit+0xc4>)
 80036f8:	f002 f932 	bl	8005960 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <HAL_DFSDM_ChannelMspInit+0xbc>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3301      	adds	r3, #1
 8003702:	4a03      	ldr	r2, [pc, #12]	; (8003710 <HAL_DFSDM_ChannelMspInit+0xbc>)
 8003704:	6013      	str	r3, [r2, #0]
  }

}
 8003706:	bf00      	nop
 8003708:	37b0      	adds	r7, #176	; 0xb0
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	20001134 	.word	0x20001134
 8003714:	40021000 	.word	0x40021000
 8003718:	48001000 	.word	0x48001000

0800371c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b0ac      	sub	sp, #176	; 0xb0
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003724:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003728:	2200      	movs	r2, #0
 800372a:	601a      	str	r2, [r3, #0]
 800372c:	605a      	str	r2, [r3, #4]
 800372e:	609a      	str	r2, [r3, #8]
 8003730:	60da      	str	r2, [r3, #12]
 8003732:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003734:	f107 0314 	add.w	r3, r7, #20
 8003738:	2288      	movs	r2, #136	; 0x88
 800373a:	2100      	movs	r1, #0
 800373c:	4618      	mov	r0, r3
 800373e:	f00a fa8b 	bl	800dc58 <memset>
  if(hi2c->Instance==I2C3)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a21      	ldr	r2, [pc, #132]	; (80037cc <HAL_I2C_MspInit+0xb0>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d13b      	bne.n	80037c4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 800374c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003750:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8003752:	2300      	movs	r3, #0
 8003754:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003756:	f107 0314 	add.w	r3, r7, #20
 800375a:	4618      	mov	r0, r3
 800375c:	f004 f8c4 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d001      	beq.n	800376a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8003766:	f7ff ff4b 	bl	8003600 <Error_Handler>
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800376a:	4b19      	ldr	r3, [pc, #100]	; (80037d0 <HAL_I2C_MspInit+0xb4>)
 800376c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800376e:	4a18      	ldr	r2, [pc, #96]	; (80037d0 <HAL_I2C_MspInit+0xb4>)
 8003770:	f043 0304 	orr.w	r3, r3, #4
 8003774:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003776:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_I2C_MspInit+0xb4>)
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	f003 0304 	and.w	r3, r3, #4
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PC0     ------> I2C3_SCL
    PC1     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003782:	2303      	movs	r3, #3
 8003784:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003788:	2312      	movs	r3, #18
 800378a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800378e:	2301      	movs	r3, #1
 8003790:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003794:	2303      	movs	r3, #3
 8003796:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800379a:	2304      	movs	r3, #4
 800379c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80037a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80037a4:	4619      	mov	r1, r3
 80037a6:	480b      	ldr	r0, [pc, #44]	; (80037d4 <HAL_I2C_MspInit+0xb8>)
 80037a8:	f002 f8da 	bl	8005960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80037ac:	4b08      	ldr	r3, [pc, #32]	; (80037d0 <HAL_I2C_MspInit+0xb4>)
 80037ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b0:	4a07      	ldr	r2, [pc, #28]	; (80037d0 <HAL_I2C_MspInit+0xb4>)
 80037b2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037b6:	6593      	str	r3, [r2, #88]	; 0x58
 80037b8:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_I2C_MspInit+0xb4>)
 80037ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80037c4:	bf00      	nop
 80037c6:	37b0      	adds	r7, #176	; 0xb0
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}
 80037cc:	40005c00 	.word	0x40005c00
 80037d0:	40021000 	.word	0x40021000
 80037d4:	48000800 	.word	0x48000800

080037d8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e0:	f107 0314 	add.w	r3, r7, #20
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	605a      	str	r2, [r3, #4]
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	60da      	str	r2, [r3, #12]
 80037ee:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a17      	ldr	r2, [pc, #92]	; (8003854 <HAL_QSPI_MspInit+0x7c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d128      	bne.n	800384c <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80037fa:	4b17      	ldr	r3, [pc, #92]	; (8003858 <HAL_QSPI_MspInit+0x80>)
 80037fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037fe:	4a16      	ldr	r2, [pc, #88]	; (8003858 <HAL_QSPI_MspInit+0x80>)
 8003800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003804:	6513      	str	r3, [r2, #80]	; 0x50
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <HAL_QSPI_MspInit+0x80>)
 8003808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380e:	613b      	str	r3, [r7, #16]
 8003810:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003812:	4b11      	ldr	r3, [pc, #68]	; (8003858 <HAL_QSPI_MspInit+0x80>)
 8003814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003816:	4a10      	ldr	r2, [pc, #64]	; (8003858 <HAL_QSPI_MspInit+0x80>)
 8003818:	f043 0310 	orr.w	r3, r3, #16
 800381c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <HAL_QSPI_MspInit+0x80>)
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	f003 0310 	and.w	r3, r3, #16
 8003826:	60fb      	str	r3, [r7, #12]
 8003828:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 800382a:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800382e:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003830:	2302      	movs	r3, #2
 8003832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003838:	2303      	movs	r3, #3
 800383a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800383c:	230a      	movs	r3, #10
 800383e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003840:	f107 0314 	add.w	r3, r7, #20
 8003844:	4619      	mov	r1, r3
 8003846:	4805      	ldr	r0, [pc, #20]	; (800385c <HAL_QSPI_MspInit+0x84>)
 8003848:	f002 f88a 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 800384c:	bf00      	nop
 800384e:	3728      	adds	r7, #40	; 0x28
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}
 8003854:	a0001000 	.word	0xa0001000
 8003858:	40021000 	.word	0x40021000
 800385c:	48001000 	.word	0x48001000

08003860 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a0a      	ldr	r2, [pc, #40]	; (8003898 <HAL_RNG_MspInit+0x38>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d10b      	bne.n	800388a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <HAL_RNG_MspInit+0x3c>)
 8003874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003876:	4a09      	ldr	r2, [pc, #36]	; (800389c <HAL_RNG_MspInit+0x3c>)
 8003878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800387c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800387e:	4b07      	ldr	r3, [pc, #28]	; (800389c <HAL_RNG_MspInit+0x3c>)
 8003880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800388a:	bf00      	nop
 800388c:	3714      	adds	r7, #20
 800388e:	46bd      	mov	sp, r7
 8003890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003894:	4770      	bx	lr
 8003896:	bf00      	nop
 8003898:	50060800 	.word	0x50060800
 800389c:	40021000 	.word	0x40021000

080038a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b0a4      	sub	sp, #144	; 0x90
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038a8:	f107 0308 	add.w	r3, r7, #8
 80038ac:	2288      	movs	r2, #136	; 0x88
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f00a f9d1 	bl	800dc58 <memset>
  if(hrtc->Instance==RTC)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_RTC_MspInit+0x6c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d120      	bne.n	8003902 <HAL_RTC_MspInit+0x62>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80038c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80038c4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80038c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	4618      	mov	r0, r3
 80038d4:	f004 f808 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80038de:	f7ff fe8f 	bl	8003600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <HAL_RTC_MspInit+0x70>)
 80038e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e8:	4a09      	ldr	r2, [pc, #36]	; (8003910 <HAL_RTC_MspInit+0x70>)
 80038ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_WKUP_IRQn, 2, 0);
 80038f2:	2200      	movs	r2, #0
 80038f4:	2102      	movs	r1, #2
 80038f6:	2003      	movs	r0, #3
 80038f8:	f001 fead 	bl	8005656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_WKUP_IRQn);
 80038fc:	2003      	movs	r0, #3
 80038fe:	f001 fec6 	bl	800568e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003902:	bf00      	nop
 8003904:	3790      	adds	r7, #144	; 0x90
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
 800390a:	bf00      	nop
 800390c:	40002800 	.word	0x40002800
 8003910:	40021000 	.word	0x40021000

08003914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b08a      	sub	sp, #40	; 0x28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391c:	f107 0314 	add.w	r3, r7, #20
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]
 8003924:	605a      	str	r2, [r3, #4]
 8003926:	609a      	str	r2, [r3, #8]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a17      	ldr	r2, [pc, #92]	; (8003990 <HAL_SPI_MspInit+0x7c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d128      	bne.n	8003988 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003936:	4b17      	ldr	r3, [pc, #92]	; (8003994 <HAL_SPI_MspInit+0x80>)
 8003938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393a:	4a16      	ldr	r2, [pc, #88]	; (8003994 <HAL_SPI_MspInit+0x80>)
 800393c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003940:	6593      	str	r3, [r2, #88]	; 0x58
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <HAL_SPI_MspInit+0x80>)
 8003944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394a:	613b      	str	r3, [r7, #16]
 800394c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_SPI_MspInit+0x80>)
 8003950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_SPI_MspInit+0x80>)
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_SPI_MspInit+0x80>)
 800395c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8003966:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800396a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003978:	2306      	movs	r3, #6
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	4619      	mov	r1, r3
 8003982:	4805      	ldr	r0, [pc, #20]	; (8003998 <HAL_SPI_MspInit+0x84>)
 8003984:	f001 ffec 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003988:	bf00      	nop
 800398a:	3728      	adds	r7, #40	; 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40003c00 	.word	0x40003c00
 8003994:	40021000 	.word	0x40021000
 8003998:	48000800 	.word	0x48000800

0800399c <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI3)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a08      	ldr	r2, [pc, #32]	; (80039cc <HAL_SPI_MspDeInit+0x30>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d10a      	bne.n	80039c4 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI3_MspDeInit 0 */

  /* USER CODE END SPI3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI3_CLK_DISABLE();
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <HAL_SPI_MspDeInit+0x34>)
 80039b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b2:	4a07      	ldr	r2, [pc, #28]	; (80039d0 <HAL_SPI_MspDeInit+0x34>)
 80039b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039b8:	6593      	str	r3, [r2, #88]	; 0x58
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    HAL_GPIO_DeInit(GPIOC, INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin);
 80039ba:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80039be:	4805      	ldr	r0, [pc, #20]	; (80039d4 <HAL_SPI_MspDeInit+0x38>)
 80039c0:	f002 f978 	bl	8005cb4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI3_MspDeInit 1 */

  /* USER CODE END SPI3_MspDeInit 1 */
  }

}
 80039c4:	bf00      	nop
 80039c6:	3708      	adds	r7, #8
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}
 80039cc:	40003c00 	.word	0x40003c00
 80039d0:	40021000 	.word	0x40021000
 80039d4:	48000800 	.word	0x48000800

080039d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a0d      	ldr	r2, [pc, #52]	; (8003a1c <HAL_TIM_Base_MspInit+0x44>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d113      	bne.n	8003a12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039ea:	4b0d      	ldr	r3, [pc, #52]	; (8003a20 <HAL_TIM_Base_MspInit+0x48>)
 80039ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ee:	4a0c      	ldr	r2, [pc, #48]	; (8003a20 <HAL_TIM_Base_MspInit+0x48>)
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	6593      	str	r3, [r2, #88]	; 0x58
 80039f6:	4b0a      	ldr	r3, [pc, #40]	; (8003a20 <HAL_TIM_Base_MspInit+0x48>)
 80039f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fa:	f003 0310 	and.w	r3, r3, #16
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 1, 0);
 8003a02:	2200      	movs	r2, #0
 8003a04:	2101      	movs	r1, #1
 8003a06:	2036      	movs	r0, #54	; 0x36
 8003a08:	f001 fe25 	bl	8005656 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a0c:	2036      	movs	r0, #54	; 0x36
 8003a0e:	f001 fe3e 	bl	800568e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003a12:	bf00      	nop
 8003a14:	3710      	adds	r7, #16
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	40001000 	.word	0x40001000
 8003a20:	40021000 	.word	0x40021000

08003a24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b0ae      	sub	sp, #184	; 0xb8
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003a30:	2200      	movs	r2, #0
 8003a32:	601a      	str	r2, [r3, #0]
 8003a34:	605a      	str	r2, [r3, #4]
 8003a36:	609a      	str	r2, [r3, #8]
 8003a38:	60da      	str	r2, [r3, #12]
 8003a3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a3c:	f107 031c 	add.w	r3, r7, #28
 8003a40:	2288      	movs	r2, #136	; 0x88
 8003a42:	2100      	movs	r1, #0
 8003a44:	4618      	mov	r0, r3
 8003a46:	f00a f907 	bl	800dc58 <memset>
  if(huart->Instance==USART1)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a42      	ldr	r2, [pc, #264]	; (8003b58 <HAL_UART_MspInit+0x134>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d13b      	bne.n	8003acc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a54:	2301      	movs	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	4618      	mov	r0, r3
 8003a62:	f003 ff41 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a6c:	f7ff fdc8 	bl	8003600 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a70:	4b3a      	ldr	r3, [pc, #232]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003a72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a74:	4a39      	ldr	r2, [pc, #228]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003a76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a7a:	6613      	str	r3, [r2, #96]	; 0x60
 8003a7c:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003a7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a88:	4b34      	ldr	r3, [pc, #208]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003a8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a8c:	4a33      	ldr	r2, [pc, #204]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003a8e:	f043 0302 	orr.w	r3, r3, #2
 8003a92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a94:	4b31      	ldr	r3, [pc, #196]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003a96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	617b      	str	r3, [r7, #20]
 8003a9e:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8003aa0:	23c0      	movs	r3, #192	; 0xc0
 8003aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003ab8:	2307      	movs	r3, #7
 8003aba:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003abe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	4826      	ldr	r0, [pc, #152]	; (8003b60 <HAL_UART_MspInit+0x13c>)
 8003ac6:	f001 ff4b 	bl	8005960 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003aca:	e040      	b.n	8003b4e <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART3)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <HAL_UART_MspInit+0x140>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d13b      	bne.n	8003b4e <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003ad6:	2304      	movs	r3, #4
 8003ad8:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003ada:	2300      	movs	r3, #0
 8003adc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ade:	f107 031c 	add.w	r3, r7, #28
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	f003 ff00 	bl	80078e8 <HAL_RCCEx_PeriphCLKConfig>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <HAL_UART_MspInit+0xce>
      Error_Handler();
 8003aee:	f7ff fd87 	bl	8003600 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003af2:	4b1a      	ldr	r3, [pc, #104]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003af6:	4a19      	ldr	r2, [pc, #100]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003af8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003afc:	6593      	str	r3, [r2, #88]	; 0x58
 8003afe:	4b17      	ldr	r3, [pc, #92]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b06:	613b      	str	r3, [r7, #16]
 8003b08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b0a:	4b14      	ldr	r3, [pc, #80]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b0e:	4a13      	ldr	r2, [pc, #76]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003b10:	f043 0308 	orr.w	r3, r3, #8
 8003b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b16:	4b11      	ldr	r3, [pc, #68]	; (8003b5c <HAL_UART_MspInit+0x138>)
 8003b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	60fb      	str	r3, [r7, #12]
 8003b20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 8003b22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003b26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b36:	2303      	movs	r3, #3
 8003b38:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003b3c:	2307      	movs	r3, #7
 8003b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b42:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8003b46:	4619      	mov	r1, r3
 8003b48:	4807      	ldr	r0, [pc, #28]	; (8003b68 <HAL_UART_MspInit+0x144>)
 8003b4a:	f001 ff09 	bl	8005960 <HAL_GPIO_Init>
}
 8003b4e:	bf00      	nop
 8003b50:	37b8      	adds	r7, #184	; 0xb8
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	40013800 	.word	0x40013800
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	48000400 	.word	0x48000400
 8003b64:	40004800 	.word	0x40004800
 8003b68:	48000c00 	.word	0x48000c00

08003b6c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08a      	sub	sp, #40	; 0x28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b74:	f107 0314 	add.w	r3, r7, #20
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
 8003b7c:	605a      	str	r2, [r3, #4]
 8003b7e:	609a      	str	r2, [r3, #8]
 8003b80:	60da      	str	r2, [r3, #12]
 8003b82:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b8c:	d154      	bne.n	8003c38 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	4b2c      	ldr	r3, [pc, #176]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	4a2b      	ldr	r2, [pc, #172]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003b94:	f043 0301 	orr.w	r3, r3, #1
 8003b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b9a:	4b29      	ldr	r3, [pc, #164]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 8003ba6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003baa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bac:	2300      	movs	r3, #0
 8003bae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	4619      	mov	r1, r3
 8003bba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bbe:	f001 fecf 	bl	8005960 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8003bc2:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8003bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8003bd4:	230a      	movs	r3, #10
 8003bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bd8:	f107 0314 	add.w	r3, r7, #20
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003be2:	f001 febd 	bl	8005960 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003be6:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	4a15      	ldr	r2, [pc, #84]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003bec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d114      	bne.n	8003c34 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c0a:	4b0d      	ldr	r3, [pc, #52]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c14:	6593      	str	r3, [r2, #88]	; 0x58
 8003c16:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8003c22:	f002 ff95 	bl	8006b50 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c26:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003c28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2a:	4a05      	ldr	r2, [pc, #20]	; (8003c40 <HAL_PCD_MspInit+0xd4>)
 8003c2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c30:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003c32:	e001      	b.n	8003c38 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8003c34:	f002 ff8c 	bl	8006b50 <HAL_PWREx_EnableVddUSB>
}
 8003c38:	bf00      	nop
 8003c3a:	3728      	adds	r7, #40	; 0x28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40021000 	.word	0x40021000

08003c44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c44:	b480      	push	{r7}
 8003c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c48:	e7fe      	b.n	8003c48 <NMI_Handler+0x4>

08003c4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c4e:	e7fe      	b.n	8003c4e <HardFault_Handler+0x4>

08003c50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c54:	e7fe      	b.n	8003c54 <MemManage_Handler+0x4>

08003c56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c56:	b480      	push	{r7}
 8003c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c5a:	e7fe      	b.n	8003c5a <BusFault_Handler+0x4>

08003c5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c60:	e7fe      	b.n	8003c60 <UsageFault_Handler+0x4>

08003c62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003c62:	b480      	push	{r7}
 8003c64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003c66:	bf00      	nop
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c70:	b480      	push	{r7}
 8003c72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c74:	bf00      	nop
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003c82:	bf00      	nop
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr

08003c8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c90:	f001 fbc2 	bl	8005418 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003c94:	bf00      	nop
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <RTC_WKUP_IRQHandler>:

/**
  * @brief This function handles RTC wake-up interrupt through EXTI line 20.
  */
void RTC_WKUP_IRQHandler(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_WKUP_IRQn 0 */

  /* USER CODE END RTC_WKUP_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 8003c9c:	4802      	ldr	r0, [pc, #8]	; (8003ca8 <RTC_WKUP_IRQHandler+0x10>)
 8003c9e:	f004 fe31 	bl	8008904 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_WKUP_IRQn 1 */

  /* USER CODE END RTC_WKUP_IRQn 1 */
}
 8003ca2:	bf00      	nop
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	200002d8 	.word	0x200002d8

08003cac <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ISM43362_DRDY_EXTI1_Pin);
 8003cb0:	2002      	movs	r0, #2
 8003cb2:	f002 f923 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003cb6:	bf00      	nop
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPSGRF_915_GPIO3_EXTI5_Pin);
 8003cbe:	2020      	movs	r0, #32
 8003cc0:	f002 f91c 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SPBTLE_RF_IRQ_EXTI6_Pin);
 8003cc4:	2040      	movs	r0, #64	; 0x40
 8003cc6:	f002 f919 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(VL53L0X_GPIO1_EXTI7_Pin);
 8003cca:	2080      	movs	r0, #128	; 0x80
 8003ccc:	f002 f916 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM3MDL_DRDY_EXTI8_Pin);
 8003cd0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8003cd4:	f002 f912 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003cd8:	bf00      	nop
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LPS22HB_INT_DRDY_EXTI0_Pin);
 8003ce0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8003ce4:	f002 f90a 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LSM6DSL_INT1_EXTI11_Pin);
 8003ce8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003cec:	f002 f906 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BUTTON_EXTI13_Pin);
 8003cf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003cf4:	f002 f902 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ARD_D2_Pin);
 8003cf8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003cfc:	f002 f8fe 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(HTS221_DRDY_EXTI15_Pin);
 8003d00:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8003d04:	f002 f8fa 	bl	8005efc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003d08:	bf00      	nop
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d10:	4802      	ldr	r0, [pc, #8]	; (8003d1c <TIM6_DAC_IRQHandler+0x10>)
 8003d12:	f006 fa15 	bl	800a140 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d16:	bf00      	nop
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	bf00      	nop
 8003d1c:	20000360 	.word	0x20000360

08003d20 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
	return 1;
 8003d24:	2301      	movs	r3, #1
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <_kill>:

int _kill(int pid, int sig)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003d3a:	f009 ff17 	bl	800db6c <__errno>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2216      	movs	r2, #22
 8003d42:	601a      	str	r2, [r3, #0]
	return -1;
 8003d44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <_exit>:

void _exit (int status)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003d58:	f04f 31ff 	mov.w	r1, #4294967295
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f7ff ffe7 	bl	8003d30 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003d62:	e7fe      	b.n	8003d62 <_exit+0x12>

08003d64 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
 8003d74:	e00a      	b.n	8003d8c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003d76:	f3af 8000 	nop.w
 8003d7a:	4601      	mov	r1, r0
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	1c5a      	adds	r2, r3, #1
 8003d80:	60ba      	str	r2, [r7, #8]
 8003d82:	b2ca      	uxtb	r2, r1
 8003d84:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	617b      	str	r3, [r7, #20]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	429a      	cmp	r2, r3
 8003d92:	dbf0      	blt.n	8003d76 <_read+0x12>
	}

return len;
 8003d94:	687b      	ldr	r3, [r7, #4]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}

08003d9e <_close>:
	}
	return len;
}

int _close(int file)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
	return -1;
 8003da6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr

08003db6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
 8003dbe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003dc6:	605a      	str	r2, [r3, #4]
	return 0;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	370c      	adds	r7, #12
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr

08003dd6 <_isatty>:

int _isatty(int file)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
	return 1;
 8003dde:	2301      	movs	r3, #1
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	370c      	adds	r7, #12
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
	return 0;
 8003df8:	2300      	movs	r3, #0
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
	...

08003e08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e10:	4a14      	ldr	r2, [pc, #80]	; (8003e64 <_sbrk+0x5c>)
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <_sbrk+0x60>)
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e1c:	4b13      	ldr	r3, [pc, #76]	; (8003e6c <_sbrk+0x64>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d102      	bne.n	8003e2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e24:	4b11      	ldr	r3, [pc, #68]	; (8003e6c <_sbrk+0x64>)
 8003e26:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <_sbrk+0x68>)
 8003e28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e2a:	4b10      	ldr	r3, [pc, #64]	; (8003e6c <_sbrk+0x64>)
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4413      	add	r3, r2
 8003e32:	693a      	ldr	r2, [r7, #16]
 8003e34:	429a      	cmp	r2, r3
 8003e36:	d207      	bcs.n	8003e48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e38:	f009 fe98 	bl	800db6c <__errno>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	220c      	movs	r2, #12
 8003e40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e42:	f04f 33ff 	mov.w	r3, #4294967295
 8003e46:	e009      	b.n	8003e5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e48:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <_sbrk+0x64>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e4e:	4b07      	ldr	r3, [pc, #28]	; (8003e6c <_sbrk+0x64>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4413      	add	r3, r2
 8003e56:	4a05      	ldr	r2, [pc, #20]	; (8003e6c <_sbrk+0x64>)
 8003e58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20018000 	.word	0x20018000
 8003e68:	00000400 	.word	0x00000400
 8003e6c:	20001138 	.word	0x20001138
 8003e70:	20001898 	.word	0x20001898

08003e74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e78:	4b06      	ldr	r3, [pc, #24]	; (8003e94 <SystemInit+0x20>)
 8003e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7e:	4a05      	ldr	r2, [pc, #20]	; (8003e94 <SystemInit+0x20>)
 8003e80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e88:	bf00      	nop
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e9c:	f7ff ffea 	bl	8003e74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ea0:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ea2:	490d      	ldr	r1, [pc, #52]	; (8003ed8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <LoopForever+0xe>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea8:	e002      	b.n	8003eb0 <LoopCopyDataInit>

08003eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eae:	3304      	adds	r3, #4

08003eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb4:	d3f9      	bcc.n	8003eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eb8:	4c0a      	ldr	r4, [pc, #40]	; (8003ee4 <LoopForever+0x16>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ebc:	e001      	b.n	8003ec2 <LoopFillZerobss>

08003ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec0:	3204      	adds	r2, #4

08003ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ec6:	f009 fe57 	bl	800db78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eca:	f7fe fb83 	bl	80025d4 <main>

08003ece <LoopForever>:

LoopForever:
    b LoopForever
 8003ece:	e7fe      	b.n	8003ece <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ed0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed8:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8003edc:	08012e50 	.word	0x08012e50
  ldr r2, =_sbss
 8003ee0:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8003ee4:	20001898 	.word	0x20001898

08003ee8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ee8:	e7fe      	b.n	8003ee8 <ADC1_2_IRQHandler>

08003eea <Hex2Num>:
  * @param  a: character to convert
  * @retval integer value.
  */

static  uint8_t Hex2Num(char a)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	71fb      	strb	r3, [r7, #7]
    if (a >= '0' && a <= '9') {                             /* Char is num */
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	2b2f      	cmp	r3, #47	; 0x2f
 8003ef8:	d906      	bls.n	8003f08 <Hex2Num+0x1e>
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	2b39      	cmp	r3, #57	; 0x39
 8003efe:	d803      	bhi.n	8003f08 <Hex2Num+0x1e>
        return a - '0';
 8003f00:	79fb      	ldrb	r3, [r7, #7]
 8003f02:	3b30      	subs	r3, #48	; 0x30
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e014      	b.n	8003f32 <Hex2Num+0x48>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	2b60      	cmp	r3, #96	; 0x60
 8003f0c:	d906      	bls.n	8003f1c <Hex2Num+0x32>
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	2b66      	cmp	r3, #102	; 0x66
 8003f12:	d803      	bhi.n	8003f1c <Hex2Num+0x32>
        return (a - 'a') + 10;
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	3b57      	subs	r3, #87	; 0x57
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	e00a      	b.n	8003f32 <Hex2Num+0x48>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 8003f1c:	79fb      	ldrb	r3, [r7, #7]
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d906      	bls.n	8003f30 <Hex2Num+0x46>
 8003f22:	79fb      	ldrb	r3, [r7, #7]
 8003f24:	2b46      	cmp	r3, #70	; 0x46
 8003f26:	d803      	bhi.n	8003f30 <Hex2Num+0x46>
        return (a - 'A') + 10;
 8003f28:	79fb      	ldrb	r3, [r7, #7]
 8003f2a:	3b37      	subs	r3, #55	; 0x37
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	e000      	b.n	8003f32 <Hex2Num+0x48>
    }

    return 0;
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <ParseHexNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval Hex value.
  */
static uint32_t ParseHexNumber(char* ptr, uint8_t* cnt)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b084      	sub	sp, #16
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
    uint32_t sum = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	60fb      	str	r3, [r7, #12]
    uint8_t i = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	72fb      	strb	r3, [r7, #11]

    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8003f50:	e012      	b.n	8003f78 <ParseHexNumber+0x3a>
        sum <<= 4;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]
        sum += Hex2Num(*ptr);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7ff ffc4 	bl	8003eea <Hex2Num>
 8003f62:	4603      	mov	r3, r0
 8003f64:	461a      	mov	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4413      	add	r3, r2
 8003f6a:	60fb      	str	r3, [r7, #12]
        ptr++;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	607b      	str	r3, [r7, #4]
        i++;
 8003f72:	7afb      	ldrb	r3, [r7, #11]
 8003f74:	3301      	adds	r3, #1
 8003f76:	72fb      	strb	r3, [r7, #11]
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b2f      	cmp	r3, #47	; 0x2f
 8003f7e:	d903      	bls.n	8003f88 <ParseHexNumber+0x4a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	2b39      	cmp	r3, #57	; 0x39
 8003f86:	d9e4      	bls.n	8003f52 <ParseHexNumber+0x14>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b60      	cmp	r3, #96	; 0x60
 8003f8e:	d903      	bls.n	8003f98 <ParseHexNumber+0x5a>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	2b66      	cmp	r3, #102	; 0x66
 8003f96:	d9dc      	bls.n	8003f52 <ParseHexNumber+0x14>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b40      	cmp	r3, #64	; 0x40
 8003f9e:	d903      	bls.n	8003fa8 <ParseHexNumber+0x6a>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b46      	cmp	r3, #70	; 0x46
 8003fa6:	d9d4      	bls.n	8003f52 <ParseHexNumber+0x14>
    }

    if (cnt != NULL) {                               		/* Save number of characters used for number */
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <ParseHexNumber+0x76>
        *cnt = i;
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	7afa      	ldrb	r2, [r7, #11]
 8003fb2:	701a      	strb	r2, [r3, #0]
    }
    return sum;                                        		/* Return number */
 8003fb4:	68fb      	ldr	r3, [r7, #12]
}
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b085      	sub	sp, #20
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
 8003fc6:	6039      	str	r1, [r7, #0]
    uint8_t minus = 0, i = 0;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	73fb      	strb	r3, [r7, #15]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	73bb      	strb	r3, [r7, #14]
    int32_t sum = 0;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	60bb      	str	r3, [r7, #8]

    if (*ptr == '-') {                                		/* Check for minus character */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b2d      	cmp	r3, #45	; 0x2d
 8003fda:	d119      	bne.n	8004010 <ParseNumber+0x52>
        minus = 1;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
        ptr++;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	3301      	adds	r3, #1
 8003fe4:	607b      	str	r3, [r7, #4]
        i++;
 8003fe6:	7bbb      	ldrb	r3, [r7, #14]
 8003fe8:	3301      	adds	r3, #1
 8003fea:	73bb      	strb	r3, [r7, #14]
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8003fec:	e010      	b.n	8004010 <ParseNumber+0x52>
        sum = 10 * sum + CHAR2NUM(*ptr);
 8003fee:	68ba      	ldr	r2, [r7, #8]
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	3b30      	subs	r3, #48	; 0x30
 8004000:	4413      	add	r3, r2
 8004002:	60bb      	str	r3, [r7, #8]
        ptr++;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	3301      	adds	r3, #1
 8004008:	607b      	str	r3, [r7, #4]
        i++;
 800400a:	7bbb      	ldrb	r3, [r7, #14]
 800400c:	3301      	adds	r3, #1
 800400e:	73bb      	strb	r3, [r7, #14]
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b2f      	cmp	r3, #47	; 0x2f
 8004016:	d903      	bls.n	8004020 <ParseNumber+0x62>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	781b      	ldrb	r3, [r3, #0]
 800401c:	2b39      	cmp	r3, #57	; 0x39
 800401e:	d9e6      	bls.n	8003fee <ParseNumber+0x30>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <ParseNumber+0x6e>
        *cnt = i;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	7bba      	ldrb	r2, [r7, #14]
 800402a:	701a      	strb	r2, [r3, #0]
    }
    if (minus) {                                    		/* Minus detected */
 800402c:	7bfb      	ldrb	r3, [r7, #15]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d002      	beq.n	8004038 <ParseNumber+0x7a>
        return 0 - sum;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	425b      	negs	r3, r3
 8004036:	e000      	b.n	800403a <ParseNumber+0x7c>
    }
    return sum;                                       		/* Return number */
 8004038:	68bb      	ldr	r3, [r7, #8]
}
 800403a:	4618      	mov	r0, r3
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b084      	sub	sp, #16
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
 800404e:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 8004050:	2300      	movs	r3, #0
 8004052:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 8004054:	e019      	b.n	800408a <ParseMAC+0x44>
    hexcnt = 1;
 8004056:	2301      	movs	r3, #1
 8004058:	73bb      	strb	r3, [r7, #14]
    if(*ptr != ':')
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	2b3a      	cmp	r3, #58	; 0x3a
 8004060:	d00e      	beq.n	8004080 <ParseMAC+0x3a>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 8004062:	f107 030e 	add.w	r3, r7, #14
 8004066:	4619      	mov	r1, r3
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f7ff ff68 	bl	8003f3e <ParseHexNumber>
 800406e:	4601      	mov	r1, r0
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	73fa      	strb	r2, [r7, #15]
 8004076:	461a      	mov	r2, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	4413      	add	r3, r2
 800407c:	b2ca      	uxtb	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 8004080:	7bbb      	ldrb	r3, [r7, #14]
 8004082:	461a      	mov	r2, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4413      	add	r3, r2
 8004088:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	781b      	ldrb	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d1e1      	bne.n	8004056 <ParseMAC+0x10>
  }
}
 8004092:	bf00      	nop
 8004094:	bf00      	nop
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
  uint8_t hexnum = 0, hexcnt;
 80040a6:	2300      	movs	r3, #0
 80040a8:	73fb      	strb	r3, [r7, #15]

  while(* ptr) {
 80040aa:	e019      	b.n	80040e0 <ParseIP+0x44>
    hexcnt = 1;
 80040ac:	2301      	movs	r3, #1
 80040ae:	73bb      	strb	r3, [r7, #14]
    if(*ptr != '.')
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	2b2e      	cmp	r3, #46	; 0x2e
 80040b6:	d00e      	beq.n	80040d6 <ParseIP+0x3a>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 80040b8:	f107 030e 	add.w	r3, r7, #14
 80040bc:	4619      	mov	r1, r3
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7ff ff7d 	bl	8003fbe <ParseNumber>
 80040c4:	4601      	mov	r1, r0
 80040c6:	7bfb      	ldrb	r3, [r7, #15]
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	73fa      	strb	r2, [r7, #15]
 80040cc:	461a      	mov	r2, r3
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	4413      	add	r3, r2
 80040d2:	b2ca      	uxtb	r2, r1
 80040d4:	701a      	strb	r2, [r3, #0]
    }
    ptr = ptr + hexcnt;
 80040d6:	7bbb      	ldrb	r3, [r7, #14]
 80040d8:	461a      	mov	r2, r3
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	607b      	str	r3, [r7, #4]
  while(* ptr) {
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1e1      	bne.n	80040ac <ParseIP+0x10>
  }
}
 80040e8:	bf00      	nop
 80040ea:	bf00      	nop
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
	...

080040f4 <AT_ParseInfo>:
  * @param  Obj: pointer to module handle
  * @param  ptr: pointer to string
  * @retval None.
  */
static void AT_ParseInfo(ES_WIFIObject_t *Obj,uint8_t *pdata)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  char *ptr;
  uint8_t num = 0;
 80040fe:	2300      	movs	r3, #0
 8004100:	72fb      	strb	r3, [r7, #11]

  ptr = strtok((char *)pdata + 2, ",");
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	3302      	adds	r3, #2
 8004106:	4934      	ldr	r1, [pc, #208]	; (80041d8 <AT_ParseInfo+0xe4>)
 8004108:	4618      	mov	r0, r3
 800410a:	f00a fcc3 	bl	800ea94 <strtok>
 800410e:	60f8      	str	r0, [r7, #12]

  while (ptr != NULL){
 8004110:	e05a      	b.n	80041c8 <AT_ParseInfo+0xd4>
    switch (num++) {
 8004112:	7afb      	ldrb	r3, [r7, #11]
 8004114:	1c5a      	adds	r2, r3, #1
 8004116:	72fa      	strb	r2, [r7, #11]
 8004118:	2b06      	cmp	r3, #6
 800411a:	d84f      	bhi.n	80041bc <AT_ParseInfo+0xc8>
 800411c:	a201      	add	r2, pc, #4	; (adr r2, 8004124 <AT_ParseInfo+0x30>)
 800411e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004122:	bf00      	nop
 8004124:	08004141 	.word	0x08004141
 8004128:	0800414f 	.word	0x0800414f
 800412c:	0800415f 	.word	0x0800415f
 8004130:	0800416f 	.word	0x0800416f
 8004134:	0800417f 	.word	0x0800417f
 8004138:	0800418f 	.word	0x0800418f
 800413c:	080041a3 	.word	0x080041a3
    case 0:
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	68f9      	ldr	r1, [r7, #12]
 8004146:	4618      	mov	r0, r3
 8004148:	f00a fc7b 	bl	800ea42 <strncpy>
      break;
 800414c:	e037      	b.n	80041be <AT_ParseInfo+0xca>

    case 1:
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	3320      	adds	r3, #32
 8004152:	2218      	movs	r2, #24
 8004154:	68f9      	ldr	r1, [r7, #12]
 8004156:	4618      	mov	r0, r3
 8004158:	f00a fc73 	bl	800ea42 <strncpy>
      break;
 800415c:	e02f      	b.n	80041be <AT_ParseInfo+0xca>

    case 2:
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3338      	adds	r3, #56	; 0x38
 8004162:	2210      	movs	r2, #16
 8004164:	68f9      	ldr	r1, [r7, #12]
 8004166:	4618      	mov	r0, r3
 8004168:	f00a fc6b 	bl	800ea42 <strncpy>
      break;
 800416c:	e027      	b.n	80041be <AT_ParseInfo+0xca>

    case 3:
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	3348      	adds	r3, #72	; 0x48
 8004172:	2210      	movs	r2, #16
 8004174:	68f9      	ldr	r1, [r7, #12]
 8004176:	4618      	mov	r0, r3
 8004178:	f00a fc63 	bl	800ea42 <strncpy>
      break;
 800417c:	e01f      	b.n	80041be <AT_ParseInfo+0xca>

    case 4:
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3358      	adds	r3, #88	; 0x58
 8004182:	2210      	movs	r2, #16
 8004184:	68f9      	ldr	r1, [r7, #12]
 8004186:	4618      	mov	r0, r3
 8004188:	f00a fc5b 	bl	800ea42 <strncpy>
      break;
 800418c:	e017      	b.n	80041be <AT_ParseInfo+0xca>

    case 5:
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 800418e:	2100      	movs	r1, #0
 8004190:	68f8      	ldr	r0, [r7, #12]
 8004192:	f7ff ff14 	bl	8003fbe <ParseNumber>
 8004196:	4603      	mov	r3, r0
 8004198:	461a      	mov	r2, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      break;
 80041a0:	e00d      	b.n	80041be <AT_ParseInfo+0xca>

    case 6:
      ptr = strtok(ptr, "\r");
 80041a2:	490e      	ldr	r1, [pc, #56]	; (80041dc <AT_ParseInfo+0xe8>)
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f00a fc75 	bl	800ea94 <strtok>
 80041aa:	60f8      	str	r0, [r7, #12]
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3368      	adds	r3, #104	; 0x68
 80041b0:	2220      	movs	r2, #32
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	4618      	mov	r0, r3
 80041b6:	f00a fc44 	bl	800ea42 <strncpy>
      break;
 80041ba:	e000      	b.n	80041be <AT_ParseInfo+0xca>

    default: break;
 80041bc:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 80041be:	4906      	ldr	r1, [pc, #24]	; (80041d8 <AT_ParseInfo+0xe4>)
 80041c0:	2000      	movs	r0, #0
 80041c2:	f00a fc67 	bl	800ea94 <strtok>
 80041c6:	60f8      	str	r0, [r7, #12]
  while (ptr != NULL){
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1a1      	bne.n	8004112 <AT_ParseInfo+0x1e>
  }
}
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}
 80041d8:	080123ac 	.word	0x080123ac
 80041dc:	080123b0 	.word	0x080123b0

080041e0 <AT_ParseConnSettings>:
  * @param  NetSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseConnSettings(char *pdata, ES_WIFI_Network_t *NetSettings)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b084      	sub	sp, #16
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 80041ea:	2300      	movs	r3, #0
 80041ec:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	3302      	adds	r3, #2
 80041f2:	4952      	ldr	r1, [pc, #328]	; (800433c <AT_ParseConnSettings+0x15c>)
 80041f4:	4618      	mov	r0, r3
 80041f6:	f00a fc4d 	bl	800ea94 <strtok>
 80041fa:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 80041fc:	e095      	b.n	800432a <AT_ParseConnSettings+0x14a>
    switch (num++) {
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	73fa      	strb	r2, [r7, #15]
 8004204:	2b0b      	cmp	r3, #11
 8004206:	d87f      	bhi.n	8004308 <AT_ParseConnSettings+0x128>
 8004208:	a201      	add	r2, pc, #4	; (adr r2, 8004210 <AT_ParseConnSettings+0x30>)
 800420a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800420e:	bf00      	nop
 8004210:	08004241 	.word	0x08004241
 8004214:	0800424f 	.word	0x0800424f
 8004218:	0800425f 	.word	0x0800425f
 800421c:	08004273 	.word	0x08004273
 8004220:	08004287 	.word	0x08004287
 8004224:	0800429b 	.word	0x0800429b
 8004228:	080042a9 	.word	0x080042a9
 800422c:	080042b7 	.word	0x080042b7
 8004230:	080042c5 	.word	0x080042c5
 8004234:	080042d3 	.word	0x080042d3
 8004238:	080042e1 	.word	0x080042e1
 800423c:	080042f5 	.word	0x080042f5
    case 0:
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	2221      	movs	r2, #33	; 0x21
 8004244:	68b9      	ldr	r1, [r7, #8]
 8004246:	4618      	mov	r0, r3
 8004248:	f00a fbfb 	bl	800ea42 <strncpy>
      break;
 800424c:	e05d      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 1:
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	3321      	adds	r3, #33	; 0x21
 8004252:	2221      	movs	r2, #33	; 0x21
 8004254:	68b9      	ldr	r1, [r7, #8]
 8004256:	4618      	mov	r0, r3
 8004258:	f00a fbf3 	bl	800ea42 <strncpy>
      break;
 800425c:	e055      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 2:
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 800425e:	2100      	movs	r1, #0
 8004260:	68b8      	ldr	r0, [r7, #8]
 8004262:	f7ff feac 	bl	8003fbe <ParseNumber>
 8004266:	4603      	mov	r3, r0
 8004268:	b2da      	uxtb	r2, r3
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        break;
 8004270:	e04b      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 3:
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8004272:	2100      	movs	r1, #0
 8004274:	68b8      	ldr	r0, [r7, #8]
 8004276:	f7ff fea2 	bl	8003fbe <ParseNumber>
 800427a:	4603      	mov	r3, r0
 800427c:	b2da      	uxtb	r2, r3
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      break;
 8004284:	e041      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 4:
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8004286:	2100      	movs	r1, #0
 8004288:	68b8      	ldr	r0, [r7, #8]
 800428a:	f7ff fe98 	bl	8003fbe <ParseNumber>
 800428e:	4603      	mov	r3, r0
 8004290:	b2da      	uxtb	r2, r3
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
      break;
 8004298:	e037      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 5:
      ParseIP(ptr, NetSettings->IP_Addr);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	3348      	adds	r3, #72	; 0x48
 800429e:	4619      	mov	r1, r3
 80042a0:	68b8      	ldr	r0, [r7, #8]
 80042a2:	f7ff fefb 	bl	800409c <ParseIP>
      break;
 80042a6:	e030      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 6:
      ParseIP(ptr, NetSettings->IP_Mask);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	334c      	adds	r3, #76	; 0x4c
 80042ac:	4619      	mov	r1, r3
 80042ae:	68b8      	ldr	r0, [r7, #8]
 80042b0:	f7ff fef4 	bl	800409c <ParseIP>
      break;
 80042b4:	e029      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 7:
      ParseIP(ptr, NetSettings->Gateway_Addr);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	3350      	adds	r3, #80	; 0x50
 80042ba:	4619      	mov	r1, r3
 80042bc:	68b8      	ldr	r0, [r7, #8]
 80042be:	f7ff feed 	bl	800409c <ParseIP>
      break;
 80042c2:	e022      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 8:
      ParseIP(ptr, NetSettings->DNS1);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	3354      	adds	r3, #84	; 0x54
 80042c8:	4619      	mov	r1, r3
 80042ca:	68b8      	ldr	r0, [r7, #8]
 80042cc:	f7ff fee6 	bl	800409c <ParseIP>
      break;
 80042d0:	e01b      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 9:
      ParseIP(ptr, NetSettings->DNS2);
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	3358      	adds	r3, #88	; 0x58
 80042d6:	4619      	mov	r1, r3
 80042d8:	68b8      	ldr	r0, [r7, #8]
 80042da:	f7ff fedf 	bl	800409c <ParseIP>
      break;
 80042de:	e014      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 10:
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 80042e0:	2100      	movs	r1, #0
 80042e2:	68b8      	ldr	r0, [r7, #8]
 80042e4:	f7ff fe6b 	bl	8003fbe <ParseNumber>
 80042e8:	4603      	mov	r3, r0
 80042ea:	b2da      	uxtb	r2, r3
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      break;
 80042f2:	e00a      	b.n	800430a <AT_ParseConnSettings+0x12a>

    case 11:
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 80042f4:	2100      	movs	r1, #0
 80042f6:	68b8      	ldr	r0, [r7, #8]
 80042f8:	f7ff fe61 	bl	8003fbe <ParseNumber>
 80042fc:	4603      	mov	r3, r0
 80042fe:	b2da      	uxtb	r2, r3
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
      break;
 8004306:	e000      	b.n	800430a <AT_ParseConnSettings+0x12a>

    default:
      break;
 8004308:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 800430a:	490c      	ldr	r1, [pc, #48]	; (800433c <AT_ParseConnSettings+0x15c>)
 800430c:	2000      	movs	r0, #0
 800430e:	f00a fbc1 	bl	800ea94 <strtok>
 8004312:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d007      	beq.n	800432a <AT_ParseConnSettings+0x14a>
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	3b01      	subs	r3, #1
 800431e:	781b      	ldrb	r3, [r3, #0]
 8004320:	2b2c      	cmp	r3, #44	; 0x2c
 8004322:	d102      	bne.n	800432a <AT_ParseConnSettings+0x14a>
    { /* Ignore empty fields */
      num++;
 8004324:	7bfb      	ldrb	r3, [r7, #15]
 8004326:	3301      	adds	r3, #1
 8004328:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	2b00      	cmp	r3, #0
 800432e:	f47f af66 	bne.w	80041fe <AT_ParseConnSettings+0x1e>
    }
  }
}
 8004332:	bf00      	nop
 8004334:	bf00      	nop
 8004336:	3710      	adds	r7, #16
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}
 800433c:	080123ac 	.word	0x080123ac

08004340 <AT_ParseTransportSettings>:
  * @param  TransportSettings: settings
  * @param  pdata: pointer to data
  * @retval None.
  */
static void AT_ParseTransportSettings(char *pdata, ES_WIFI_Transport_t *TransportSettings)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	6039      	str	r1, [r7, #0]
  uint8_t num = 0;
 800434a:	2300      	movs	r3, #0
 800434c:	73fb      	strb	r3, [r7, #15]
  char *ptr;

  ptr = strtok(pdata + 2, ",");
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3302      	adds	r3, #2
 8004352:	4949      	ldr	r1, [pc, #292]	; (8004478 <AT_ParseTransportSettings+0x138>)
 8004354:	4618      	mov	r0, r3
 8004356:	f00a fb9d 	bl	800ea94 <strtok>
 800435a:	60b8      	str	r0, [r7, #8]

  while (ptr != NULL) {
 800435c:	e083      	b.n	8004466 <AT_ParseTransportSettings+0x126>
    switch (num++) {
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	1c5a      	adds	r2, r3, #1
 8004362:	73fa      	strb	r2, [r7, #15]
 8004364:	2b09      	cmp	r3, #9
 8004366:	d86d      	bhi.n	8004444 <AT_ParseTransportSettings+0x104>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <AT_ParseTransportSettings+0x30>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004399 	.word	0x08004399
 8004374:	080043ab 	.word	0x080043ab
 8004378:	080043b9 	.word	0x080043b9
 800437c:	080043cb 	.word	0x080043cb
 8004380:	080043d9 	.word	0x080043d9
 8004384:	080043eb 	.word	0x080043eb
 8004388:	080043fd 	.word	0x080043fd
 800438c:	0800440f 	.word	0x0800440f
 8004390:	08004421 	.word	0x08004421
 8004394:	08004433 	.word	0x08004433
    case 0:
      TransportSettings->Protocol = (ES_WIFI_ConnType_t) ParseNumber(ptr, NULL);
 8004398:	2100      	movs	r1, #0
 800439a:	68b8      	ldr	r0, [r7, #8]
 800439c:	f7ff fe0f 	bl	8003fbe <ParseNumber>
 80043a0:	4603      	mov	r3, r0
 80043a2:	b2da      	uxtb	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	701a      	strb	r2, [r3, #0]
      break;
 80043a8:	e04d      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 1:
      ParseIP(ptr, TransportSettings->Local_IP_Addr);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	3301      	adds	r3, #1
 80043ae:	4619      	mov	r1, r3
 80043b0:	68b8      	ldr	r0, [r7, #8]
 80043b2:	f7ff fe73 	bl	800409c <ParseIP>
      break;
 80043b6:	e046      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 2:
      TransportSettings->Local_Port = ParseNumber(ptr, NULL);
 80043b8:	2100      	movs	r1, #0
 80043ba:	68b8      	ldr	r0, [r7, #8]
 80043bc:	f7ff fdff 	bl	8003fbe <ParseNumber>
 80043c0:	4603      	mov	r3, r0
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	80da      	strh	r2, [r3, #6]
      break;
 80043c8:	e03d      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 3:
      ParseIP(ptr, TransportSettings->Remote_IP_Addr);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	4619      	mov	r1, r3
 80043d0:	68b8      	ldr	r0, [r7, #8]
 80043d2:	f7ff fe63 	bl	800409c <ParseIP>
      break;
 80043d6:	e036      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 4:
      TransportSettings->Remote_Port = ParseNumber(ptr, NULL);
 80043d8:	2100      	movs	r1, #0
 80043da:	68b8      	ldr	r0, [r7, #8]
 80043dc:	f7ff fdef 	bl	8003fbe <ParseNumber>
 80043e0:	4603      	mov	r3, r0
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	819a      	strh	r2, [r3, #12]
      break;
 80043e8:	e02d      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 5:
      TransportSettings->TCP_Server = ParseNumber(ptr, NULL);
 80043ea:	2100      	movs	r1, #0
 80043ec:	68b8      	ldr	r0, [r7, #8]
 80043ee:	f7ff fde6 	bl	8003fbe <ParseNumber>
 80043f2:	4603      	mov	r3, r0
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	739a      	strb	r2, [r3, #14]
      break;
 80043fa:	e024      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 6:
      TransportSettings->UDP_Server = ParseNumber(ptr, NULL);
 80043fc:	2100      	movs	r1, #0
 80043fe:	68b8      	ldr	r0, [r7, #8]
 8004400:	f7ff fddd 	bl	8003fbe <ParseNumber>
 8004404:	4603      	mov	r3, r0
 8004406:	b2da      	uxtb	r2, r3
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	73da      	strb	r2, [r3, #15]
      break;
 800440c:	e01b      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 7:
      TransportSettings->TCP_Backlogs = ParseNumber(ptr, NULL);
 800440e:	2100      	movs	r1, #0
 8004410:	68b8      	ldr	r0, [r7, #8]
 8004412:	f7ff fdd4 	bl	8003fbe <ParseNumber>
 8004416:	4603      	mov	r3, r0
 8004418:	b2da      	uxtb	r2, r3
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	741a      	strb	r2, [r3, #16]
      break;
 800441e:	e012      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 8:
      TransportSettings->Accept_Loop = ParseNumber(ptr, NULL);
 8004420:	2100      	movs	r1, #0
 8004422:	68b8      	ldr	r0, [r7, #8]
 8004424:	f7ff fdcb 	bl	8003fbe <ParseNumber>
 8004428:	4603      	mov	r3, r0
 800442a:	b2da      	uxtb	r2, r3
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	745a      	strb	r2, [r3, #17]
      break;
 8004430:	e009      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    case 9:
      TransportSettings->Read_Mode = ParseNumber(ptr, NULL);
 8004432:	2100      	movs	r1, #0
 8004434:	68b8      	ldr	r0, [r7, #8]
 8004436:	f7ff fdc2 	bl	8003fbe <ParseNumber>
 800443a:	4603      	mov	r3, r0
 800443c:	b2da      	uxtb	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	749a      	strb	r2, [r3, #18]
      break;
 8004442:	e000      	b.n	8004446 <AT_ParseTransportSettings+0x106>

    default:
      break;
 8004444:	bf00      	nop
    }
    ptr = strtok(NULL, ",");
 8004446:	490c      	ldr	r1, [pc, #48]	; (8004478 <AT_ParseTransportSettings+0x138>)
 8004448:	2000      	movs	r0, #0
 800444a:	f00a fb23 	bl	800ea94 <strtok>
 800444e:	60b8      	str	r0, [r7, #8]
    if ((ptr != NULL) && (ptr[-1] == ','))
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d007      	beq.n	8004466 <AT_ParseTransportSettings+0x126>
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	3b01      	subs	r3, #1
 800445a:	781b      	ldrb	r3, [r3, #0]
 800445c:	2b2c      	cmp	r3, #44	; 0x2c
 800445e:	d102      	bne.n	8004466 <AT_ParseTransportSettings+0x126>
    { /* Ignore empty fields */
      num++;
 8004460:	7bfb      	ldrb	r3, [r7, #15]
 8004462:	3301      	adds	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
  while (ptr != NULL) {
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	f47f af78 	bne.w	800435e <AT_ParseTransportSettings+0x1e>
    }
  }
}
 800446e:	bf00      	nop
 8004470:	bf00      	nop
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	080123ac 	.word	0x080123ac

0800447c <AT_ParseIsConnected>:
  * @param  pdata: pointer to data
  * @param  isConnected: pointer to result
  * @retval None.
  */
static void AT_ParseIsConnected(char *pdata, uint8_t *isConnected)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	6039      	str	r1, [r7, #0]
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	3302      	adds	r3, #2
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b31      	cmp	r3, #49	; 0x31
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	461a      	mov	r2, r3
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	701a      	strb	r2, [r3, #0]
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a6:	4770      	bx	lr

080044a8 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 80044a8:	b590      	push	{r4, r7, lr}
 80044aa:	b087      	sub	sp, #28
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
  int ret = 0;
 80044b4:	2300      	movs	r3, #0
 80044b6:	617b      	str	r3, [r7, #20]
  int16_t recv_len = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	827b      	strh	r3, [r7, #18]
  LOCK_WIFI();  

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	f7fb fe8e 	bl	80001e4 <strlen>
 80044c8:	4603      	mov	r3, r0
 80044ca:	b299      	uxth	r1, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 80044d2:	461a      	mov	r2, r3
 80044d4:	68b8      	ldr	r0, [r7, #8]
 80044d6:	47a0      	blx	r4
 80044d8:	4603      	mov	r3, r0
 80044da:	617b      	str	r3, [r7, #20]

  if( ret > 0)
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	dd33      	ble.n	800454a <AT_ExecuteCommand+0xa2>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80044ee:	f44f 61af 	mov.w	r1, #1400	; 0x578
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	4798      	blx	r3
 80044f6:	4603      	mov	r3, r0
 80044f8:	827b      	strh	r3, [r7, #18]
    if((recv_len > 0) && (recv_len < ES_WIFI_DATA_SIZE))
 80044fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	dd1c      	ble.n	800453c <AT_ExecuteCommand+0x94>
 8004502:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004506:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800450a:	da17      	bge.n	800453c <AT_ExecuteCommand+0x94>
    {
      *(pdata + recv_len) = 0;
 800450c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]
      if(strstr((char *)pdata, AT_OK_STRING))
 8004518:	490e      	ldr	r1, [pc, #56]	; (8004554 <AT_ExecuteCommand+0xac>)
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f00a faa4 	bl	800ea68 <strstr>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <AT_ExecuteCommand+0x82>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
 8004526:	2300      	movs	r3, #0
 8004528:	e010      	b.n	800454c <AT_ExecuteCommand+0xa4>
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 800452a:	490b      	ldr	r1, [pc, #44]	; (8004558 <AT_ExecuteCommand+0xb0>)
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f00a fa9b 	bl	800ea68 <strstr>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <AT_ExecuteCommand+0x94>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8004538:	2305      	movs	r3, #5
 800453a:	e007      	b.n	800454c <AT_ExecuteCommand+0xa4>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800453c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004540:	f113 0f04 	cmn.w	r3, #4
 8004544:	d101      	bne.n	800454a <AT_ExecuteCommand+0xa2>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 8004546:	2306      	movs	r3, #6
 8004548:	e000      	b.n	800454c <AT_ExecuteCommand+0xa4>
    }
  }
  UNLOCK_WIFI();  
  return ES_WIFI_STATUS_IO_ERROR;
 800454a:	2304      	movs	r3, #4
}
 800454c:	4618      	mov	r0, r3
 800454e:	371c      	adds	r7, #28
 8004550:	46bd      	mov	sp, r7
 8004552:	bd90      	pop	{r4, r7, pc}
 8004554:	080123b4 	.word	0x080123b4
 8004558:	080123c0 	.word	0x080123c0

0800455c <AT_RequestSendData>:
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */

static ES_WIFI_Status_t AT_RequestSendData(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pcmd_data, uint16_t len, uint8_t *pdata)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	807b      	strh	r3, [r7, #2]
  int16_t send_len = 0;
 800456a:	2300      	movs	r3, #0
 800456c:	82fb      	strh	r3, [r7, #22]
  int16_t recv_len = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	82bb      	strh	r3, [r7, #20]
  uint16_t cmd_len = 0;
 8004572:	2300      	movs	r3, #0
 8004574:	827b      	strh	r3, [r7, #18]
  uint16_t n ;

  LOCK_WIFI();  
  cmd_len = strlen((char*)cmd);
 8004576:	68b8      	ldr	r0, [r7, #8]
 8004578:	f7fb fe34 	bl	80001e4 <strlen>
 800457c:	4603      	mov	r3, r0
 800457e:	827b      	strh	r3, [r7, #18]

  /* can send only even number of byte on first send */
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8004580:	8a7b      	ldrh	r3, [r7, #18]
 8004582:	f003 0301 	and.w	r3, r3, #1
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <AT_RequestSendData+0x32>
 800458a:	2302      	movs	r3, #2
 800458c:	e053      	b.n	8004636 <AT_RequestSendData+0xda>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800459a:	8a79      	ldrh	r1, [r7, #18]
 800459c:	68b8      	ldr	r0, [r7, #8]
 800459e:	4798      	blx	r3
 80045a0:	4603      	mov	r3, r0
 80045a2:	823b      	strh	r3, [r7, #16]
  if (n == cmd_len)
 80045a4:	8a3a      	ldrh	r2, [r7, #16]
 80045a6:	8a7b      	ldrh	r3, [r7, #18]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d143      	bne.n	8004634 <AT_RequestSendData+0xd8>
  {    
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f8d3 3120 	ldr.w	r3, [r3, #288]	; 0x120
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80045b8:	8879      	ldrh	r1, [r7, #2]
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
 80045be:	4603      	mov	r3, r0
 80045c0:	82fb      	strh	r3, [r7, #22]
    if (send_len == len)
 80045c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80045c6:	887b      	ldrh	r3, [r7, #2]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d131      	bne.n	8004630 <AT_RequestSendData+0xd4>
    {
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 80045d8:	2100      	movs	r1, #0
 80045da:	6a38      	ldr	r0, [r7, #32]
 80045dc:	4798      	blx	r3
 80045de:	4603      	mov	r3, r0
 80045e0:	82bb      	strh	r3, [r7, #20]
      if (recv_len > 0)
 80045e2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	dd19      	ble.n	800461e <AT_RequestSendData+0xc2>
      {
        *(pdata+recv_len) = 0;
 80045ea:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80045ee:	6a3a      	ldr	r2, [r7, #32]
 80045f0:	4413      	add	r3, r2
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
        if(strstr((char *)pdata, AT_OK_STRING))
 80045f6:	4912      	ldr	r1, [pc, #72]	; (8004640 <AT_RequestSendData+0xe4>)
 80045f8:	6a38      	ldr	r0, [r7, #32]
 80045fa:	f00a fa35 	bl	800ea68 <strstr>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <AT_RequestSendData+0xac>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e016      	b.n	8004636 <AT_RequestSendData+0xda>
        }
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <AT_RequestSendData+0xe8>)
 800460a:	6a38      	ldr	r0, [r7, #32]
 800460c:	f00a fa2c 	bl	800ea68 <strstr>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d001      	beq.n	800461a <AT_RequestSendData+0xbe>
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8004616:	2305      	movs	r3, #5
 8004618:	e00d      	b.n	8004636 <AT_RequestSendData+0xda>
        }
        else
        {
          UNLOCK_WIFI();
          return ES_WIFI_STATUS_ERROR;
 800461a:	2302      	movs	r3, #2
 800461c:	e00b      	b.n	8004636 <AT_RequestSendData+0xda>
        }
      }
      UNLOCK_WIFI();
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 800461e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004622:	f113 0f04 	cmn.w	r3, #4
 8004626:	d101      	bne.n	800462c <AT_RequestSendData+0xd0>
      {
        return ES_WIFI_STATUS_MODULE_CRASH;
 8004628:	2306      	movs	r3, #6
 800462a:	e004      	b.n	8004636 <AT_RequestSendData+0xda>
      }
      return ES_WIFI_STATUS_ERROR;
 800462c:	2302      	movs	r3, #2
 800462e:	e002      	b.n	8004636 <AT_RequestSendData+0xda>
    }
    else
    {
      return ES_WIFI_STATUS_ERROR;
 8004630:	2302      	movs	r3, #2
 8004632:	e000      	b.n	8004636 <AT_RequestSendData+0xda>
    }
  }
  return ES_WIFI_STATUS_IO_ERROR;
 8004634:	2304      	movs	r3, #4
}
 8004636:	4618      	mov	r0, r3
 8004638:	3718      	adds	r7, #24
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	080123b4 	.word	0x080123b4
 8004644:	080123c0 	.word	0x080123c0

08004648 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 8004648:	b590      	push	{r4, r7, lr}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	807b      	strh	r3, [r7, #2]
  int len;
  uint8_t *p=Obj->CmdData;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800465c:	613b      	str	r3, [r7, #16]
  
  LOCK_WIFI();  
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f8d3 4120 	ldr.w	r4, [r3, #288]	; 0x120
 8004664:	68b8      	ldr	r0, [r7, #8]
 8004666:	f7fb fdbd 	bl	80001e4 <strlen>
 800466a:	4603      	mov	r3, r0
 800466c:	b299      	uxth	r1, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f8d3 36a0 	ldr.w	r3, [r3, #1696]	; 0x6a0
 8004674:	461a      	mov	r2, r3
 8004676:	68b8      	ldr	r0, [r7, #8]
 8004678:	47a0      	blx	r4
 800467a:	4603      	mov	r3, r0
 800467c:	2b00      	cmp	r3, #0
 800467e:	dd6f      	ble.n	8004760 <AT_RequestReceiveData+0x118>
  {
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 8004686:	68fa      	ldr	r2, [r7, #12]
 8004688:	f8d2 26a0 	ldr.w	r2, [r2, #1696]	; 0x6a0
 800468c:	2100      	movs	r1, #0
 800468e:	6938      	ldr	r0, [r7, #16]
 8004690:	4798      	blx	r3
 8004692:	4603      	mov	r3, r0
 8004694:	617b      	str	r3, [r7, #20]
    if ((p[0]!='\r') || (p[1]!='\n'))
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	2b0d      	cmp	r3, #13
 800469c:	d104      	bne.n	80046a8 <AT_RequestReceiveData+0x60>
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	3301      	adds	r3, #1
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	2b0a      	cmp	r3, #10
 80046a6:	d001      	beq.n	80046ac <AT_RequestReceiveData+0x64>
    {
     return  ES_WIFI_STATUS_IO_ERROR;
 80046a8:	2304      	movs	r3, #4
 80046aa:	e05a      	b.n	8004762 <AT_RequestReceiveData+0x11a>
    }
    len-=2;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	3b02      	subs	r3, #2
 80046b0:	617b      	str	r3, [r7, #20]
    p+=2;
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	3302      	adds	r3, #2
 80046b6:	613b      	str	r3, [r7, #16]
    if (len >= AT_OK_STRING_LEN)
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2b07      	cmp	r3, #7
 80046bc:	d94a      	bls.n	8004754 <AT_RequestReceiveData+0x10c>
    {
     while(len && (p[len-1]==0x15)) len--;
 80046be:	e002      	b.n	80046c6 <AT_RequestReceiveData+0x7e>
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3b01      	subs	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d006      	beq.n	80046da <AT_RequestReceiveData+0x92>
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b15      	cmp	r3, #21
 80046d8:	d0f2      	beq.n	80046c0 <AT_RequestReceiveData+0x78>
     p[len] = '\0';
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	4413      	add	r3, r2
 80046e0:	2200      	movs	r2, #0
 80046e2:	701a      	strb	r2, [r3, #0]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	3b08      	subs	r3, #8
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4413      	add	r3, r2
 80046ec:	491f      	ldr	r1, [pc, #124]	; (800476c <AT_RequestReceiveData+0x124>)
 80046ee:	4618      	mov	r0, r3
 80046f0:	f00a f9ba 	bl	800ea68 <strstr>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <AT_RequestReceiveData+0xe0>
     {
       *ReadData = len - AT_OK_STRING_LEN;
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	3b08      	subs	r3, #8
 8004700:	b29a      	uxth	r2, r3
 8004702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004704:	801a      	strh	r2, [r3, #0]
	   if (*ReadData > Reqlen)
 8004706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004708:	881b      	ldrh	r3, [r3, #0]
 800470a:	887a      	ldrh	r2, [r7, #2]
 800470c:	429a      	cmp	r2, r3
 800470e:	d202      	bcs.n	8004716 <AT_RequestReceiveData+0xce>
       {
         *ReadData = Reqlen;
 8004710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004712:	887a      	ldrh	r2, [r7, #2]
 8004714:	801a      	strh	r2, [r3, #0]
       }
       memcpy(pdata, p, *ReadData);
 8004716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004718:	881b      	ldrh	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	6939      	ldr	r1, [r7, #16]
 800471e:	6878      	ldr	r0, [r7, #4]
 8004720:	f009 fa72 	bl	800dc08 <memcpy>
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	e01c      	b.n	8004762 <AT_RequestReceiveData+0x11a>
     }
     else if(memcmp((char *)p + len - AT_DELIMETER_LEN , AT_DELIMETER_STRING, AT_DELIMETER_LEN) == 0)
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	3b04      	subs	r3, #4
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4413      	add	r3, r2
 8004730:	2204      	movs	r2, #4
 8004732:	490f      	ldr	r1, [pc, #60]	; (8004770 <AT_RequestReceiveData+0x128>)
 8004734:	4618      	mov	r0, r3
 8004736:	f009 fa57 	bl	800dbe8 <memcmp>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <AT_RequestReceiveData+0x102>
     {
       *ReadData = 0;
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	2200      	movs	r2, #0
 8004744:	801a      	strh	r2, [r3, #0]
       UNLOCK_WIFI();
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8004746:	2305      	movs	r3, #5
 8004748:	e00b      	b.n	8004762 <AT_RequestReceiveData+0x11a>
     }
     
     UNLOCK_WIFI();
     *ReadData = 0;
 800474a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800474c:	2200      	movs	r2, #0
 800474e:	801a      	strh	r2, [r3, #0]
     return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8004750:	2305      	movs	r3, #5
 8004752:	e006      	b.n	8004762 <AT_RequestReceiveData+0x11a>
   }
   if (len == ES_WIFI_ERROR_STUFFING_FOREVER ) 
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f113 0f04 	cmn.w	r3, #4
 800475a:	d101      	bne.n	8004760 <AT_RequestReceiveData+0x118>
   {
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
 800475c:	2306      	movs	r3, #6
 800475e:	e000      	b.n	8004762 <AT_RequestReceiveData+0x11a>
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 8004760:	2304      	movs	r3, #4
}
 8004762:	4618      	mov	r0, r3
 8004764:	371c      	adds	r7, #28
 8004766:	46bd      	mov	sp, r7
 8004768:	bd90      	pop	{r4, r7, pc}
 800476a:	bf00      	nop
 800476c:	080123b4 	.word	0x080123b4
 8004770:	080123c8 	.word	0x080123c8

08004774 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800477c:	2302      	movs	r3, #2
 800477e:	73fb      	strb	r3, [r7, #15]
  
  LOCK_WIFI();  

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f247 5230 	movw	r2, #30000	; 0x7530
 8004786:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8004790:	2000      	movs	r0, #0
 8004792:	4798      	blx	r3
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d113      	bne.n	80047c2 <ES_WIFI_Init+0x4e>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80047a0:	461a      	mov	r2, r3
 80047a2:	490a      	ldr	r1, [pc, #40]	; (80047cc <ES_WIFI_Init+0x58>)
 80047a4:	6878      	ldr	r0, [r7, #4]
 80047a6:	f7ff fe7f 	bl	80044a8 <AT_ExecuteCommand>
 80047aa:	4603      	mov	r3, r0
 80047ac:	73fb      	strb	r3, [r7, #15]

    if(ret == ES_WIFI_STATUS_OK)
 80047ae:	7bfb      	ldrb	r3, [r7, #15]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d106      	bne.n	80047c2 <ES_WIFI_Init+0x4e>
    {
      AT_ParseInfo (Obj, Obj->CmdData);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80047ba:	4619      	mov	r1, r3
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f7ff fc99 	bl	80040f4 <AT_ParseInfo>
    }
  }
  UNLOCK_WIFI();
  return ret;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3710      	adds	r7, #16
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	080123d0 	.word	0x080123d0

080047d0 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b085      	sub	sp, #20
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	60f8      	str	r0, [r7, #12]
 80047d8:	60b9      	str	r1, [r7, #8]
 80047da:	607a      	str	r2, [r7, #4]
 80047dc:	603b      	str	r3, [r7, #0]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00b      	beq.n	80047fc <ES_WIFI_RegisterBusIO+0x2c>
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d008      	beq.n	80047fc <ES_WIFI_RegisterBusIO+0x2c>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d005      	beq.n	80047fc <ES_WIFI_RegisterBusIO+0x2c>
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <ES_WIFI_RegisterBusIO+0x2c>
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d101      	bne.n	8004800 <ES_WIFI_RegisterBusIO+0x30>
  {
    return ES_WIFI_STATUS_ERROR;
 80047fc:	2302      	movs	r3, #2
 80047fe:	e014      	b.n	800482a <ES_WIFI_RegisterBusIO+0x5a>
  }

  Obj->fops.IO_Init = IO_Init;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  Obj->fops.IO_DeInit = IO_DeInit;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
  Obj->fops.IO_Send = IO_Send;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  Obj->fops.IO_Receive = IO_Receive;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	f8c3 2124 	str.w	r2, [r3, #292]	; 0x124
  Obj->fops.IO_Delay = IO_Delay;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	683a      	ldr	r2, [r7, #0]
 8004824:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b086      	sub	sp, #24
 800483c:	af00      	add	r7, sp, #0
 800483e:	60f8      	str	r0, [r7, #12]
 8004840:	60b9      	str	r1, [r7, #8]
 8004842:	607a      	str	r2, [r7, #4]
 8004844:	70fb      	strb	r3, [r7, #3]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	4932      	ldr	r1, [pc, #200]	; (8004918 <ES_WIFI_Connect+0xe0>)
 8004850:	4618      	mov	r0, r3
 8004852:	f00a f851 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004862:	461a      	mov	r2, r3
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff fe1f 	bl	80044a8 <AT_ExecuteCommand>
 800486a:	4603      	mov	r3, r0
 800486c:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 800486e:	7dfb      	ldrb	r3, [r7, #23]
 8004870:	2b00      	cmp	r3, #0
 8004872:	d14b      	bne.n	800490c <ES_WIFI_Connect+0xd4>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4927      	ldr	r1, [pc, #156]	; (800491c <ES_WIFI_Connect+0xe4>)
 800487e:	4618      	mov	r0, r3
 8004880:	f00a f83a 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004890:	461a      	mov	r2, r3
 8004892:	68f8      	ldr	r0, [r7, #12]
 8004894:	f7ff fe08 	bl	80044a8 <AT_ExecuteCommand>
 8004898:	4603      	mov	r3, r0
 800489a:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 800489c:	7dfb      	ldrb	r3, [r7, #23]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d134      	bne.n	800490c <ES_WIFI_Connect+0xd4>
    {
      Obj->Security = SecType;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	78fa      	ldrb	r2, [r7, #3]
 80048a6:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80048b0:	78fa      	ldrb	r2, [r7, #3]
 80048b2:	491b      	ldr	r1, [pc, #108]	; (8004920 <ES_WIFI_Connect+0xe8>)
 80048b4:	4618      	mov	r0, r3
 80048b6:	f00a f81f 	bl	800e8f8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80048c6:	461a      	mov	r2, r3
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f7ff fded 	bl	80044a8 <AT_ExecuteCommand>
 80048ce:	4603      	mov	r3, r0
 80048d0:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d119      	bne.n	800490c <ES_WIFI_Connect+0xd4>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80048de:	4911      	ldr	r1, [pc, #68]	; (8004924 <ES_WIFI_Connect+0xec>)
 80048e0:	4618      	mov	r0, r3
 80048e2:	f00a f809 	bl	800e8f8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80048f2:	461a      	mov	r2, r3
 80048f4:	68f8      	ldr	r0, [r7, #12]
 80048f6:	f7ff fdd7 	bl	80044a8 <AT_ExecuteCommand>
 80048fa:	4603      	mov	r3, r0
 80048fc:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 80048fe:	7dfb      	ldrb	r3, [r7, #23]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d103      	bne.n	800490c <ES_WIFI_Connect+0xd4>
        {
           Obj->NetSettings.IsConnected = 1;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
        }
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
 800490c:	7dfb      	ldrb	r3, [r7, #23]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	080123dc 	.word	0x080123dc
 800491c:	080123e4 	.word	0x080123e4
 8004920:	080123ec 	.word	0x080123ec
 8004924:	080123f4 	.word	0x080123f4

08004928 <ES_WIFI_IsConnected>:
/**
  * @brief  Check whether the module is connected to an access point.
  * @retval Operation Status.
  */
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"CS\r");
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004936:	4911      	ldr	r1, [pc, #68]	; (800497c <ES_WIFI_IsConnected+0x54>)
 8004938:	4618      	mov	r0, r3
 800493a:	f009 ffdd 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800494a:	461a      	mov	r2, r3
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f7ff fdab 	bl	80044a8 <AT_ExecuteCommand>
 8004952:	4603      	mov	r3, r0
 8004954:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d108      	bne.n	800496e <ES_WIFI_IsConnected+0x46>
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	33d2      	adds	r3, #210	; 0xd2
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7ff fd87 	bl	800447c <AT_ParseIsConnected>
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f893 30d2 	ldrb.w	r3, [r3, #210]	; 0xd2
}
 8004974:	4618      	mov	r0, r3
 8004976:	3710      	adds	r7, #16
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	080123f8 	.word	0x080123f8

08004980 <ES_WIFI_GetNetworkSettings>:
  * @param  Obj: pointer to module handle
  * @param  Pointer to network setting structure.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"C?\r");
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800498e:	4910      	ldr	r1, [pc, #64]	; (80049d0 <ES_WIFI_GetNetworkSettings+0x50>)
 8004990:	4618      	mov	r0, r3
 8004992:	f009 ffb1 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80049a2:	461a      	mov	r2, r3
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fd7f 	bl	80044a8 <AT_ExecuteCommand>
 80049aa:	4603      	mov	r3, r0
 80049ac:	73fb      	strb	r3, [r7, #15]

  if(ret == ES_WIFI_STATUS_OK)
 80049ae:	7bfb      	ldrb	r3, [r7, #15]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d108      	bne.n	80049c6 <ES_WIFI_GetNetworkSettings+0x46>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	f503 7294 	add.w	r2, r3, #296	; 0x128
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	338d      	adds	r3, #141	; 0x8d
 80049be:	4619      	mov	r1, r3
 80049c0:	4610      	mov	r0, r2
 80049c2:	f7ff fc0d 	bl	80041e0 <AT_ParseConnSettings>
  }
  
  UNLOCK_WIFI();
  return ret;
 80049c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3710      	adds	r7, #16
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08012400 	.word	0x08012400

080049d4 <ES_WIFI_GetMACAddress>:
  * @param  Obj: pointer to module handle
  * @param  mac: pointer to the MAC address array.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_GetMACAddress(ES_WIFIObject_t *Obj, uint8_t *mac)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"Z5\r");
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80049e4:	4912      	ldr	r1, [pc, #72]	; (8004a30 <ES_WIFI_GetMACAddress+0x5c>)
 80049e6:	4618      	mov	r0, r3
 80049e8:	f009 ff86 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80049f8:	461a      	mov	r2, r3
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7ff fd54 	bl	80044a8 <AT_ExecuteCommand>
 8004a00:	4603      	mov	r3, r0
 8004a02:	73fb      	strb	r3, [r7, #15]
  if(ret == ES_WIFI_STATUS_OK)
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10c      	bne.n	8004a24 <ES_WIFI_GetMACAddress+0x50>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a10:	3302      	adds	r3, #2
 8004a12:	4908      	ldr	r1, [pc, #32]	; (8004a34 <ES_WIFI_GetMACAddress+0x60>)
 8004a14:	4618      	mov	r0, r3
 8004a16:	f00a f83d 	bl	800ea94 <strtok>
 8004a1a:	60b8      	str	r0, [r7, #8]
    ParseMAC(ptr, mac) ;
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	68b8      	ldr	r0, [r7, #8]
 8004a20:	f7ff fb11 	bl	8004046 <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
 8004a24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	08012460 	.word	0x08012460
 8004a34:	08012464 	.word	0x08012464

08004a38 <ES_WIFI_DNS_LookUp>:
  * @param  url: Domain Name.
  * @param  ipaddress: IP address.
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_DNS_LookUp(ES_WIFIObject_t *Obj, const char *url, uint8_t *ipaddress)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
  ES_WIFI_Status_t ret;
  char *ptr;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"D0=%s\r", url);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a4a:	68ba      	ldr	r2, [r7, #8]
 8004a4c:	4912      	ldr	r1, [pc, #72]	; (8004a98 <ES_WIFI_DNS_LookUp+0x60>)
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f009 ff52 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a60:	461a      	mov	r2, r3
 8004a62:	68f8      	ldr	r0, [r7, #12]
 8004a64:	f7ff fd20 	bl	80044a8 <AT_ExecuteCommand>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	75fb      	strb	r3, [r7, #23]

  if(ret == ES_WIFI_STATUS_OK)
 8004a6c:	7dfb      	ldrb	r3, [r7, #23]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d10c      	bne.n	8004a8c <ES_WIFI_DNS_LookUp+0x54>
  {
    ptr = strtok((char *)Obj->CmdData + 2, "\r");
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004a78:	3302      	adds	r3, #2
 8004a7a:	4908      	ldr	r1, [pc, #32]	; (8004a9c <ES_WIFI_DNS_LookUp+0x64>)
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f00a f809 	bl	800ea94 <strtok>
 8004a82:	6138      	str	r0, [r7, #16]
    ParseIP(ptr, ipaddress);
 8004a84:	6879      	ldr	r1, [r7, #4]
 8004a86:	6938      	ldr	r0, [r7, #16]
 8004a88:	f7ff fb08 	bl	800409c <ParseIP>
  }
  UNLOCK_WIFI();
  return ret;
 8004a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3718      	adds	r7, #24
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	080124c0 	.word	0x080124c0
 8004a9c:	080123b0 	.word	0x080123b0

08004aa0 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8004aa0:	b590      	push	{r4, r7, lr}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af02      	add	r7, sp, #8
 8004aa6:	6078      	str	r0, [r7, #4]
 8004aa8:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	73fb      	strb	r3, [r7, #15]
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	785b      	ldrb	r3, [r3, #1]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	4951      	ldr	r1, [pc, #324]	; (8004c00 <ES_WIFI_StartClientConnection+0x160>)
 8004abc:	f009 ff1c 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004acc:	461a      	mov	r2, r3
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f7ff fcea 	bl	80044a8 <AT_ExecuteCommand>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8004ad8:	7bfb      	ldrb	r3, [r7, #15]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d114      	bne.n	8004b08 <ES_WIFI_StartClientConnection+0x68>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	781b      	ldrb	r3, [r3, #0]
 8004ae8:	461a      	mov	r2, r3
 8004aea:	4946      	ldr	r1, [pc, #280]	; (8004c04 <ES_WIFI_StartClientConnection+0x164>)
 8004aec:	f009 ff04 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004afc:	461a      	mov	r2, r3
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f7ff fcd2 	bl	80044a8 <AT_ExecuteCommand>
 8004b04:	4603      	mov	r3, r0
 8004b06:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->LocalPort > 0))
 8004b08:	7bfb      	ldrb	r3, [r7, #15]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d118      	bne.n	8004b40 <ES_WIFI_StartClientConnection+0xa0>
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	889b      	ldrh	r3, [r3, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d014      	beq.n	8004b40 <ES_WIFI_StartClientConnection+0xa0>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	889b      	ldrh	r3, [r3, #4]
 8004b20:	461a      	mov	r2, r3
 8004b22:	4939      	ldr	r1, [pc, #228]	; (8004c08 <ES_WIFI_StartClientConnection+0x168>)
 8004b24:	f009 fee8 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b34:	461a      	mov	r2, r3
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7ff fcb6 	bl	80044a8 <AT_ExecuteCommand>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->RemotePort > 0))
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d118      	bne.n	8004b78 <ES_WIFI_StartClientConnection+0xd8>
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	885b      	ldrh	r3, [r3, #2]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d014      	beq.n	8004b78 <ES_WIFI_StartClientConnection+0xd8>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	885b      	ldrh	r3, [r3, #2]
 8004b58:	461a      	mov	r2, r3
 8004b5a:	492c      	ldr	r1, [pc, #176]	; (8004c0c <ES_WIFI_StartClientConnection+0x16c>)
 8004b5c:	f009 fecc 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f7ff fc9a 	bl	80044a8 <AT_ExecuteCommand>
 8004b74:	4603      	mov	r3, r0
 8004b76:	73fb      	strb	r3, [r7, #15]
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_CONNECTION))
 8004b78:	7bfb      	ldrb	r3, [r7, #15]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d124      	bne.n	8004bc8 <ES_WIFI_StartClientConnection+0x128>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d120      	bne.n	8004bc8 <ES_WIFI_StartClientConnection+0x128>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	799b      	ldrb	r3, [r3, #6]
 8004b90:	4619      	mov	r1, r3
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	79db      	ldrb	r3, [r3, #7]
 8004b96:	461c      	mov	r4, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	7a1b      	ldrb	r3, [r3, #8]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004b9c:	461a      	mov	r2, r3
            conn->RemoteIP[2],conn->RemoteIP[3]);
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	7a5b      	ldrb	r3, [r3, #9]
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8004ba2:	9301      	str	r3, [sp, #4]
 8004ba4:	9200      	str	r2, [sp, #0]
 8004ba6:	4623      	mov	r3, r4
 8004ba8:	460a      	mov	r2, r1
 8004baa:	4919      	ldr	r1, [pc, #100]	; (8004c10 <ES_WIFI_StartClientConnection+0x170>)
 8004bac:	f009 fea4 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f7ff fc72 	bl	80044a8 <AT_ExecuteCommand>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	73fb      	strb	r3, [r7, #15]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004bc8:	7bfb      	ldrb	r3, [r7, #15]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d112      	bne.n	8004bf4 <ES_WIFI_StartClientConnection+0x154>
  {
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004bd4:	490f      	ldr	r1, [pc, #60]	; (8004c14 <ES_WIFI_StartClientConnection+0x174>)
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f009 fe8e 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004be8:	461a      	mov	r2, r3
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f7ff fc5c 	bl	80044a8 <AT_ExecuteCommand>
 8004bf0:	4603      	mov	r3, r0
 8004bf2:	73fb      	strb	r3, [r7, #15]
  }
  
  UNLOCK_WIFI();
  return ret;
 8004bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd90      	pop	{r4, r7, pc}
 8004bfe:	bf00      	nop
 8004c00:	080124c8 	.word	0x080124c8
 8004c04:	080124d0 	.word	0x080124d0
 8004c08:	080124d8 	.word	0x080124d8
 8004c0c:	080124e0 	.word	0x080124e0
 8004c10:	080124e8 	.word	0x080124e8
 8004c14:	080124f8 	.word	0x080124f8

08004c18 <ES_WIFI_StopClientConnection>:
  * @brief  Stop Client connection.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StopClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b084      	sub	sp, #16
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  ES_WIFI_Status_t ret;
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	461a      	mov	r2, r3
 8004c2e:	4915      	ldr	r1, [pc, #84]	; (8004c84 <ES_WIFI_StopClientConnection+0x6c>)
 8004c30:	f009 fe62 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c40:	461a      	mov	r2, r3
 8004c42:	6878      	ldr	r0, [r7, #4]
 8004c44:	f7ff fc30 	bl	80044a8 <AT_ExecuteCommand>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	73fb      	strb	r3, [r7, #15]

  if (ret == ES_WIFI_STATUS_OK)
 8004c4c:	7bfb      	ldrb	r3, [r7, #15]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d112      	bne.n	8004c78 <ES_WIFI_StopClientConnection+0x60>
  {
    sprintf((char*)Obj->CmdData,"P6=0\r");
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c58:	490b      	ldr	r1, [pc, #44]	; (8004c88 <ES_WIFI_StopClientConnection+0x70>)
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f009 fe4c 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7ff fc1a 	bl	80044a8 <AT_ExecuteCommand>
 8004c74:	4603      	mov	r3, r0
 8004c76:	73fb      	strb	r3, [r7, #15]
  }
  UNLOCK_WIFI();
  return ret;
 8004c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	080124c8 	.word	0x080124c8
 8004c88:	08012500 	.word	0x08012500

08004c8c <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b088      	sub	sp, #32
 8004c90:	af02      	add	r7, sp, #8
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	607a      	str	r2, [r7, #4]
 8004c96:	461a      	mov	r2, r3
 8004c98:	460b      	mov	r3, r1
 8004c9a:	72fb      	strb	r3, [r7, #11]
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004ca0:	2302      	movs	r3, #2
 8004ca2:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8004ca4:	893b      	ldrh	r3, [r7, #8]
 8004ca6:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004caa:	d302      	bcc.n	8004cb2 <ES_WIFI_SendData+0x26>
 8004cac:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8004cb0:	813b      	strh	r3, [r7, #8]

  *SentLen = Reqlen;
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	893a      	ldrh	r2, [r7, #8]
 8004cb6:	801a      	strh	r2, [r3, #0]
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004cbe:	7afa      	ldrb	r2, [r7, #11]
 8004cc0:	4942      	ldr	r1, [pc, #264]	; (8004dcc <ES_WIFI_SendData+0x140>)
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f009 fe18 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	68f8      	ldr	r0, [r7, #12]
 8004cd8:	f7ff fbe6 	bl	80044a8 <AT_ExecuteCommand>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	75fb      	strb	r3, [r7, #23]
  if(ret == ES_WIFI_STATUS_OK)
 8004ce0:	7dfb      	ldrb	r3, [r7, #23]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d15e      	bne.n	8004da4 <ES_WIFI_SendData+0x118>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",Timeout);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cee:	4938      	ldr	r1, [pc, #224]	; (8004dd0 <ES_WIFI_SendData+0x144>)
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f009 fe01 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d02:	461a      	mov	r2, r3
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f7ff fbcf 	bl	80044a8 <AT_ExecuteCommand>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8004d0e:	7dfb      	ldrb	r3, [r7, #23]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d13d      	bne.n	8004d90 <ES_WIFI_SendData+0x104>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d1a:	893a      	ldrh	r2, [r7, #8]
 8004d1c:	492d      	ldr	r1, [pc, #180]	; (8004dd4 <ES_WIFI_SendData+0x148>)
 8004d1e:	4618      	mov	r0, r3
 8004d20:	f009 fdea 	bl	800e8f8 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d30:	893a      	ldrh	r2, [r7, #8]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	4613      	mov	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff fc0f 	bl	800455c <AT_RequestSendData>
 8004d3e:	4603      	mov	r3, r0
 8004d40:	75fb      	strb	r3, [r7, #23]

      if(ret == ES_WIFI_STATUS_OK)
 8004d42:	7dfb      	ldrb	r3, [r7, #23]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d119      	bne.n	8004d7c <ES_WIFI_SendData+0xf0>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d4e:	4922      	ldr	r1, [pc, #136]	; (8004dd8 <ES_WIFI_SendData+0x14c>)
 8004d50:	4618      	mov	r0, r3
 8004d52:	f009 fe89 	bl	800ea68 <strstr>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d02c      	beq.n	8004db6 <ES_WIFI_SendData+0x12a>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8004d5c:	f240 7279 	movw	r2, #1913	; 0x779
 8004d60:	491e      	ldr	r1, [pc, #120]	; (8004ddc <ES_WIFI_SendData+0x150>)
 8004d62:	481f      	ldr	r0, [pc, #124]	; (8004de0 <ES_WIFI_SendData+0x154>)
 8004d64:	f009 fce0 	bl	800e728 <iprintf>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004d6e:	4619      	mov	r1, r3
 8004d70:	481c      	ldr	r0, [pc, #112]	; (8004de4 <ES_WIFI_SendData+0x158>)
 8004d72:	f009 fcd9 	bl	800e728 <iprintf>
          ret = ES_WIFI_STATUS_ERROR;
 8004d76:	2302      	movs	r3, #2
 8004d78:	75fb      	strb	r3, [r7, #23]
 8004d7a:	e01c      	b.n	8004db6 <ES_WIFI_SendData+0x12a>
        }
      }
      else
      {
        DEBUG("Send Data command failed\n");  
 8004d7c:	f240 727f 	movw	r2, #1919	; 0x77f
 8004d80:	4916      	ldr	r1, [pc, #88]	; (8004ddc <ES_WIFI_SendData+0x150>)
 8004d82:	4817      	ldr	r0, [pc, #92]	; (8004de0 <ES_WIFI_SendData+0x154>)
 8004d84:	f009 fcd0 	bl	800e728 <iprintf>
 8004d88:	4817      	ldr	r0, [pc, #92]	; (8004de8 <ES_WIFI_SendData+0x15c>)
 8004d8a:	f009 fd69 	bl	800e860 <puts>
 8004d8e:	e012      	b.n	8004db6 <ES_WIFI_SendData+0x12a>
      }
    }
    else
    {
      DEBUG("S2 command failed\n"); 
 8004d90:	f240 7284 	movw	r2, #1924	; 0x784
 8004d94:	4911      	ldr	r1, [pc, #68]	; (8004ddc <ES_WIFI_SendData+0x150>)
 8004d96:	4812      	ldr	r0, [pc, #72]	; (8004de0 <ES_WIFI_SendData+0x154>)
 8004d98:	f009 fcc6 	bl	800e728 <iprintf>
 8004d9c:	4813      	ldr	r0, [pc, #76]	; (8004dec <ES_WIFI_SendData+0x160>)
 8004d9e:	f009 fd5f 	bl	800e860 <puts>
 8004da2:	e008      	b.n	8004db6 <ES_WIFI_SendData+0x12a>
    }
  }
  else
  {
   DEBUG("P0 command failed\n"); 
 8004da4:	f240 7289 	movw	r2, #1929	; 0x789
 8004da8:	490c      	ldr	r1, [pc, #48]	; (8004ddc <ES_WIFI_SendData+0x150>)
 8004daa:	480d      	ldr	r0, [pc, #52]	; (8004de0 <ES_WIFI_SendData+0x154>)
 8004dac:	f009 fcbc 	bl	800e728 <iprintf>
 8004db0:	480f      	ldr	r0, [pc, #60]	; (8004df0 <ES_WIFI_SendData+0x164>)
 8004db2:	f009 fd55 	bl	800e860 <puts>
  }

  if (ret == ES_WIFI_STATUS_ERROR)
 8004db6:	7dfb      	ldrb	r3, [r7, #23]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d102      	bne.n	8004dc2 <ES_WIFI_SendData+0x136>
  {
    *SentLen = 0;
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8004dc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3718      	adds	r7, #24
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	080124c8 	.word	0x080124c8
 8004dd0:	08012688 	.word	0x08012688
 8004dd4:	08012690 	.word	0x08012690
 8004dd8:	0801269c 	.word	0x0801269c
 8004ddc:	08012550 	.word	0x08012550
 8004de0:	0801257c 	.word	0x0801257c
 8004de4:	080126a4 	.word	0x080126a4
 8004de8:	080126c0 	.word	0x080126c0
 8004dec:	080126dc 	.word	0x080126dc
 8004df0:	080126f0 	.word	0x080126f0

08004df4 <ES_WIFI_SendDataTo>:

ES_WIFI_Status_t  ES_WIFI_SendDataTo(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen, uint32_t Timeout, uint8_t *IPaddr, uint16_t Port)
{
 8004df4:	b590      	push	{r4, r7, lr}
 8004df6:	b089      	sub	sp, #36	; 0x24
 8004df8:	af02      	add	r7, sp, #8
 8004dfa:	60f8      	str	r0, [r7, #12]
 8004dfc:	607a      	str	r2, [r7, #4]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	460b      	mov	r3, r1
 8004e02:	72fb      	strb	r3, [r7, #11]
 8004e04:	4613      	mov	r3, r2
 8004e06:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004e08:	2302      	movs	r3, #2
 8004e0a:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();  

  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e12:	7afa      	ldrb	r2, [r7, #11]
 8004e14:	496a      	ldr	r1, [pc, #424]	; (8004fc0 <ES_WIFI_SendDataTo+0x1cc>)
 8004e16:	4618      	mov	r0, r3
 8004e18:	f009 fd6e 	bl	800e8f8 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e28:	461a      	mov	r2, r3
 8004e2a:	68f8      	ldr	r0, [r7, #12]
 8004e2c:	f7ff fb3c 	bl	80044a8 <AT_ExecuteCommand>
 8004e30:	4603      	mov	r3, r0
 8004e32:	75fb      	strb	r3, [r7, #23]

  if (ret == ES_WIFI_STATUS_OK)
 8004e34:	7dfb      	ldrb	r3, [r7, #23]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d114      	bne.n	8004e64 <ES_WIFI_SendDataTo+0x70>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", /*LocalPort*/ 56830 ); // WARN: Does not work!
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e40:	f64d 52fe 	movw	r2, #56830	; 0xddfe
 8004e44:	495f      	ldr	r1, [pc, #380]	; (8004fc4 <ES_WIFI_SendDataTo+0x1d0>)
 8004e46:	4618      	mov	r0, r3
 8004e48:	f009 fd56 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e58:	461a      	mov	r2, r3
 8004e5a:	68f8      	ldr	r0, [r7, #12]
 8004e5c:	f7ff fb24 	bl	80044a8 <AT_ExecuteCommand>
 8004e60:	4603      	mov	r3, r0
 8004e62:	75fb      	strb	r3, [r7, #23]
  }

  // ? Are we sure that the Firmware can change the packet destination without stopping the socket?
  if (ret == ES_WIFI_STATUS_OK)
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d113      	bne.n	8004e92 <ES_WIFI_SendDataTo+0x9e>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", Port);
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e70:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004e72:	4955      	ldr	r1, [pc, #340]	; (8004fc8 <ES_WIFI_SendDataTo+0x1d4>)
 8004e74:	4618      	mov	r0, r3
 8004e76:	f009 fd3f 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004e86:	461a      	mov	r2, r3
 8004e88:	68f8      	ldr	r0, [r7, #12]
 8004e8a:	f7ff fb0d 	bl	80044a8 <AT_ExecuteCommand>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	75fb      	strb	r3, [r7, #23]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004e92:	7dfb      	ldrb	r3, [r7, #23]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d123      	bne.n	8004ee0 <ES_WIFI_SendDataTo+0xec>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", IPaddr[0], IPaddr[1], IPaddr[2], IPaddr[3]);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	4619      	mov	r1, r3
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	3301      	adds	r3, #1
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	461c      	mov	r4, r3
 8004eac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eae:	3302      	adds	r3, #2
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb6:	3303      	adds	r3, #3
 8004eb8:	781b      	ldrb	r3, [r3, #0]
 8004eba:	9301      	str	r3, [sp, #4]
 8004ebc:	9200      	str	r2, [sp, #0]
 8004ebe:	4623      	mov	r3, r4
 8004ec0:	460a      	mov	r2, r1
 8004ec2:	4942      	ldr	r1, [pc, #264]	; (8004fcc <ES_WIFI_SendDataTo+0x1d8>)
 8004ec4:	f009 fd18 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f7ff fae6 	bl	80044a8 <AT_ExecuteCommand>
 8004edc:	4603      	mov	r3, r0
 8004ede:	75fb      	strb	r3, [r7, #23]
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004ee0:	7dfb      	ldrb	r3, [r7, #23]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <ES_WIFI_SendDataTo+0x100>
  {
    if(Reqlen >= ES_WIFI_PAYLOAD_SIZE )
 8004ee6:	893b      	ldrh	r3, [r7, #8]
 8004ee8:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8004eec:	d302      	bcc.n	8004ef4 <ES_WIFI_SendDataTo+0x100>
    {
      Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8004eee:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8004ef2:	813b      	strh	r3, [r7, #8]
    }
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004ef4:	7dfb      	ldrb	r3, [r7, #23]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d113      	bne.n	8004f22 <ES_WIFI_SendDataTo+0x12e>
  {
    sprintf((char*)Obj->CmdData, "S2=%lu\r", Timeout);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f02:	4933      	ldr	r1, [pc, #204]	; (8004fd0 <ES_WIFI_SendDataTo+0x1dc>)
 8004f04:	4618      	mov	r0, r3
 8004f06:	f009 fcf7 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f16:	461a      	mov	r2, r3
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fac5 	bl	80044a8 <AT_ExecuteCommand>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	75fb      	strb	r3, [r7, #23]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004f22:	7dfb      	ldrb	r3, [r7, #23]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d116      	bne.n	8004f56 <ES_WIFI_SendDataTo+0x162>
  {
    sprintf((char *)Obj->CmdData, "S3=%04d\r", Reqlen);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f2e:	893a      	ldrh	r2, [r7, #8]
 8004f30:	4928      	ldr	r1, [pc, #160]	; (8004fd4 <ES_WIFI_SendDataTo+0x1e0>)
 8004f32:	4618      	mov	r0, r3
 8004f34:	f009 fce0 	bl	800e8f8 <siprintf>
    ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f44:	893a      	ldrh	r2, [r7, #8]
 8004f46:	9300      	str	r3, [sp, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	68f8      	ldr	r0, [r7, #12]
 8004f4e:	f7ff fb05 	bl	800455c <AT_RequestSendData>
 8004f52:	4603      	mov	r3, r0
 8004f54:	75fb      	strb	r3, [r7, #23]
  }

  if(ret == ES_WIFI_STATUS_OK)
 8004f56:	7dfb      	ldrb	r3, [r7, #23]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d115      	bne.n	8004f88 <ES_WIFI_SendDataTo+0x194>
  {
    char *ptr = strstr((char *)Obj->CmdData,"-1\r\n");
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004f62:	491d      	ldr	r1, [pc, #116]	; (8004fd8 <ES_WIFI_SendDataTo+0x1e4>)
 8004f64:	4618      	mov	r0, r3
 8004f66:	f009 fd7f 	bl	800ea68 <strstr>
 8004f6a:	6138      	str	r0, [r7, #16]
    if(ptr != NULL)
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <ES_WIFI_SendDataTo+0x194>
    {
      if (ptr < (char *) &Obj->CmdData[sizeof(Obj->CmdData)])
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	f503 63d4 	add.w	r3, r3, #1696	; 0x6a0
 8004f78:	693a      	ldr	r2, [r7, #16]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d202      	bcs.n	8004f84 <ES_WIFI_SendDataTo+0x190>
      {
        ret = ES_WIFI_STATUS_ERROR;
 8004f7e:	2302      	movs	r3, #2
 8004f80:	75fb      	strb	r3, [r7, #23]
 8004f82:	e001      	b.n	8004f88 <ES_WIFI_SendDataTo+0x194>
      }
      else
      {
        ret = ES_WIFI_STATUS_IO_ERROR;
 8004f84:	2304      	movs	r3, #4
 8004f86:	75fb      	strb	r3, [r7, #23]
      }
    }
  }

  if (ret == ES_WIFI_STATUS_OK)
 8004f88:	7dfb      	ldrb	r3, [r7, #23]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d103      	bne.n	8004f96 <ES_WIFI_SendDataTo+0x1a2>
  {
    *SentLen = Reqlen;
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	893a      	ldrh	r2, [r7, #8]
 8004f92:	801a      	strh	r2, [r3, #0]
 8004f94:	e00f      	b.n	8004fb6 <ES_WIFI_SendDataTo+0x1c2>
  }
  else
  {
    DEBUG("Send error:\n%s\n", Obj->CmdData);
 8004f96:	f240 72d9 	movw	r2, #2009	; 0x7d9
 8004f9a:	4910      	ldr	r1, [pc, #64]	; (8004fdc <ES_WIFI_SendDataTo+0x1e8>)
 8004f9c:	4810      	ldr	r0, [pc, #64]	; (8004fe0 <ES_WIFI_SendDataTo+0x1ec>)
 8004f9e:	f009 fbc3 	bl	800e728 <iprintf>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8004fa8:	4619      	mov	r1, r3
 8004faa:	480e      	ldr	r0, [pc, #56]	; (8004fe4 <ES_WIFI_SendDataTo+0x1f0>)
 8004fac:	f009 fbbc 	bl	800e728 <iprintf>
    *SentLen = 0;
 8004fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	801a      	strh	r2, [r3, #0]
  }

  UNLOCK_WIFI();
  return ret;
 8004fb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	371c      	adds	r7, #28
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	bd90      	pop	{r4, r7, pc}
 8004fc0:	080124c8 	.word	0x080124c8
 8004fc4:	080124d8 	.word	0x080124d8
 8004fc8:	080124e0 	.word	0x080124e0
 8004fcc:	080124e8 	.word	0x080124e8
 8004fd0:	08012688 	.word	0x08012688
 8004fd4:	08012690 	.word	0x08012690
 8004fd8:	0801269c 	.word	0x0801269c
 8004fdc:	08012550 	.word	0x08012550
 8004fe0:	0801257c 	.word	0x0801257c
 8004fe4:	08012704 	.word	0x08012704

08004fe8 <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b088      	sub	sp, #32
 8004fec:	af02      	add	r7, sp, #8
 8004fee:	60f8      	str	r0, [r7, #12]
 8004ff0:	607a      	str	r2, [r7, #4]
 8004ff2:	461a      	mov	r2, r3
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	72fb      	strb	r3, [r7, #11]
 8004ff8:	4613      	mov	r3, r2
 8004ffa:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	75fb      	strb	r3, [r7, #23]
  LOCK_WIFI();  

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8005000:	893b      	ldrh	r3, [r7, #8]
 8005002:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 8005006:	f200 808b 	bhi.w	8005120 <ES_WIFI_ReceiveData+0x138>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005010:	7afa      	ldrb	r2, [r7, #11]
 8005012:	4946      	ldr	r1, [pc, #280]	; (800512c <ES_WIFI_ReceiveData+0x144>)
 8005014:	4618      	mov	r0, r3
 8005016:	f009 fc6f 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005026:	461a      	mov	r2, r3
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fa3d 	bl	80044a8 <AT_ExecuteCommand>
 800502e:	4603      	mov	r3, r0
 8005030:	75fb      	strb	r3, [r7, #23]

    if(ret == ES_WIFI_STATUS_OK)
 8005032:	7dfb      	ldrb	r3, [r7, #23]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d165      	bne.n	8005104 <ES_WIFI_ReceiveData+0x11c>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800503e:	893a      	ldrh	r2, [r7, #8]
 8005040:	493b      	ldr	r1, [pc, #236]	; (8005130 <ES_WIFI_ReceiveData+0x148>)
 8005042:	4618      	mov	r0, r3
 8005044:	f009 fc58 	bl	800e8f8 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005054:	461a      	mov	r2, r3
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f7ff fa26 	bl	80044a8 <AT_ExecuteCommand>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]
      if(ret == ES_WIFI_STATUS_OK)
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d141      	bne.n	80050ea <ES_WIFI_ReceiveData+0x102>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800506c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800506e:	4931      	ldr	r1, [pc, #196]	; (8005134 <ES_WIFI_ReceiveData+0x14c>)
 8005070:	4618      	mov	r0, r3
 8005072:	f009 fc41 	bl	800e8f8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005082:	461a      	mov	r2, r3
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f7ff fa0f 	bl	80044a8 <AT_ExecuteCommand>
 800508a:	4603      	mov	r3, r0
 800508c:	75fb      	strb	r3, [r7, #23]
        if(ret == ES_WIFI_STATUS_OK)
 800508e:	7dfb      	ldrb	r3, [r7, #23]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d120      	bne.n	80050d6 <ES_WIFI_ReceiveData+0xee>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800509a:	4927      	ldr	r1, [pc, #156]	; (8005138 <ES_WIFI_ReceiveData+0x150>)
 800509c:	4618      	mov	r0, r3
 800509e:	f009 fc2b 	bl	800e8f8 <siprintf>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80050a8:	893a      	ldrh	r2, [r7, #8]
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	9300      	str	r3, [sp, #0]
 80050ae:	4613      	mov	r3, r2
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	f7ff fac8 	bl	8004648 <AT_RequestReceiveData>
 80050b8:	4603      	mov	r3, r0
 80050ba:	75fb      	strb	r3, [r7, #23]
          if (ret != ES_WIFI_STATUS_OK)
 80050bc:	7dfb      	ldrb	r3, [r7, #23]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d02e      	beq.n	8005120 <ES_WIFI_ReceiveData+0x138>
          {
            DEBUG("AT_RequestReceiveData  failed\n"); 
 80050c2:	f640 0202 	movw	r2, #2050	; 0x802
 80050c6:	491d      	ldr	r1, [pc, #116]	; (800513c <ES_WIFI_ReceiveData+0x154>)
 80050c8:	481d      	ldr	r0, [pc, #116]	; (8005140 <ES_WIFI_ReceiveData+0x158>)
 80050ca:	f009 fb2d 	bl	800e728 <iprintf>
 80050ce:	481d      	ldr	r0, [pc, #116]	; (8005144 <ES_WIFI_ReceiveData+0x15c>)
 80050d0:	f009 fbc6 	bl	800e860 <puts>
 80050d4:	e024      	b.n	8005120 <ES_WIFI_ReceiveData+0x138>
          }
        }
        else
        {
         DEBUG("setting timeout failed\n"); 
 80050d6:	f640 0207 	movw	r2, #2055	; 0x807
 80050da:	4918      	ldr	r1, [pc, #96]	; (800513c <ES_WIFI_ReceiveData+0x154>)
 80050dc:	4818      	ldr	r0, [pc, #96]	; (8005140 <ES_WIFI_ReceiveData+0x158>)
 80050de:	f009 fb23 	bl	800e728 <iprintf>
 80050e2:	4819      	ldr	r0, [pc, #100]	; (8005148 <ES_WIFI_ReceiveData+0x160>)
 80050e4:	f009 fbbc 	bl	800e860 <puts>
 80050e8:	e01a      	b.n	8005120 <ES_WIFI_ReceiveData+0x138>
        }
      }
      else
      {
        DEBUG("setting requested len failed\n"); 
 80050ea:	f640 020c 	movw	r2, #2060	; 0x80c
 80050ee:	4913      	ldr	r1, [pc, #76]	; (800513c <ES_WIFI_ReceiveData+0x154>)
 80050f0:	4813      	ldr	r0, [pc, #76]	; (8005140 <ES_WIFI_ReceiveData+0x158>)
 80050f2:	f009 fb19 	bl	800e728 <iprintf>
 80050f6:	4815      	ldr	r0, [pc, #84]	; (800514c <ES_WIFI_ReceiveData+0x164>)
 80050f8:	f009 fbb2 	bl	800e860 <puts>
        *Receivedlen = 0;
 80050fc:	6a3b      	ldr	r3, [r7, #32]
 80050fe:	2200      	movs	r2, #0
 8005100:	801a      	strh	r2, [r3, #0]
 8005102:	e00d      	b.n	8005120 <ES_WIFI_ReceiveData+0x138>
      }
    }
    else
    {
      DEBUG("setting socket for read failed\n"); 
 8005104:	f640 0212 	movw	r2, #2066	; 0x812
 8005108:	490c      	ldr	r1, [pc, #48]	; (800513c <ES_WIFI_ReceiveData+0x154>)
 800510a:	480d      	ldr	r0, [pc, #52]	; (8005140 <ES_WIFI_ReceiveData+0x158>)
 800510c:	f009 fb0c 	bl	800e728 <iprintf>
 8005110:	480f      	ldr	r0, [pc, #60]	; (8005150 <ES_WIFI_ReceiveData+0x168>)
 8005112:	f009 fba5 	bl	800e860 <puts>
      issue15++;
 8005116:	4b0f      	ldr	r3, [pc, #60]	; (8005154 <ES_WIFI_ReceiveData+0x16c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	4a0d      	ldr	r2, [pc, #52]	; (8005154 <ES_WIFI_ReceiveData+0x16c>)
 800511e:	6013      	str	r3, [r2, #0]
    }
  }
  UNLOCK_WIFI();
  return ret;
 8005120:	7dfb      	ldrb	r3, [r7, #23]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	080124c8 	.word	0x080124c8
 8005130:	08012714 	.word	0x08012714
 8005134:	0801271c 	.word	0x0801271c
 8005138:	08012724 	.word	0x08012724
 800513c:	08012550 	.word	0x08012550
 8005140:	0801257c 	.word	0x0801257c
 8005144:	08012728 	.word	0x08012728
 8005148:	08012748 	.word	0x08012748
 800514c:	08012760 	.word	0x08012760
 8005150:	08012780 	.word	0x08012780
 8005154:	2000113c 	.word	0x2000113c

08005158 <ES_WIFI_ReceiveDataFrom>:


ES_WIFI_Status_t  ES_WIFI_ReceiveDataFrom(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout, uint8_t *IPaddr, uint16_t *pPort)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08c      	sub	sp, #48	; 0x30
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	607a      	str	r2, [r7, #4]
 8005162:	461a      	mov	r2, r3
 8005164:	460b      	mov	r3, r1
 8005166:	72fb      	strb	r3, [r7, #11]
 8005168:	4613      	mov	r3, r2
 800516a:	813b      	strh	r3, [r7, #8]
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 800516c:	2302      	movs	r3, #2
 800516e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  *Receivedlen = 0;
 8005172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005174:	2200      	movs	r2, #0
 8005176:	801a      	strh	r2, [r3, #0]
  LOCK_WIFI();  

  if (Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8005178:	893b      	ldrh	r3, [r7, #8]
 800517a:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
 800517e:	d814      	bhi.n	80051aa <ES_WIFI_ReceiveDataFrom+0x52>
  {
    sprintf((char*)Obj->CmdData, "P0=%d\r", Socket);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005186:	7afa      	ldrb	r2, [r7, #11]
 8005188:	496d      	ldr	r1, [pc, #436]	; (8005340 <ES_WIFI_ReceiveDataFrom+0x1e8>)
 800518a:	4618      	mov	r0, r3
 800518c:	f009 fbb4 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800519c:	461a      	mov	r2, r3
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff f982 	bl	80044a8 <AT_ExecuteCommand>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if(ret == ES_WIFI_STATUS_OK)
 80051aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d115      	bne.n	80051de <ES_WIFI_ReceiveDataFrom+0x86>
  {
    sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80051b8:	893a      	ldrh	r2, [r7, #8]
 80051ba:	4962      	ldr	r1, [pc, #392]	; (8005344 <ES_WIFI_ReceiveDataFrom+0x1ec>)
 80051bc:	4618      	mov	r0, r3
 80051be:	f009 fb9b 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80051ce:	461a      	mov	r2, r3
 80051d0:	68f8      	ldr	r0, [r7, #12]
 80051d2:	f7ff f969 	bl	80044a8 <AT_ExecuteCommand>
 80051d6:	4603      	mov	r3, r0
 80051d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80051dc:	e008      	b.n	80051f0 <ES_WIFI_ReceiveDataFrom+0x98>
  }
  else
  {
    DEBUG("P0 failed.\n");
 80051de:	f640 022e 	movw	r2, #2094	; 0x82e
 80051e2:	4959      	ldr	r1, [pc, #356]	; (8005348 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 80051e4:	4859      	ldr	r0, [pc, #356]	; (800534c <ES_WIFI_ReceiveDataFrom+0x1f4>)
 80051e6:	f009 fa9f 	bl	800e728 <iprintf>
 80051ea:	4859      	ldr	r0, [pc, #356]	; (8005350 <ES_WIFI_ReceiveDataFrom+0x1f8>)
 80051ec:	f009 fb38 	bl	800e860 <puts>
  }

  if(ret == ES_WIFI_STATUS_OK)
 80051f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d115      	bne.n	8005224 <ES_WIFI_ReceiveDataFrom+0xcc>
  {
    sprintf((char*)Obj->CmdData,"R2=%lu\r", Timeout);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80051fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005200:	4954      	ldr	r1, [pc, #336]	; (8005354 <ES_WIFI_ReceiveDataFrom+0x1fc>)
 8005202:	4618      	mov	r0, r3
 8005204:	f009 fb78 	bl	800e8f8 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f503 7194 	add.w	r1, r3, #296	; 0x128
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005214:	461a      	mov	r2, r3
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7ff f946 	bl	80044a8 <AT_ExecuteCommand>
 800521c:	4603      	mov	r3, r0
 800521e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005222:	e008      	b.n	8005236 <ES_WIFI_ReceiveDataFrom+0xde>
  }
  else
  {
    DEBUG("R1 failed.\n");
 8005224:	f640 0238 	movw	r2, #2104	; 0x838
 8005228:	4947      	ldr	r1, [pc, #284]	; (8005348 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 800522a:	4848      	ldr	r0, [pc, #288]	; (800534c <ES_WIFI_ReceiveDataFrom+0x1f4>)
 800522c:	f009 fa7c 	bl	800e728 <iprintf>
 8005230:	4849      	ldr	r0, [pc, #292]	; (8005358 <ES_WIFI_ReceiveDataFrom+0x200>)
 8005232:	f009 fb15 	bl	800e860 <puts>
  }

  if(ret == ES_WIFI_STATUS_OK)
 8005236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800523a:	2b00      	cmp	r3, #0
 800523c:	d115      	bne.n	800526a <ES_WIFI_ReceiveDataFrom+0x112>
  {
    sprintf((char*)Obj->CmdData,"R0\r");
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005244:	4945      	ldr	r1, [pc, #276]	; (800535c <ES_WIFI_ReceiveDataFrom+0x204>)
 8005246:	4618      	mov	r0, r3
 8005248:	f009 fb56 	bl	800e8f8 <siprintf>
    ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 7194 	add.w	r1, r3, #296	; 0x128
 8005252:	893a      	ldrh	r2, [r7, #8]
 8005254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	4613      	mov	r3, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	68f8      	ldr	r0, [r7, #12]
 800525e:	f7ff f9f3 	bl	8004648 <AT_RequestReceiveData>
 8005262:	4603      	mov	r3, r0
 8005264:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005268:	e008      	b.n	800527c <ES_WIFI_ReceiveDataFrom+0x124>
  }
  else
  {
    DEBUG("R2 failed.\n");
 800526a:	f640 0242 	movw	r2, #2114	; 0x842
 800526e:	4936      	ldr	r1, [pc, #216]	; (8005348 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8005270:	4836      	ldr	r0, [pc, #216]	; (800534c <ES_WIFI_ReceiveDataFrom+0x1f4>)
 8005272:	f009 fa59 	bl	800e728 <iprintf>
 8005276:	483a      	ldr	r0, [pc, #232]	; (8005360 <ES_WIFI_ReceiveDataFrom+0x208>)
 8005278:	f009 faf2 	bl	800e860 <puts>
  }

  if (ret == ES_WIFI_STATUS_OK)
 800527c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005280:	2b00      	cmp	r3, #0
 8005282:	d143      	bne.n	800530c <ES_WIFI_ReceiveDataFrom+0x1b4>
  {
    if (*Receivedlen > Reqlen)
 8005284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	893a      	ldrh	r2, [r7, #8]
 800528a:	429a      	cmp	r2, r3
 800528c:	d20c      	bcs.n	80052a8 <ES_WIFI_ReceiveDataFrom+0x150>
    {
      DEBUG("AT_RequestReceiveData overflow\n.");
 800528e:	f640 0249 	movw	r2, #2121	; 0x849
 8005292:	492d      	ldr	r1, [pc, #180]	; (8005348 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 8005294:	482d      	ldr	r0, [pc, #180]	; (800534c <ES_WIFI_ReceiveDataFrom+0x1f4>)
 8005296:	f009 fa47 	bl	800e728 <iprintf>
 800529a:	4832      	ldr	r0, [pc, #200]	; (8005364 <ES_WIFI_ReceiveDataFrom+0x20c>)
 800529c:	f009 fa44 	bl	800e728 <iprintf>
      ret = ES_WIFI_STATUS_ERROR;
 80052a0:	2302      	movs	r3, #2
 80052a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80052a6:	e031      	b.n	800530c <ES_WIFI_ReceiveDataFrom+0x1b4>
    }
    else
    {
      if (*Receivedlen > 0)
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d02d      	beq.n	800530c <ES_WIFI_ReceiveDataFrom+0x1b4>
      {
        /* Get the peer addr */
        sprintf((char*)Obj->CmdData,"P?\r");
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80052b6:	492c      	ldr	r1, [pc, #176]	; (8005368 <ES_WIFI_ReceiveDataFrom+0x210>)
 80052b8:	4618      	mov	r0, r3
 80052ba:	f009 fb1d 	bl	800e8f8 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f503 7194 	add.w	r1, r3, #296	; 0x128
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80052ca:	461a      	mov	r2, r3
 80052cc:	68f8      	ldr	r0, [r7, #12]
 80052ce:	f7ff f8eb 	bl	80044a8 <AT_ExecuteCommand>
 80052d2:	4603      	mov	r3, r0
 80052d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (ret == ES_WIFI_STATUS_OK)
 80052d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d115      	bne.n	800530c <ES_WIFI_ReceiveDataFrom+0x1b4>
        {
          ES_WIFI_Transport_t TransportSettings;
          memset(&TransportSettings, 0, sizeof(TransportSettings));
 80052e0:	f107 0310 	add.w	r3, r7, #16
 80052e4:	2214      	movs	r2, #20
 80052e6:	2100      	movs	r1, #0
 80052e8:	4618      	mov	r0, r3
 80052ea:	f008 fcb5 	bl	800dc58 <memset>
          AT_ParseTransportSettings((char *) Obj->CmdData, &TransportSettings);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80052f4:	f107 0210 	add.w	r2, r7, #16
 80052f8:	4611      	mov	r1, r2
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7ff f820 	bl	8004340 <AT_ParseTransportSettings>
 8005300:	69ba      	ldr	r2, [r7, #24]
          memcpy(IPaddr, TransportSettings.Remote_IP_Addr, 4);
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	601a      	str	r2, [r3, #0]
          *pPort = TransportSettings.Remote_Port;
 8005306:	8bba      	ldrh	r2, [r7, #28]
 8005308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800530a:	801a      	strh	r2, [r3, #0]
        }
      }
    }
  }

  if (ret != ES_WIFI_STATUS_OK)
 800530c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005310:	2b00      	cmp	r3, #0
 8005312:	d00f      	beq.n	8005334 <ES_WIFI_ReceiveDataFrom+0x1dc>
  {
    DEBUG("Read error:\n%s\n", Obj->CmdData);
 8005314:	f640 0262 	movw	r2, #2146	; 0x862
 8005318:	490b      	ldr	r1, [pc, #44]	; (8005348 <ES_WIFI_ReceiveDataFrom+0x1f0>)
 800531a:	480c      	ldr	r0, [pc, #48]	; (800534c <ES_WIFI_ReceiveDataFrom+0x1f4>)
 800531c:	f009 fa04 	bl	800e728 <iprintf>
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8005326:	4619      	mov	r1, r3
 8005328:	4810      	ldr	r0, [pc, #64]	; (800536c <ES_WIFI_ReceiveDataFrom+0x214>)
 800532a:	f009 f9fd 	bl	800e728 <iprintf>
    *Receivedlen = 0;
 800532e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005330:	2200      	movs	r2, #0
 8005332:	801a      	strh	r2, [r3, #0]
  }
  UNLOCK_WIFI();
  return ret;
 8005334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005338:	4618      	mov	r0, r3
 800533a:	3728      	adds	r7, #40	; 0x28
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	080124c8 	.word	0x080124c8
 8005344:	08012714 	.word	0x08012714
 8005348:	08012550 	.word	0x08012550
 800534c:	0801257c 	.word	0x0801257c
 8005350:	080127a0 	.word	0x080127a0
 8005354:	0801271c 	.word	0x0801271c
 8005358:	080127ac 	.word	0x080127ac
 800535c:	08012724 	.word	0x08012724
 8005360:	080127b8 	.word	0x080127b8
 8005364:	080127c4 	.word	0x080127c4
 8005368:	080125b4 	.word	0x080125b4
 800536c:	080127e8 	.word	0x080127e8

08005370 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800537a:	2003      	movs	r0, #3
 800537c:	f000 f960 	bl	8005640 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005380:	2000      	movs	r0, #0
 8005382:	f000 f80d 	bl	80053a0 <HAL_InitTick>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d002      	beq.n	8005392 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	71fb      	strb	r3, [r7, #7]
 8005390:	e001      	b.n	8005396 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005392:	f7fe f93b 	bl	800360c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005396:	79fb      	ldrb	r3, [r7, #7]
}
 8005398:	4618      	mov	r0, r3
 800539a:	3708      	adds	r7, #8
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}

080053a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80053ac:	4b17      	ldr	r3, [pc, #92]	; (800540c <HAL_InitTick+0x6c>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d023      	beq.n	80053fc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80053b4:	4b16      	ldr	r3, [pc, #88]	; (8005410 <HAL_InitTick+0x70>)
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	4b14      	ldr	r3, [pc, #80]	; (800540c <HAL_InitTick+0x6c>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	4619      	mov	r1, r3
 80053be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80053c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80053c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f96d 	bl	80056aa <HAL_SYSTICK_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10f      	bne.n	80053f6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b0f      	cmp	r3, #15
 80053da:	d809      	bhi.n	80053f0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80053dc:	2200      	movs	r2, #0
 80053de:	6879      	ldr	r1, [r7, #4]
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	f000 f937 	bl	8005656 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80053e8:	4a0a      	ldr	r2, [pc, #40]	; (8005414 <HAL_InitTick+0x74>)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	e007      	b.n	8005400 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80053f0:	2301      	movs	r3, #1
 80053f2:	73fb      	strb	r3, [r7, #15]
 80053f4:	e004      	b.n	8005400 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80053f6:	2301      	movs	r3, #1
 80053f8:	73fb      	strb	r3, [r7, #15]
 80053fa:	e001      	b.n	8005400 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005400:	7bfb      	ldrb	r3, [r7, #15]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3710      	adds	r7, #16
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000008 	.word	0x20000008
 8005410:	20000000 	.word	0x20000000
 8005414:	20000004 	.word	0x20000004

08005418 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800541c:	4b06      	ldr	r3, [pc, #24]	; (8005438 <HAL_IncTick+0x20>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	461a      	mov	r2, r3
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <HAL_IncTick+0x24>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4413      	add	r3, r2
 8005428:	4a04      	ldr	r2, [pc, #16]	; (800543c <HAL_IncTick+0x24>)
 800542a:	6013      	str	r3, [r2, #0]
}
 800542c:	bf00      	nop
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000008 	.word	0x20000008
 800543c:	20001140 	.word	0x20001140

08005440 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005440:	b480      	push	{r7}
 8005442:	af00      	add	r7, sp, #0
  return uwTick;
 8005444:	4b03      	ldr	r3, [pc, #12]	; (8005454 <HAL_GetTick+0x14>)
 8005446:	681b      	ldr	r3, [r3, #0]
}
 8005448:	4618      	mov	r0, r3
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	20001140 	.word	0x20001140

08005458 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005460:	f7ff ffee 	bl	8005440 <HAL_GetTick>
 8005464:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005470:	d005      	beq.n	800547e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8005472:	4b0a      	ldr	r3, [pc, #40]	; (800549c <HAL_Delay+0x44>)
 8005474:	781b      	ldrb	r3, [r3, #0]
 8005476:	461a      	mov	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800547e:	bf00      	nop
 8005480:	f7ff ffde 	bl	8005440 <HAL_GetTick>
 8005484:	4602      	mov	r2, r0
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	1ad3      	subs	r3, r2, r3
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	429a      	cmp	r2, r3
 800548e:	d8f7      	bhi.n	8005480 <HAL_Delay+0x28>
  {
  }
}
 8005490:	bf00      	nop
 8005492:	bf00      	nop
 8005494:	3710      	adds	r7, #16
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}
 800549a:	bf00      	nop
 800549c:	20000008 	.word	0x20000008

080054a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b085      	sub	sp, #20
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80054b0:	4b0c      	ldr	r3, [pc, #48]	; (80054e4 <__NVIC_SetPriorityGrouping+0x44>)
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80054b6:	68ba      	ldr	r2, [r7, #8]
 80054b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80054bc:	4013      	ands	r3, r2
 80054be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80054c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80054cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80054d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80054d2:	4a04      	ldr	r2, [pc, #16]	; (80054e4 <__NVIC_SetPriorityGrouping+0x44>)
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	60d3      	str	r3, [r2, #12]
}
 80054d8:	bf00      	nop
 80054da:	3714      	adds	r7, #20
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr
 80054e4:	e000ed00 	.word	0xe000ed00

080054e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054ec:	4b04      	ldr	r3, [pc, #16]	; (8005500 <__NVIC_GetPriorityGrouping+0x18>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	0a1b      	lsrs	r3, r3, #8
 80054f2:	f003 0307 	and.w	r3, r3, #7
}
 80054f6:	4618      	mov	r0, r3
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr
 8005500:	e000ed00 	.word	0xe000ed00

08005504 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
 800550a:	4603      	mov	r3, r0
 800550c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800550e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005512:	2b00      	cmp	r3, #0
 8005514:	db0b      	blt.n	800552e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	f003 021f 	and.w	r2, r3, #31
 800551c:	4907      	ldr	r1, [pc, #28]	; (800553c <__NVIC_EnableIRQ+0x38>)
 800551e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005522:	095b      	lsrs	r3, r3, #5
 8005524:	2001      	movs	r0, #1
 8005526:	fa00 f202 	lsl.w	r2, r0, r2
 800552a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	e000e100 	.word	0xe000e100

08005540 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005540:	b480      	push	{r7}
 8005542:	b083      	sub	sp, #12
 8005544:	af00      	add	r7, sp, #0
 8005546:	4603      	mov	r3, r0
 8005548:	6039      	str	r1, [r7, #0]
 800554a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800554c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005550:	2b00      	cmp	r3, #0
 8005552:	db0a      	blt.n	800556a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	b2da      	uxtb	r2, r3
 8005558:	490c      	ldr	r1, [pc, #48]	; (800558c <__NVIC_SetPriority+0x4c>)
 800555a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800555e:	0112      	lsls	r2, r2, #4
 8005560:	b2d2      	uxtb	r2, r2
 8005562:	440b      	add	r3, r1
 8005564:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005568:	e00a      	b.n	8005580 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800556a:	683b      	ldr	r3, [r7, #0]
 800556c:	b2da      	uxtb	r2, r3
 800556e:	4908      	ldr	r1, [pc, #32]	; (8005590 <__NVIC_SetPriority+0x50>)
 8005570:	79fb      	ldrb	r3, [r7, #7]
 8005572:	f003 030f 	and.w	r3, r3, #15
 8005576:	3b04      	subs	r3, #4
 8005578:	0112      	lsls	r2, r2, #4
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	440b      	add	r3, r1
 800557e:	761a      	strb	r2, [r3, #24]
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr
 800558c:	e000e100 	.word	0xe000e100
 8005590:	e000ed00 	.word	0xe000ed00

08005594 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005594:	b480      	push	{r7}
 8005596:	b089      	sub	sp, #36	; 0x24
 8005598:	af00      	add	r7, sp, #0
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f003 0307 	and.w	r3, r3, #7
 80055a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	f1c3 0307 	rsb	r3, r3, #7
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	bf28      	it	cs
 80055b2:	2304      	movcs	r3, #4
 80055b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	3304      	adds	r3, #4
 80055ba:	2b06      	cmp	r3, #6
 80055bc:	d902      	bls.n	80055c4 <NVIC_EncodePriority+0x30>
 80055be:	69fb      	ldr	r3, [r7, #28]
 80055c0:	3b03      	subs	r3, #3
 80055c2:	e000      	b.n	80055c6 <NVIC_EncodePriority+0x32>
 80055c4:	2300      	movs	r3, #0
 80055c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055c8:	f04f 32ff 	mov.w	r2, #4294967295
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	43da      	mvns	r2, r3
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	401a      	ands	r2, r3
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055dc:	f04f 31ff 	mov.w	r1, #4294967295
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	fa01 f303 	lsl.w	r3, r1, r3
 80055e6:	43d9      	mvns	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055ec:	4313      	orrs	r3, r2
         );
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3724      	adds	r7, #36	; 0x24
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
	...

080055fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	3b01      	subs	r3, #1
 8005608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800560c:	d301      	bcc.n	8005612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800560e:	2301      	movs	r3, #1
 8005610:	e00f      	b.n	8005632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005612:	4a0a      	ldr	r2, [pc, #40]	; (800563c <SysTick_Config+0x40>)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	3b01      	subs	r3, #1
 8005618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800561a:	210f      	movs	r1, #15
 800561c:	f04f 30ff 	mov.w	r0, #4294967295
 8005620:	f7ff ff8e 	bl	8005540 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <SysTick_Config+0x40>)
 8005626:	2200      	movs	r2, #0
 8005628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800562a:	4b04      	ldr	r3, [pc, #16]	; (800563c <SysTick_Config+0x40>)
 800562c:	2207      	movs	r2, #7
 800562e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	e000e010 	.word	0xe000e010

08005640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff ff29 	bl	80054a0 <__NVIC_SetPriorityGrouping>
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b086      	sub	sp, #24
 800565a:	af00      	add	r7, sp, #0
 800565c:	4603      	mov	r3, r0
 800565e:	60b9      	str	r1, [r7, #8]
 8005660:	607a      	str	r2, [r7, #4]
 8005662:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005664:	2300      	movs	r3, #0
 8005666:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005668:	f7ff ff3e 	bl	80054e8 <__NVIC_GetPriorityGrouping>
 800566c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800566e:	687a      	ldr	r2, [r7, #4]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	6978      	ldr	r0, [r7, #20]
 8005674:	f7ff ff8e 	bl	8005594 <NVIC_EncodePriority>
 8005678:	4602      	mov	r2, r0
 800567a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f7ff ff5d 	bl	8005540 <__NVIC_SetPriority>
}
 8005686:	bf00      	nop
 8005688:	3718      	adds	r7, #24
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}

0800568e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800568e:	b580      	push	{r7, lr}
 8005690:	b082      	sub	sp, #8
 8005692:	af00      	add	r7, sp, #0
 8005694:	4603      	mov	r3, r0
 8005696:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005698:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569c:	4618      	mov	r0, r3
 800569e:	f7ff ff31 	bl	8005504 <__NVIC_EnableIRQ>
}
 80056a2:	bf00      	nop
 80056a4:	3708      	adds	r7, #8
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}

080056aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80056aa:	b580      	push	{r7, lr}
 80056ac:	b082      	sub	sp, #8
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7ff ffa2 	bl	80055fc <SysTick_Config>
 80056b8:	4603      	mov	r3, r0
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3708      	adds	r7, #8
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
	...

080056c4 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e0ac      	b.n	8005830 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 f8b2 	bl	8005844 <DFSDM_GetChannelFromInstance>
 80056e0:	4603      	mov	r3, r0
 80056e2:	4a55      	ldr	r2, [pc, #340]	; (8005838 <HAL_DFSDM_ChannelInit+0x174>)
 80056e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d001      	beq.n	80056f0 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	e09f      	b.n	8005830 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f7fd ffaf 	bl	8003654 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80056f6:	4b51      	ldr	r3, [pc, #324]	; (800583c <HAL_DFSDM_ChannelInit+0x178>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3301      	adds	r3, #1
 80056fc:	4a4f      	ldr	r2, [pc, #316]	; (800583c <HAL_DFSDM_ChannelInit+0x178>)
 80056fe:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8005700:	4b4e      	ldr	r3, [pc, #312]	; (800583c <HAL_DFSDM_ChannelInit+0x178>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d125      	bne.n	8005754 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8005708:	4b4d      	ldr	r3, [pc, #308]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a4c      	ldr	r2, [pc, #304]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 800570e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005712:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8005714:	4b4a      	ldr	r3, [pc, #296]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4948      	ldr	r1, [pc, #288]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8005722:	4b47      	ldr	r3, [pc, #284]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4a46      	ldr	r2, [pc, #280]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 8005728:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800572c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	791b      	ldrb	r3, [r3, #4]
 8005732:	2b01      	cmp	r3, #1
 8005734:	d108      	bne.n	8005748 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8005736:	4b42      	ldr	r3, [pc, #264]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	68db      	ldr	r3, [r3, #12]
 800573e:	3b01      	subs	r3, #1
 8005740:	041b      	lsls	r3, r3, #16
 8005742:	493f      	ldr	r1, [pc, #252]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 8005744:	4313      	orrs	r3, r2
 8005746:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8005748:	4b3d      	ldr	r3, [pc, #244]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a3c      	ldr	r2, [pc, #240]	; (8005840 <HAL_DFSDM_ChannelInit+0x17c>)
 800574e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005752:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8005762:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	6819      	ldr	r1, [r3, #0]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8005772:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8005778:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	f022 020f 	bic.w	r2, r2, #15
 8005790:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	6819      	ldr	r1, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80057a0:	431a      	orrs	r2, r3
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 80057b8:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	6899      	ldr	r1, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c8:	3b01      	subs	r3, #1
 80057ca:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 80057cc:	431a      	orrs	r2, r3
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	430a      	orrs	r2, r1
 80057d4:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	685a      	ldr	r2, [r3, #4]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f002 0207 	and.w	r2, r2, #7
 80057e4:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	6859      	ldr	r1, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f6:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 80057f8:	431a      	orrs	r2, r3
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	430a      	orrs	r2, r1
 8005800:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005810:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f810 	bl	8005844 <DFSDM_GetChannelFromInstance>
 8005824:	4602      	mov	r2, r0
 8005826:	4904      	ldr	r1, [pc, #16]	; (8005838 <HAL_DFSDM_ChannelInit+0x174>)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3708      	adds	r7, #8
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}
 8005838:	20001148 	.word	0x20001148
 800583c:	20001144 	.word	0x20001144
 8005840:	40016000 	.word	0x40016000

08005844 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a1c      	ldr	r2, [pc, #112]	; (80058c0 <DFSDM_GetChannelFromInstance+0x7c>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d102      	bne.n	800585a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e02b      	b.n	80058b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	4a19      	ldr	r2, [pc, #100]	; (80058c4 <DFSDM_GetChannelFromInstance+0x80>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d102      	bne.n	8005868 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8005862:	2301      	movs	r3, #1
 8005864:	60fb      	str	r3, [r7, #12]
 8005866:	e024      	b.n	80058b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a17      	ldr	r2, [pc, #92]	; (80058c8 <DFSDM_GetChannelFromInstance+0x84>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d102      	bne.n	8005876 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8005870:	2302      	movs	r3, #2
 8005872:	60fb      	str	r3, [r7, #12]
 8005874:	e01d      	b.n	80058b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	4a14      	ldr	r2, [pc, #80]	; (80058cc <DFSDM_GetChannelFromInstance+0x88>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d102      	bne.n	8005884 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800587e:	2304      	movs	r3, #4
 8005880:	60fb      	str	r3, [r7, #12]
 8005882:	e016      	b.n	80058b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <DFSDM_GetChannelFromInstance+0x8c>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d102      	bne.n	8005892 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800588c:	2305      	movs	r3, #5
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e00f      	b.n	80058b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	4a0f      	ldr	r2, [pc, #60]	; (80058d4 <DFSDM_GetChannelFromInstance+0x90>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d102      	bne.n	80058a0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800589a:	2306      	movs	r3, #6
 800589c:	60fb      	str	r3, [r7, #12]
 800589e:	e008      	b.n	80058b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a0d      	ldr	r2, [pc, #52]	; (80058d8 <DFSDM_GetChannelFromInstance+0x94>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d102      	bne.n	80058ae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80058a8:	2307      	movs	r3, #7
 80058aa:	60fb      	str	r3, [r7, #12]
 80058ac:	e001      	b.n	80058b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80058ae:	2303      	movs	r3, #3
 80058b0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80058b2:	68fb      	ldr	r3, [r7, #12]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3714      	adds	r7, #20
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	40016000 	.word	0x40016000
 80058c4:	40016020 	.word	0x40016020
 80058c8:	40016040 	.word	0x40016040
 80058cc:	40016080 	.word	0x40016080
 80058d0:	400160a0 	.word	0x400160a0
 80058d4:	400160c0 	.word	0x400160c0
 80058d8:	400160e0 	.word	0x400160e0

080058dc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058e4:	2300      	movs	r3, #0
 80058e6:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d005      	beq.n	8005900 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2204      	movs	r2, #4
 80058f8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	73fb      	strb	r3, [r7, #15]
 80058fe:	e029      	b.n	8005954 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 020e 	bic.w	r2, r2, #14
 800590e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005924:	f003 021c 	and.w	r2, r3, #28
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592c:	2101      	movs	r1, #1
 800592e:	fa01 f202 	lsl.w	r2, r1, r2
 8005932:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005948:	2b00      	cmp	r3, #0
 800594a:	d003      	beq.n	8005954 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	4798      	blx	r3
    }
  }
  return status;
 8005954:	7bfb      	ldrb	r3, [r7, #15]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800596a:	2300      	movs	r3, #0
 800596c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800596e:	e17f      	b.n	8005c70 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	2101      	movs	r1, #1
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	fa01 f303 	lsl.w	r3, r1, r3
 800597c:	4013      	ands	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	f000 8171 	beq.w	8005c6a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	685b      	ldr	r3, [r3, #4]
 800598c:	f003 0303 	and.w	r3, r3, #3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d005      	beq.n	80059a0 <HAL_GPIO_Init+0x40>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	f003 0303 	and.w	r3, r3, #3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d130      	bne.n	8005a02 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	2203      	movs	r2, #3
 80059ac:	fa02 f303 	lsl.w	r3, r2, r3
 80059b0:	43db      	mvns	r3, r3
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	4013      	ands	r3, r2
 80059b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	68da      	ldr	r2, [r3, #12]
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	005b      	lsls	r3, r3, #1
 80059c0:	fa02 f303 	lsl.w	r3, r2, r3
 80059c4:	693a      	ldr	r2, [r7, #16]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80059d6:	2201      	movs	r2, #1
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	fa02 f303 	lsl.w	r3, r2, r3
 80059de:	43db      	mvns	r3, r3
 80059e0:	693a      	ldr	r2, [r7, #16]
 80059e2:	4013      	ands	r3, r2
 80059e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	091b      	lsrs	r3, r3, #4
 80059ec:	f003 0201 	and.w	r2, r3, #1
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	fa02 f303 	lsl.w	r3, r2, r3
 80059f6:	693a      	ldr	r2, [r7, #16]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	693a      	ldr	r2, [r7, #16]
 8005a00:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d118      	bne.n	8005a40 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a12:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005a14:	2201      	movs	r2, #1
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	fa02 f303 	lsl.w	r3, r2, r3
 8005a1c:	43db      	mvns	r3, r3
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4013      	ands	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	08db      	lsrs	r3, r3, #3
 8005a2a:	f003 0201 	and.w	r2, r3, #1
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	fa02 f303 	lsl.w	r3, r2, r3
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	f003 0303 	and.w	r3, r3, #3
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d017      	beq.n	8005a7c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a52:	697b      	ldr	r3, [r7, #20]
 8005a54:	005b      	lsls	r3, r3, #1
 8005a56:	2203      	movs	r2, #3
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	43db      	mvns	r3, r3
 8005a5e:	693a      	ldr	r2, [r7, #16]
 8005a60:	4013      	ands	r3, r2
 8005a62:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	689a      	ldr	r2, [r3, #8]
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	005b      	lsls	r3, r3, #1
 8005a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 0303 	and.w	r3, r3, #3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d123      	bne.n	8005ad0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	08da      	lsrs	r2, r3, #3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3208      	adds	r2, #8
 8005a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	220f      	movs	r2, #15
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	691a      	ldr	r2, [r3, #16]
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8005abc:	693a      	ldr	r2, [r7, #16]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	08da      	lsrs	r2, r3, #3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	3208      	adds	r2, #8
 8005aca:	6939      	ldr	r1, [r7, #16]
 8005acc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	005b      	lsls	r3, r3, #1
 8005ada:	2203      	movs	r2, #3
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	43db      	mvns	r3, r3
 8005ae2:	693a      	ldr	r2, [r7, #16]
 8005ae4:	4013      	ands	r3, r2
 8005ae6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	f003 0203 	and.w	r2, r3, #3
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	005b      	lsls	r3, r3, #1
 8005af4:	fa02 f303 	lsl.w	r3, r2, r3
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	693a      	ldr	r2, [r7, #16]
 8005b02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80ac 	beq.w	8005c6a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b12:	4b5f      	ldr	r3, [pc, #380]	; (8005c90 <HAL_GPIO_Init+0x330>)
 8005b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b16:	4a5e      	ldr	r2, [pc, #376]	; (8005c90 <HAL_GPIO_Init+0x330>)
 8005b18:	f043 0301 	orr.w	r3, r3, #1
 8005b1c:	6613      	str	r3, [r2, #96]	; 0x60
 8005b1e:	4b5c      	ldr	r3, [pc, #368]	; (8005c90 <HAL_GPIO_Init+0x330>)
 8005b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b22:	f003 0301 	and.w	r3, r3, #1
 8005b26:	60bb      	str	r3, [r7, #8]
 8005b28:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005b2a:	4a5a      	ldr	r2, [pc, #360]	; (8005c94 <HAL_GPIO_Init+0x334>)
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	089b      	lsrs	r3, r3, #2
 8005b30:	3302      	adds	r3, #2
 8005b32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b36:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f003 0303 	and.w	r3, r3, #3
 8005b3e:	009b      	lsls	r3, r3, #2
 8005b40:	220f      	movs	r2, #15
 8005b42:	fa02 f303 	lsl.w	r3, r2, r3
 8005b46:	43db      	mvns	r3, r3
 8005b48:	693a      	ldr	r2, [r7, #16]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005b54:	d025      	beq.n	8005ba2 <HAL_GPIO_Init+0x242>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a4f      	ldr	r2, [pc, #316]	; (8005c98 <HAL_GPIO_Init+0x338>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d01f      	beq.n	8005b9e <HAL_GPIO_Init+0x23e>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4a4e      	ldr	r2, [pc, #312]	; (8005c9c <HAL_GPIO_Init+0x33c>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d019      	beq.n	8005b9a <HAL_GPIO_Init+0x23a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a4d      	ldr	r2, [pc, #308]	; (8005ca0 <HAL_GPIO_Init+0x340>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d013      	beq.n	8005b96 <HAL_GPIO_Init+0x236>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a4c      	ldr	r2, [pc, #304]	; (8005ca4 <HAL_GPIO_Init+0x344>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00d      	beq.n	8005b92 <HAL_GPIO_Init+0x232>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a4b      	ldr	r2, [pc, #300]	; (8005ca8 <HAL_GPIO_Init+0x348>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <HAL_GPIO_Init+0x22e>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a4a      	ldr	r2, [pc, #296]	; (8005cac <HAL_GPIO_Init+0x34c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d101      	bne.n	8005b8a <HAL_GPIO_Init+0x22a>
 8005b86:	2306      	movs	r3, #6
 8005b88:	e00c      	b.n	8005ba4 <HAL_GPIO_Init+0x244>
 8005b8a:	2307      	movs	r3, #7
 8005b8c:	e00a      	b.n	8005ba4 <HAL_GPIO_Init+0x244>
 8005b8e:	2305      	movs	r3, #5
 8005b90:	e008      	b.n	8005ba4 <HAL_GPIO_Init+0x244>
 8005b92:	2304      	movs	r3, #4
 8005b94:	e006      	b.n	8005ba4 <HAL_GPIO_Init+0x244>
 8005b96:	2303      	movs	r3, #3
 8005b98:	e004      	b.n	8005ba4 <HAL_GPIO_Init+0x244>
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	e002      	b.n	8005ba4 <HAL_GPIO_Init+0x244>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <HAL_GPIO_Init+0x244>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	f002 0203 	and.w	r2, r2, #3
 8005baa:	0092      	lsls	r2, r2, #2
 8005bac:	4093      	lsls	r3, r2
 8005bae:	693a      	ldr	r2, [r7, #16]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005bb4:	4937      	ldr	r1, [pc, #220]	; (8005c94 <HAL_GPIO_Init+0x334>)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	089b      	lsrs	r3, r3, #2
 8005bba:	3302      	adds	r3, #2
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005bc2:	4b3b      	ldr	r3, [pc, #236]	; (8005cb0 <HAL_GPIO_Init+0x350>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	43db      	mvns	r3, r3
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4013      	ands	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	685b      	ldr	r3, [r3, #4]
 8005bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8005bde:	693a      	ldr	r2, [r7, #16]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005be6:	4a32      	ldr	r2, [pc, #200]	; (8005cb0 <HAL_GPIO_Init+0x350>)
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005bec:	4b30      	ldr	r3, [pc, #192]	; (8005cb0 <HAL_GPIO_Init+0x350>)
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	43db      	mvns	r3, r3
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4013      	ands	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d003      	beq.n	8005c10 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005c10:	4a27      	ldr	r2, [pc, #156]	; (8005cb0 <HAL_GPIO_Init+0x350>)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005c16:	4b26      	ldr	r3, [pc, #152]	; (8005cb0 <HAL_GPIO_Init+0x350>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	43db      	mvns	r3, r3
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4013      	ands	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005c3a:	4a1d      	ldr	r2, [pc, #116]	; (8005cb0 <HAL_GPIO_Init+0x350>)
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005c40:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <HAL_GPIO_Init+0x350>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	43db      	mvns	r3, r3
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4013      	ands	r3, r2
 8005c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	685b      	ldr	r3, [r3, #4]
 8005c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d003      	beq.n	8005c64 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4313      	orrs	r3, r2
 8005c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005c64:	4a12      	ldr	r2, [pc, #72]	; (8005cb0 <HAL_GPIO_Init+0x350>)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	fa22 f303 	lsr.w	r3, r2, r3
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	f47f ae78 	bne.w	8005970 <HAL_GPIO_Init+0x10>
  }
}
 8005c80:	bf00      	nop
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
 8005c8e:	bf00      	nop
 8005c90:	40021000 	.word	0x40021000
 8005c94:	40010000 	.word	0x40010000
 8005c98:	48000400 	.word	0x48000400
 8005c9c:	48000800 	.word	0x48000800
 8005ca0:	48000c00 	.word	0x48000c00
 8005ca4:	48001000 	.word	0x48001000
 8005ca8:	48001400 	.word	0x48001400
 8005cac:	48001800 	.word	0x48001800
 8005cb0:	40010400 	.word	0x40010400

08005cb4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8005cb4:	b480      	push	{r7}
 8005cb6:	b087      	sub	sp, #28
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
 8005cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8005cc2:	e0cd      	b.n	8005e60 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f000 80c0 	beq.w	8005e5a <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8005cda:	4a68      	ldr	r2, [pc, #416]	; (8005e7c <HAL_GPIO_DeInit+0x1c8>)
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	089b      	lsrs	r3, r3, #2
 8005ce0:	3302      	adds	r3, #2
 8005ce2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	220f      	movs	r2, #15
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	68fa      	ldr	r2, [r7, #12]
 8005cf8:	4013      	ands	r3, r2
 8005cfa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d02:	d025      	beq.n	8005d50 <HAL_GPIO_DeInit+0x9c>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a5e      	ldr	r2, [pc, #376]	; (8005e80 <HAL_GPIO_DeInit+0x1cc>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d01f      	beq.n	8005d4c <HAL_GPIO_DeInit+0x98>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a5d      	ldr	r2, [pc, #372]	; (8005e84 <HAL_GPIO_DeInit+0x1d0>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d019      	beq.n	8005d48 <HAL_GPIO_DeInit+0x94>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a5c      	ldr	r2, [pc, #368]	; (8005e88 <HAL_GPIO_DeInit+0x1d4>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d013      	beq.n	8005d44 <HAL_GPIO_DeInit+0x90>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a5b      	ldr	r2, [pc, #364]	; (8005e8c <HAL_GPIO_DeInit+0x1d8>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d00d      	beq.n	8005d40 <HAL_GPIO_DeInit+0x8c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	4a5a      	ldr	r2, [pc, #360]	; (8005e90 <HAL_GPIO_DeInit+0x1dc>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d007      	beq.n	8005d3c <HAL_GPIO_DeInit+0x88>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4a59      	ldr	r2, [pc, #356]	; (8005e94 <HAL_GPIO_DeInit+0x1e0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d101      	bne.n	8005d38 <HAL_GPIO_DeInit+0x84>
 8005d34:	2306      	movs	r3, #6
 8005d36:	e00c      	b.n	8005d52 <HAL_GPIO_DeInit+0x9e>
 8005d38:	2307      	movs	r3, #7
 8005d3a:	e00a      	b.n	8005d52 <HAL_GPIO_DeInit+0x9e>
 8005d3c:	2305      	movs	r3, #5
 8005d3e:	e008      	b.n	8005d52 <HAL_GPIO_DeInit+0x9e>
 8005d40:	2304      	movs	r3, #4
 8005d42:	e006      	b.n	8005d52 <HAL_GPIO_DeInit+0x9e>
 8005d44:	2303      	movs	r3, #3
 8005d46:	e004      	b.n	8005d52 <HAL_GPIO_DeInit+0x9e>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e002      	b.n	8005d52 <HAL_GPIO_DeInit+0x9e>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <HAL_GPIO_DeInit+0x9e>
 8005d50:	2300      	movs	r3, #0
 8005d52:	697a      	ldr	r2, [r7, #20]
 8005d54:	f002 0203 	and.w	r2, r2, #3
 8005d58:	0092      	lsls	r2, r2, #2
 8005d5a:	4093      	lsls	r3, r2
 8005d5c:	68fa      	ldr	r2, [r7, #12]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d132      	bne.n	8005dc8 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8005d62:	4b4d      	ldr	r3, [pc, #308]	; (8005e98 <HAL_GPIO_DeInit+0x1e4>)
 8005d64:	681a      	ldr	r2, [r3, #0]
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	43db      	mvns	r3, r3
 8005d6a:	494b      	ldr	r1, [pc, #300]	; (8005e98 <HAL_GPIO_DeInit+0x1e4>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8005d70:	4b49      	ldr	r3, [pc, #292]	; (8005e98 <HAL_GPIO_DeInit+0x1e4>)
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	43db      	mvns	r3, r3
 8005d78:	4947      	ldr	r1, [pc, #284]	; (8005e98 <HAL_GPIO_DeInit+0x1e4>)
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8005d7e:	4b46      	ldr	r3, [pc, #280]	; (8005e98 <HAL_GPIO_DeInit+0x1e4>)
 8005d80:	68da      	ldr	r2, [r3, #12]
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	43db      	mvns	r3, r3
 8005d86:	4944      	ldr	r1, [pc, #272]	; (8005e98 <HAL_GPIO_DeInit+0x1e4>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8005d8c:	4b42      	ldr	r3, [pc, #264]	; (8005e98 <HAL_GPIO_DeInit+0x1e4>)
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	43db      	mvns	r3, r3
 8005d94:	4940      	ldr	r1, [pc, #256]	; (8005e98 <HAL_GPIO_DeInit+0x1e4>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f003 0303 	and.w	r3, r3, #3
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	220f      	movs	r2, #15
 8005da4:	fa02 f303 	lsl.w	r3, r2, r3
 8005da8:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8005daa:	4a34      	ldr	r2, [pc, #208]	; (8005e7c <HAL_GPIO_DeInit+0x1c8>)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	089b      	lsrs	r3, r3, #2
 8005db0:	3302      	adds	r3, #2
 8005db2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	43da      	mvns	r2, r3
 8005dba:	4830      	ldr	r0, [pc, #192]	; (8005e7c <HAL_GPIO_DeInit+0x1c8>)
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	089b      	lsrs	r3, r3, #2
 8005dc0:	400a      	ands	r2, r1
 8005dc2:	3302      	adds	r3, #2
 8005dc4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	005b      	lsls	r3, r3, #1
 8005dd0:	2103      	movs	r1, #3
 8005dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd6:	431a      	orrs	r2, r3
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	08da      	lsrs	r2, r3, #3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	3208      	adds	r2, #8
 8005de4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	220f      	movs	r2, #15
 8005df2:	fa02 f303 	lsl.w	r3, r2, r3
 8005df6:	43db      	mvns	r3, r3
 8005df8:	697a      	ldr	r2, [r7, #20]
 8005dfa:	08d2      	lsrs	r2, r2, #3
 8005dfc:	4019      	ands	r1, r3
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	3208      	adds	r2, #8
 8005e02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	689a      	ldr	r2, [r3, #8]
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	005b      	lsls	r3, r3, #1
 8005e0e:	2103      	movs	r1, #3
 8005e10:	fa01 f303 	lsl.w	r3, r1, r3
 8005e14:	43db      	mvns	r3, r3
 8005e16:	401a      	ands	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	685a      	ldr	r2, [r3, #4]
 8005e20:	2101      	movs	r1, #1
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	fa01 f303 	lsl.w	r3, r1, r3
 8005e28:	43db      	mvns	r3, r3
 8005e2a:	401a      	ands	r2, r3
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	68da      	ldr	r2, [r3, #12]
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	2103      	movs	r1, #3
 8005e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e3e:	43db      	mvns	r3, r3
 8005e40:	401a      	ands	r2, r3
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005e52:	43db      	mvns	r3, r3
 8005e54:	401a      	ands	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	fa22 f303 	lsr.w	r3, r2, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	f47f af2b 	bne.w	8005cc4 <HAL_GPIO_DeInit+0x10>
  }
}
 8005e6e:	bf00      	nop
 8005e70:	bf00      	nop
 8005e72:	371c      	adds	r7, #28
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	40010000 	.word	0x40010000
 8005e80:	48000400 	.word	0x48000400
 8005e84:	48000800 	.word	0x48000800
 8005e88:	48000c00 	.word	0x48000c00
 8005e8c:	48001000 	.word	0x48001000
 8005e90:	48001400 	.word	0x48001400
 8005e94:	48001800 	.word	0x48001800
 8005e98:	40010400 	.word	0x40010400

08005e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	460b      	mov	r3, r1
 8005ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	691a      	ldr	r2, [r3, #16]
 8005eac:	887b      	ldrh	r3, [r7, #2]
 8005eae:	4013      	ands	r3, r2
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	73fb      	strb	r3, [r7, #15]
 8005eb8:	e001      	b.n	8005ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3714      	adds	r7, #20
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	807b      	strh	r3, [r7, #2]
 8005ed8:	4613      	mov	r3, r2
 8005eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005edc:	787b      	ldrb	r3, [r7, #1]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005ee2:	887a      	ldrh	r2, [r7, #2]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ee8:	e002      	b.n	8005ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005eea:	887a      	ldrh	r2, [r7, #2]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ef0:	bf00      	nop
 8005ef2:	370c      	adds	r7, #12
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efa:	4770      	bx	lr

08005efc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	4603      	mov	r3, r0
 8005f04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005f06:	4b08      	ldr	r3, [pc, #32]	; (8005f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f08:	695a      	ldr	r2, [r3, #20]
 8005f0a:	88fb      	ldrh	r3, [r7, #6]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d006      	beq.n	8005f20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005f12:	4a05      	ldr	r2, [pc, #20]	; (8005f28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005f14:	88fb      	ldrh	r3, [r7, #6]
 8005f16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005f18:	88fb      	ldrh	r3, [r7, #6]
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	f7fc fad2 	bl	80024c4 <HAL_GPIO_EXTI_Callback>
  }
}
 8005f20:	bf00      	nop
 8005f22:	3708      	adds	r7, #8
 8005f24:	46bd      	mov	sp, r7
 8005f26:	bd80      	pop	{r7, pc}
 8005f28:	40010400 	.word	0x40010400

08005f2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e081      	b.n	8006042 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7fd fbe2 	bl	800371c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2224      	movs	r2, #36	; 0x24
 8005f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0201 	bic.w	r2, r2, #1
 8005f6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	689a      	ldr	r2, [r3, #8]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d107      	bne.n	8005fa6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	689a      	ldr	r2, [r3, #8]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fa2:	609a      	str	r2, [r3, #8]
 8005fa4:	e006      	b.n	8005fb4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005fb2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	d104      	bne.n	8005fc6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	685b      	ldr	r3, [r3, #4]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68da      	ldr	r2, [r3, #12]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005fe8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691a      	ldr	r2, [r3, #16]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	430a      	orrs	r2, r1
 8006002:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	69d9      	ldr	r1, [r3, #28]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1a      	ldr	r2, [r3, #32]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2200      	movs	r2, #0
 8006036:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af02      	add	r7, sp, #8
 8006052:	60f8      	str	r0, [r7, #12]
 8006054:	607a      	str	r2, [r7, #4]
 8006056:	461a      	mov	r2, r3
 8006058:	460b      	mov	r3, r1
 800605a:	817b      	strh	r3, [r7, #10]
 800605c:	4613      	mov	r3, r2
 800605e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b20      	cmp	r3, #32
 800606a:	f040 80db 	bne.w	8006224 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006074:	2b01      	cmp	r3, #1
 8006076:	d101      	bne.n	800607c <HAL_I2C_Master_Receive+0x30>
 8006078:	2302      	movs	r3, #2
 800607a:	e0d4      	b.n	8006226 <HAL_I2C_Master_Receive+0x1da>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006084:	f7ff f9dc 	bl	8005440 <HAL_GetTick>
 8006088:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	2319      	movs	r3, #25
 8006090:	2201      	movs	r2, #1
 8006092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006096:	68f8      	ldr	r0, [r7, #12]
 8006098:	f000 f8f2 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 800609c:	4603      	mov	r3, r0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d001      	beq.n	80060a6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80060a2:	2301      	movs	r3, #1
 80060a4:	e0bf      	b.n	8006226 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2222      	movs	r2, #34	; 0x22
 80060aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2210      	movs	r2, #16
 80060b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	893a      	ldrh	r2, [r7, #8]
 80060c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2200      	movs	r2, #0
 80060cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	2bff      	cmp	r3, #255	; 0xff
 80060d6:	d90e      	bls.n	80060f6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	22ff      	movs	r2, #255	; 0xff
 80060dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	8979      	ldrh	r1, [r7, #10]
 80060e6:	4b52      	ldr	r3, [pc, #328]	; (8006230 <HAL_I2C_Master_Receive+0x1e4>)
 80060e8:	9300      	str	r3, [sp, #0]
 80060ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f000 faa8 	bl	8006644 <I2C_TransferConfig>
 80060f4:	e06d      	b.n	80061d2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006104:	b2da      	uxtb	r2, r3
 8006106:	8979      	ldrh	r1, [r7, #10]
 8006108:	4b49      	ldr	r3, [pc, #292]	; (8006230 <HAL_I2C_Master_Receive+0x1e4>)
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 fa97 	bl	8006644 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006116:	e05c      	b.n	80061d2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	6a39      	ldr	r1, [r7, #32]
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f92b 	bl	8006378 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e07c      	b.n	8006226 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006136:	b2d2      	uxtb	r2, r2
 8006138:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006148:	3b01      	subs	r3, #1
 800614a:	b29a      	uxth	r2, r3
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d034      	beq.n	80061d2 <HAL_I2C_Master_Receive+0x186>
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800616c:	2b00      	cmp	r3, #0
 800616e:	d130      	bne.n	80061d2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	9300      	str	r3, [sp, #0]
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	2200      	movs	r2, #0
 8006178:	2180      	movs	r1, #128	; 0x80
 800617a:	68f8      	ldr	r0, [r7, #12]
 800617c:	f000 f880 	bl	8006280 <I2C_WaitOnFlagUntilTimeout>
 8006180:	4603      	mov	r3, r0
 8006182:	2b00      	cmp	r3, #0
 8006184:	d001      	beq.n	800618a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e04d      	b.n	8006226 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800618e:	b29b      	uxth	r3, r3
 8006190:	2bff      	cmp	r3, #255	; 0xff
 8006192:	d90e      	bls.n	80061b2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	22ff      	movs	r2, #255	; 0xff
 8006198:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619e:	b2da      	uxtb	r2, r3
 80061a0:	8979      	ldrh	r1, [r7, #10]
 80061a2:	2300      	movs	r3, #0
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f000 fa4a 	bl	8006644 <I2C_TransferConfig>
 80061b0:	e00f      	b.n	80061d2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29a      	uxth	r2, r3
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061c0:	b2da      	uxtb	r2, r3
 80061c2:	8979      	ldrh	r1, [r7, #10]
 80061c4:	2300      	movs	r3, #0
 80061c6:	9300      	str	r3, [sp, #0]
 80061c8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fa39 	bl	8006644 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d19d      	bne.n	8006118 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	6a39      	ldr	r1, [r7, #32]
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f000 f88d 	bl	8006300 <I2C_WaitOnSTOPFlagUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d001      	beq.n	80061f0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80061ec:	2301      	movs	r3, #1
 80061ee:	e01a      	b.n	8006226 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2220      	movs	r2, #32
 80061f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6859      	ldr	r1, [r3, #4]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	4b0c      	ldr	r3, [pc, #48]	; (8006234 <HAL_I2C_Master_Receive+0x1e8>)
 8006204:	400b      	ands	r3, r1
 8006206:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	2220      	movs	r2, #32
 800620c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2200      	movs	r2, #0
 8006214:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006220:	2300      	movs	r3, #0
 8006222:	e000      	b.n	8006226 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8006224:	2302      	movs	r3, #2
  }
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	80002400 	.word	0x80002400
 8006234:	fe00e800 	.word	0xfe00e800

08006238 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f003 0302 	and.w	r3, r3, #2
 800624a:	2b02      	cmp	r3, #2
 800624c:	d103      	bne.n	8006256 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2200      	movs	r2, #0
 8006254:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	f003 0301 	and.w	r3, r3, #1
 8006260:	2b01      	cmp	r3, #1
 8006262:	d007      	beq.n	8006274 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	619a      	str	r2, [r3, #24]
  }
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	60f8      	str	r0, [r7, #12]
 8006288:	60b9      	str	r1, [r7, #8]
 800628a:	603b      	str	r3, [r7, #0]
 800628c:	4613      	mov	r3, r2
 800628e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006290:	e022      	b.n	80062d8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d01e      	beq.n	80062d8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800629a:	f7ff f8d1 	bl	8005440 <HAL_GetTick>
 800629e:	4602      	mov	r2, r0
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	1ad3      	subs	r3, r2, r3
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d302      	bcc.n	80062b0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d113      	bne.n	80062d8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062b4:	f043 0220 	orr.w	r2, r3, #32
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	2220      	movs	r2, #32
 80062c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2200      	movs	r2, #0
 80062d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e00f      	b.n	80062f8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	699a      	ldr	r2, [r3, #24]
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	4013      	ands	r3, r2
 80062e2:	68ba      	ldr	r2, [r7, #8]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	bf0c      	ite	eq
 80062e8:	2301      	moveq	r3, #1
 80062ea:	2300      	movne	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	79fb      	ldrb	r3, [r7, #7]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d0cd      	beq.n	8006292 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80062f6:	2300      	movs	r3, #0
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3710      	adds	r7, #16
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}

08006300 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	60f8      	str	r0, [r7, #12]
 8006308:	60b9      	str	r1, [r7, #8]
 800630a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800630c:	e028      	b.n	8006360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	68b9      	ldr	r1, [r7, #8]
 8006312:	68f8      	ldr	r0, [r7, #12]
 8006314:	f000 f8aa 	bl	800646c <I2C_IsErrorOccurred>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800631e:	2301      	movs	r3, #1
 8006320:	e026      	b.n	8006370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006322:	f7ff f88d 	bl	8005440 <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	68ba      	ldr	r2, [r7, #8]
 800632e:	429a      	cmp	r2, r3
 8006330:	d302      	bcc.n	8006338 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d113      	bne.n	8006360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800633c:	f043 0220 	orr.w	r2, r3, #32
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e007      	b.n	8006370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	f003 0320 	and.w	r3, r3, #32
 800636a:	2b20      	cmp	r3, #32
 800636c:	d1cf      	bne.n	800630e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	3710      	adds	r7, #16
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b084      	sub	sp, #16
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006384:	e064      	b.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006386:	687a      	ldr	r2, [r7, #4]
 8006388:	68b9      	ldr	r1, [r7, #8]
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f000 f86e 	bl	800646c <I2C_IsErrorOccurred>
 8006390:	4603      	mov	r3, r0
 8006392:	2b00      	cmp	r3, #0
 8006394:	d001      	beq.n	800639a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006396:	2301      	movs	r3, #1
 8006398:	e062      	b.n	8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	699b      	ldr	r3, [r3, #24]
 80063a0:	f003 0320 	and.w	r3, r3, #32
 80063a4:	2b20      	cmp	r3, #32
 80063a6:	d138      	bne.n	800641a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	699b      	ldr	r3, [r3, #24]
 80063ae:	f003 0304 	and.w	r3, r3, #4
 80063b2:	2b04      	cmp	r3, #4
 80063b4:	d105      	bne.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d001      	beq.n	80063c2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e04e      	b.n	8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b10      	cmp	r3, #16
 80063ce:	d107      	bne.n	80063e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2210      	movs	r2, #16
 80063d6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2204      	movs	r2, #4
 80063dc:	645a      	str	r2, [r3, #68]	; 0x44
 80063de:	e002      	b.n	80063e6 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2220      	movs	r2, #32
 80063ec:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6859      	ldr	r1, [r3, #4]
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	4b1b      	ldr	r3, [pc, #108]	; (8006468 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80063fa:	400b      	ands	r3, r1
 80063fc:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2220      	movs	r2, #32
 8006402:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	2200      	movs	r2, #0
 800640a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2200      	movs	r2, #0
 8006412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e022      	b.n	8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800641a:	f7ff f811 	bl	8005440 <HAL_GetTick>
 800641e:	4602      	mov	r2, r0
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	1ad3      	subs	r3, r2, r3
 8006424:	68ba      	ldr	r2, [r7, #8]
 8006426:	429a      	cmp	r2, r3
 8006428:	d302      	bcc.n	8006430 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10f      	bne.n	8006450 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006434:	f043 0220 	orr.w	r2, r3, #32
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2220      	movs	r2, #32
 8006440:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	e007      	b.n	8006460 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	f003 0304 	and.w	r3, r3, #4
 800645a:	2b04      	cmp	r3, #4
 800645c:	d193      	bne.n	8006386 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800645e:	2300      	movs	r3, #0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3710      	adds	r7, #16
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	fe00e800 	.word	0xfe00e800

0800646c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006478:	2300      	movs	r3, #0
 800647a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006486:	2300      	movs	r3, #0
 8006488:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	f003 0310 	and.w	r3, r3, #16
 8006494:	2b00      	cmp	r3, #0
 8006496:	d075      	beq.n	8006584 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2210      	movs	r2, #16
 800649e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80064a0:	e056      	b.n	8006550 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d052      	beq.n	8006550 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80064aa:	f7fe ffc9 	bl	8005440 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	68ba      	ldr	r2, [r7, #8]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d302      	bcc.n	80064c0 <I2C_IsErrorOccurred+0x54>
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d147      	bne.n	8006550 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064ca:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064d2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064e2:	d12e      	bne.n	8006542 <I2C_IsErrorOccurred+0xd6>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80064ea:	d02a      	beq.n	8006542 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80064ec:	7cfb      	ldrb	r3, [r7, #19]
 80064ee:	2b20      	cmp	r3, #32
 80064f0:	d027      	beq.n	8006542 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	685a      	ldr	r2, [r3, #4]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006500:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006502:	f7fe ff9d 	bl	8005440 <HAL_GetTick>
 8006506:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006508:	e01b      	b.n	8006542 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800650a:	f7fe ff99 	bl	8005440 <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b19      	cmp	r3, #25
 8006516:	d914      	bls.n	8006542 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651c:	f043 0220 	orr.w	r2, r3, #32
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2220      	movs	r2, #32
 8006528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800653c:	2301      	movs	r3, #1
 800653e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	f003 0320 	and.w	r3, r3, #32
 800654c:	2b20      	cmp	r3, #32
 800654e:	d1dc      	bne.n	800650a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f003 0320 	and.w	r3, r3, #32
 800655a:	2b20      	cmp	r3, #32
 800655c:	d003      	beq.n	8006566 <I2C_IsErrorOccurred+0xfa>
 800655e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006562:	2b00      	cmp	r3, #0
 8006564:	d09d      	beq.n	80064a2 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006566:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2220      	movs	r2, #32
 8006574:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f043 0304 	orr.w	r3, r3, #4
 800657c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800657e:	2301      	movs	r3, #1
 8006580:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00b      	beq.n	80065ae <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	f043 0301 	orr.w	r3, r3, #1
 800659c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80065a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d00b      	beq.n	80065d0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80065b8:	6a3b      	ldr	r3, [r7, #32]
 80065ba:	f043 0308 	orr.w	r3, r3, #8
 80065be:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80065c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d00b      	beq.n	80065f2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065da:	6a3b      	ldr	r3, [r7, #32]
 80065dc:	f043 0302 	orr.w	r3, r3, #2
 80065e0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80065ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80065f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d01c      	beq.n	8006634 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065fa:	68f8      	ldr	r0, [r7, #12]
 80065fc:	f7ff fe1c 	bl	8006238 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	6859      	ldr	r1, [r3, #4]
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b0d      	ldr	r3, [pc, #52]	; (8006640 <I2C_IsErrorOccurred+0x1d4>)
 800660c:	400b      	ands	r3, r1
 800660e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	431a      	orrs	r2, r3
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2220      	movs	r2, #32
 8006620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2200      	movs	r2, #0
 8006630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006634:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006638:	4618      	mov	r0, r3
 800663a:	3728      	adds	r7, #40	; 0x28
 800663c:	46bd      	mov	sp, r7
 800663e:	bd80      	pop	{r7, pc}
 8006640:	fe00e800 	.word	0xfe00e800

08006644 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006644:	b480      	push	{r7}
 8006646:	b087      	sub	sp, #28
 8006648:	af00      	add	r7, sp, #0
 800664a:	60f8      	str	r0, [r7, #12]
 800664c:	607b      	str	r3, [r7, #4]
 800664e:	460b      	mov	r3, r1
 8006650:	817b      	strh	r3, [r7, #10]
 8006652:	4613      	mov	r3, r2
 8006654:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006656:	897b      	ldrh	r3, [r7, #10]
 8006658:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800665c:	7a7b      	ldrb	r3, [r7, #9]
 800665e:	041b      	lsls	r3, r3, #16
 8006660:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006664:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800666a:	6a3b      	ldr	r3, [r7, #32]
 800666c:	4313      	orrs	r3, r2
 800666e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006672:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685a      	ldr	r2, [r3, #4]
 800667a:	6a3b      	ldr	r3, [r7, #32]
 800667c:	0d5b      	lsrs	r3, r3, #21
 800667e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006682:	4b08      	ldr	r3, [pc, #32]	; (80066a4 <I2C_TransferConfig+0x60>)
 8006684:	430b      	orrs	r3, r1
 8006686:	43db      	mvns	r3, r3
 8006688:	ea02 0103 	and.w	r1, r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	430a      	orrs	r2, r1
 8006694:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006696:	bf00      	nop
 8006698:	371c      	adds	r7, #28
 800669a:	46bd      	mov	sp, r7
 800669c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	03ff63ff 	.word	0x03ff63ff

080066a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	d138      	bne.n	8006730 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d101      	bne.n	80066cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80066c8:	2302      	movs	r3, #2
 80066ca:	e032      	b.n	8006732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2201      	movs	r2, #1
 80066d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2224      	movs	r2, #36	; 0x24
 80066d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f022 0201 	bic.w	r2, r2, #1
 80066ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80066fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6819      	ldr	r1, [r3, #0]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	683a      	ldr	r2, [r7, #0]
 8006708:	430a      	orrs	r2, r1
 800670a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	681a      	ldr	r2, [r3, #0]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2220      	movs	r2, #32
 8006720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	e000      	b.n	8006732 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006730:	2302      	movs	r3, #2
  }
}
 8006732:	4618      	mov	r0, r3
 8006734:	370c      	adds	r7, #12
 8006736:	46bd      	mov	sp, r7
 8006738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673c:	4770      	bx	lr

0800673e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
 8006746:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800674e:	b2db      	uxtb	r3, r3
 8006750:	2b20      	cmp	r3, #32
 8006752:	d139      	bne.n	80067c8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800675a:	2b01      	cmp	r3, #1
 800675c:	d101      	bne.n	8006762 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800675e:	2302      	movs	r3, #2
 8006760:	e033      	b.n	80067ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2201      	movs	r2, #1
 8006766:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2224      	movs	r2, #36	; 0x24
 800676e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	681a      	ldr	r2, [r3, #0]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f022 0201 	bic.w	r2, r2, #1
 8006780:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006790:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006792:	683b      	ldr	r3, [r7, #0]
 8006794:	021b      	lsls	r3, r3, #8
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	4313      	orrs	r3, r2
 800679a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68fa      	ldr	r2, [r7, #12]
 80067a2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f042 0201 	orr.w	r2, r2, #1
 80067b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2220      	movs	r2, #32
 80067b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80067c4:	2300      	movs	r3, #0
 80067c6:	e000      	b.n	80067ca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80067c8:	2302      	movs	r3, #2
  }
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3714      	adds	r7, #20
 80067ce:	46bd      	mov	sp, r7
 80067d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d4:	4770      	bx	lr

080067d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80067d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067d8:	b08f      	sub	sp, #60	; 0x3c
 80067da:	af0a      	add	r7, sp, #40	; 0x28
 80067dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d101      	bne.n	80067e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e116      	b.n	8006a16 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d106      	bne.n	8006808 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2200      	movs	r2, #0
 80067fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f7fd f9b2 	bl	8003b6c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2203      	movs	r2, #3
 800680c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006818:	2b00      	cmp	r3, #0
 800681a:	d102      	bne.n	8006822 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	4618      	mov	r0, r3
 8006828:	f004 fc87 	bl	800b13a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	603b      	str	r3, [r7, #0]
 8006832:	687e      	ldr	r6, [r7, #4]
 8006834:	466d      	mov	r5, sp
 8006836:	f106 0410 	add.w	r4, r6, #16
 800683a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800683c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800683e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006842:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006846:	e885 0003 	stmia.w	r5, {r0, r1}
 800684a:	1d33      	adds	r3, r6, #4
 800684c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800684e:	6838      	ldr	r0, [r7, #0]
 8006850:	f004 fc47 	bl	800b0e2 <USB_CoreInit>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d005      	beq.n	8006866 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2202      	movs	r2, #2
 800685e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e0d7      	b.n	8006a16 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2100      	movs	r1, #0
 800686c:	4618      	mov	r0, r3
 800686e:	f004 fc75 	bl	800b15c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006872:	2300      	movs	r3, #0
 8006874:	73fb      	strb	r3, [r7, #15]
 8006876:	e04a      	b.n	800690e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006878:	7bfa      	ldrb	r2, [r7, #15]
 800687a:	6879      	ldr	r1, [r7, #4]
 800687c:	4613      	mov	r3, r2
 800687e:	00db      	lsls	r3, r3, #3
 8006880:	4413      	add	r3, r2
 8006882:	009b      	lsls	r3, r3, #2
 8006884:	440b      	add	r3, r1
 8006886:	333d      	adds	r3, #61	; 0x3d
 8006888:	2201      	movs	r2, #1
 800688a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800688c:	7bfa      	ldrb	r2, [r7, #15]
 800688e:	6879      	ldr	r1, [r7, #4]
 8006890:	4613      	mov	r3, r2
 8006892:	00db      	lsls	r3, r3, #3
 8006894:	4413      	add	r3, r2
 8006896:	009b      	lsls	r3, r3, #2
 8006898:	440b      	add	r3, r1
 800689a:	333c      	adds	r3, #60	; 0x3c
 800689c:	7bfa      	ldrb	r2, [r7, #15]
 800689e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80068a0:	7bfa      	ldrb	r2, [r7, #15]
 80068a2:	7bfb      	ldrb	r3, [r7, #15]
 80068a4:	b298      	uxth	r0, r3
 80068a6:	6879      	ldr	r1, [r7, #4]
 80068a8:	4613      	mov	r3, r2
 80068aa:	00db      	lsls	r3, r3, #3
 80068ac:	4413      	add	r3, r2
 80068ae:	009b      	lsls	r3, r3, #2
 80068b0:	440b      	add	r3, r1
 80068b2:	3344      	adds	r3, #68	; 0x44
 80068b4:	4602      	mov	r2, r0
 80068b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80068b8:	7bfa      	ldrb	r2, [r7, #15]
 80068ba:	6879      	ldr	r1, [r7, #4]
 80068bc:	4613      	mov	r3, r2
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	4413      	add	r3, r2
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	440b      	add	r3, r1
 80068c6:	3340      	adds	r3, #64	; 0x40
 80068c8:	2200      	movs	r2, #0
 80068ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80068cc:	7bfa      	ldrb	r2, [r7, #15]
 80068ce:	6879      	ldr	r1, [r7, #4]
 80068d0:	4613      	mov	r3, r2
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	440b      	add	r3, r1
 80068da:	3348      	adds	r3, #72	; 0x48
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80068e0:	7bfa      	ldrb	r2, [r7, #15]
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	4613      	mov	r3, r2
 80068e6:	00db      	lsls	r3, r3, #3
 80068e8:	4413      	add	r3, r2
 80068ea:	009b      	lsls	r3, r3, #2
 80068ec:	440b      	add	r3, r1
 80068ee:	334c      	adds	r3, #76	; 0x4c
 80068f0:	2200      	movs	r2, #0
 80068f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80068f4:	7bfa      	ldrb	r2, [r7, #15]
 80068f6:	6879      	ldr	r1, [r7, #4]
 80068f8:	4613      	mov	r3, r2
 80068fa:	00db      	lsls	r3, r3, #3
 80068fc:	4413      	add	r3, r2
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	440b      	add	r3, r1
 8006902:	3354      	adds	r3, #84	; 0x54
 8006904:	2200      	movs	r2, #0
 8006906:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	3301      	adds	r3, #1
 800690c:	73fb      	strb	r3, [r7, #15]
 800690e:	7bfa      	ldrb	r2, [r7, #15]
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	429a      	cmp	r2, r3
 8006916:	d3af      	bcc.n	8006878 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006918:	2300      	movs	r3, #0
 800691a:	73fb      	strb	r3, [r7, #15]
 800691c:	e044      	b.n	80069a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800691e:	7bfa      	ldrb	r2, [r7, #15]
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	4613      	mov	r3, r2
 8006924:	00db      	lsls	r3, r3, #3
 8006926:	4413      	add	r3, r2
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	440b      	add	r3, r1
 800692c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006930:	2200      	movs	r2, #0
 8006932:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006934:	7bfa      	ldrb	r2, [r7, #15]
 8006936:	6879      	ldr	r1, [r7, #4]
 8006938:	4613      	mov	r3, r2
 800693a:	00db      	lsls	r3, r3, #3
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	440b      	add	r3, r1
 8006942:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006946:	7bfa      	ldrb	r2, [r7, #15]
 8006948:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800694a:	7bfa      	ldrb	r2, [r7, #15]
 800694c:	6879      	ldr	r1, [r7, #4]
 800694e:	4613      	mov	r3, r2
 8006950:	00db      	lsls	r3, r3, #3
 8006952:	4413      	add	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	440b      	add	r3, r1
 8006958:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800695c:	2200      	movs	r2, #0
 800695e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006960:	7bfa      	ldrb	r2, [r7, #15]
 8006962:	6879      	ldr	r1, [r7, #4]
 8006964:	4613      	mov	r3, r2
 8006966:	00db      	lsls	r3, r3, #3
 8006968:	4413      	add	r3, r2
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	440b      	add	r3, r1
 800696e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006976:	7bfa      	ldrb	r2, [r7, #15]
 8006978:	6879      	ldr	r1, [r7, #4]
 800697a:	4613      	mov	r3, r2
 800697c:	00db      	lsls	r3, r3, #3
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	440b      	add	r3, r1
 8006984:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800698c:	7bfa      	ldrb	r2, [r7, #15]
 800698e:	6879      	ldr	r1, [r7, #4]
 8006990:	4613      	mov	r3, r2
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	440b      	add	r3, r1
 800699a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069a2:	7bfb      	ldrb	r3, [r7, #15]
 80069a4:	3301      	adds	r3, #1
 80069a6:	73fb      	strb	r3, [r7, #15]
 80069a8:	7bfa      	ldrb	r2, [r7, #15]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d3b5      	bcc.n	800691e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	603b      	str	r3, [r7, #0]
 80069b8:	687e      	ldr	r6, [r7, #4]
 80069ba:	466d      	mov	r5, sp
 80069bc:	f106 0410 	add.w	r4, r6, #16
 80069c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80069cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80069d0:	1d33      	adds	r3, r6, #4
 80069d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80069d4:	6838      	ldr	r0, [r7, #0]
 80069d6:	f004 fc0d 	bl	800b1f4 <USB_DevInit>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e014      	b.n	8006a16 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d102      	bne.n	8006a0a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f80a 	bl	8006a1e <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f004 fdb9 	bl	800b586 <USB_DevDisconnect>

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3714      	adds	r7, #20
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006a1e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006a1e:	b480      	push	{r7}
 8006a20:	b085      	sub	sp, #20
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	699b      	ldr	r3, [r3, #24]
 8006a40:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a50:	f043 0303 	orr.w	r3, r3, #3
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	3714      	adds	r7, #20
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
	...

08006a68 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a6c:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a04      	ldr	r2, [pc, #16]	; (8006a84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a76:	6013      	str	r3, [r2, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop
 8006a84:	40007000 	.word	0x40007000

08006a88 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006a8c:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <HAL_PWREx_GetVoltageRange+0x18>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	40007000 	.word	0x40007000

08006aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ab2:	d130      	bne.n	8006b16 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006ab4:	4b23      	ldr	r3, [pc, #140]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ac0:	d038      	beq.n	8006b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006ac2:	4b20      	ldr	r3, [pc, #128]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006aca:	4a1e      	ldr	r2, [pc, #120]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006acc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ad0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006ad2:	4b1d      	ldr	r3, [pc, #116]	; (8006b48 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2232      	movs	r2, #50	; 0x32
 8006ad8:	fb02 f303 	mul.w	r3, r2, r3
 8006adc:	4a1b      	ldr	r2, [pc, #108]	; (8006b4c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006ade:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae2:	0c9b      	lsrs	r3, r3, #18
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ae8:	e002      	b.n	8006af0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	3b01      	subs	r3, #1
 8006aee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006af0:	4b14      	ldr	r3, [pc, #80]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006af2:	695b      	ldr	r3, [r3, #20]
 8006af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006af8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afc:	d102      	bne.n	8006b04 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d1f2      	bne.n	8006aea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006b04:	4b0f      	ldr	r3, [pc, #60]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b06:	695b      	ldr	r3, [r3, #20]
 8006b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b10:	d110      	bne.n	8006b34 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006b12:	2303      	movs	r3, #3
 8006b14:	e00f      	b.n	8006b36 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006b16:	4b0b      	ldr	r3, [pc, #44]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006b1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b22:	d007      	beq.n	8006b34 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006b24:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b2c:	4a05      	ldr	r2, [pc, #20]	; (8006b44 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b32:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	3714      	adds	r7, #20
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	40007000 	.word	0x40007000
 8006b48:	20000000 	.word	0x20000000
 8006b4c:	431bde83 	.word	0x431bde83

08006b50 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8006b50:	b480      	push	{r7}
 8006b52:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8006b54:	4b05      	ldr	r3, [pc, #20]	; (8006b6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	4a04      	ldr	r2, [pc, #16]	; (8006b6c <HAL_PWREx_EnableVddUSB+0x1c>)
 8006b5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b5e:	6053      	str	r3, [r2, #4]
}
 8006b60:	bf00      	nop
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40007000 	.word	0x40007000

08006b70 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af02      	add	r7, sp, #8
 8006b76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8006b78:	f7fe fc62 	bl	8005440 <HAL_GetTick>
 8006b7c:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e063      	b.n	8006c50 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006b8e:	b2db      	uxtb	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10b      	bne.n	8006bac <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f7fc fe1b 	bl	80037d8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006ba2:	f241 3188 	movw	r1, #5000	; 0x1388
 8006ba6:	6878      	ldr	r0, [r7, #4]
 8006ba8:	f000 f858 	bl	8006c5c <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	3b01      	subs	r3, #1
 8006bbc:	021a      	lsls	r2, r3, #8
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	430a      	orrs	r2, r1
 8006bc4:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	2120      	movs	r1, #32
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f850 	bl	8006c78 <QSPI_WaitFlagStateUntilTimeout>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006bdc:	7afb      	ldrb	r3, [r7, #11]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d131      	bne.n	8006c46 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006bec:	f023 0310 	bic.w	r3, r3, #16
 8006bf0:	687a      	ldr	r2, [r7, #4]
 8006bf2:	6852      	ldr	r2, [r2, #4]
 8006bf4:	0611      	lsls	r1, r2, #24
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	68d2      	ldr	r2, [r2, #12]
 8006bfa:	4311      	orrs	r1, r2
 8006bfc:	687a      	ldr	r2, [r7, #4]
 8006bfe:	6812      	ldr	r2, [r2, #0]
 8006c00:	430b      	orrs	r3, r1
 8006c02:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	4b13      	ldr	r3, [pc, #76]	; (8006c58 <HAL_QSPI_Init+0xe8>)
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	6912      	ldr	r2, [r2, #16]
 8006c12:	0411      	lsls	r1, r2, #16
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6952      	ldr	r2, [r2, #20]
 8006c18:	4311      	orrs	r1, r2
 8006c1a:	687a      	ldr	r2, [r7, #4]
 8006c1c:	6992      	ldr	r2, [r2, #24]
 8006c1e:	4311      	orrs	r1, r2
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	6812      	ldr	r2, [r2, #0]
 8006c24:	430b      	orrs	r3, r1
 8006c26:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f042 0201 	orr.w	r2, r2, #1
 8006c36:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8006c4e:	7afb      	ldrb	r3, [r7, #11]
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	ffe0f8fe 	.word	0xffe0f8fe

08006c5c <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	683a      	ldr	r2, [r7, #0]
 8006c6a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8006c6c:	bf00      	nop
 8006c6e:	370c      	adds	r7, #12
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr

08006c78 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b084      	sub	sp, #16
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	60b9      	str	r1, [r7, #8]
 8006c82:	603b      	str	r3, [r7, #0]
 8006c84:	4613      	mov	r3, r2
 8006c86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006c88:	e01a      	b.n	8006cc0 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c8a:	69bb      	ldr	r3, [r7, #24]
 8006c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c90:	d016      	beq.n	8006cc0 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c92:	f7fe fbd5 	bl	8005440 <HAL_GetTick>
 8006c96:	4602      	mov	r2, r0
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	1ad3      	subs	r3, r2, r3
 8006c9c:	69ba      	ldr	r2, [r7, #24]
 8006c9e:	429a      	cmp	r2, r3
 8006ca0:	d302      	bcc.n	8006ca8 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d10b      	bne.n	8006cc0 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	2204      	movs	r2, #4
 8006cac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb4:	f043 0201 	orr.w	r2, r3, #1
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e00e      	b.n	8006cde <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	4013      	ands	r3, r2
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bf14      	ite	ne
 8006cce:	2301      	movne	r3, #1
 8006cd0:	2300      	moveq	r3, #0
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	461a      	mov	r2, r3
 8006cd6:	79fb      	ldrb	r3, [r7, #7]
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d1d6      	bne.n	8006c8a <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
	...

08006ce8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e3ca      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cfa:	4b97      	ldr	r3, [pc, #604]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	f003 030c 	and.w	r3, r3, #12
 8006d02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006d04:	4b94      	ldr	r3, [pc, #592]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d06:	68db      	ldr	r3, [r3, #12]
 8006d08:	f003 0303 	and.w	r3, r3, #3
 8006d0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f003 0310 	and.w	r3, r3, #16
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	f000 80e4 	beq.w	8006ee4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006d1c:	69bb      	ldr	r3, [r7, #24]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d007      	beq.n	8006d32 <HAL_RCC_OscConfig+0x4a>
 8006d22:	69bb      	ldr	r3, [r7, #24]
 8006d24:	2b0c      	cmp	r3, #12
 8006d26:	f040 808b 	bne.w	8006e40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	2b01      	cmp	r3, #1
 8006d2e:	f040 8087 	bne.w	8006e40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d32:	4b89      	ldr	r3, [pc, #548]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d005      	beq.n	8006d4a <HAL_RCC_OscConfig+0x62>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	699b      	ldr	r3, [r3, #24]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d101      	bne.n	8006d4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e3a2      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	6a1a      	ldr	r2, [r3, #32]
 8006d4e:	4b82      	ldr	r3, [pc, #520]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0308 	and.w	r3, r3, #8
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d004      	beq.n	8006d64 <HAL_RCC_OscConfig+0x7c>
 8006d5a:	4b7f      	ldr	r3, [pc, #508]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d62:	e005      	b.n	8006d70 <HAL_RCC_OscConfig+0x88>
 8006d64:	4b7c      	ldr	r3, [pc, #496]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d6a:	091b      	lsrs	r3, r3, #4
 8006d6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d223      	bcs.n	8006dbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f000 fd55 	bl	8007828 <RCC_SetFlashLatencyFromMSIRange>
 8006d7e:	4603      	mov	r3, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d001      	beq.n	8006d88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e383      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d88:	4b73      	ldr	r3, [pc, #460]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a72      	ldr	r2, [pc, #456]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d8e:	f043 0308 	orr.w	r3, r3, #8
 8006d92:	6013      	str	r3, [r2, #0]
 8006d94:	4b70      	ldr	r3, [pc, #448]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6a1b      	ldr	r3, [r3, #32]
 8006da0:	496d      	ldr	r1, [pc, #436]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006da6:	4b6c      	ldr	r3, [pc, #432]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	4968      	ldr	r1, [pc, #416]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006db6:	4313      	orrs	r3, r2
 8006db8:	604b      	str	r3, [r1, #4]
 8006dba:	e025      	b.n	8006e08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006dbc:	4b66      	ldr	r3, [pc, #408]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a65      	ldr	r2, [pc, #404]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006dc2:	f043 0308 	orr.w	r3, r3, #8
 8006dc6:	6013      	str	r3, [r2, #0]
 8006dc8:	4b63      	ldr	r3, [pc, #396]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6a1b      	ldr	r3, [r3, #32]
 8006dd4:	4960      	ldr	r1, [pc, #384]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006dda:	4b5f      	ldr	r3, [pc, #380]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	021b      	lsls	r3, r3, #8
 8006de8:	495b      	ldr	r1, [pc, #364]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006dea:	4313      	orrs	r3, r2
 8006dec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d109      	bne.n	8006e08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 fd15 	bl	8007828 <RCC_SetFlashLatencyFromMSIRange>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006e04:	2301      	movs	r3, #1
 8006e06:	e343      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006e08:	f000 fc4a 	bl	80076a0 <HAL_RCC_GetSysClockFreq>
 8006e0c:	4602      	mov	r2, r0
 8006e0e:	4b52      	ldr	r3, [pc, #328]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	091b      	lsrs	r3, r3, #4
 8006e14:	f003 030f 	and.w	r3, r3, #15
 8006e18:	4950      	ldr	r1, [pc, #320]	; (8006f5c <HAL_RCC_OscConfig+0x274>)
 8006e1a:	5ccb      	ldrb	r3, [r1, r3]
 8006e1c:	f003 031f 	and.w	r3, r3, #31
 8006e20:	fa22 f303 	lsr.w	r3, r2, r3
 8006e24:	4a4e      	ldr	r2, [pc, #312]	; (8006f60 <HAL_RCC_OscConfig+0x278>)
 8006e26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006e28:	4b4e      	ldr	r3, [pc, #312]	; (8006f64 <HAL_RCC_OscConfig+0x27c>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fe fab7 	bl	80053a0 <HAL_InitTick>
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006e36:	7bfb      	ldrb	r3, [r7, #15]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d052      	beq.n	8006ee2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8006e3c:	7bfb      	ldrb	r3, [r7, #15]
 8006e3e:	e327      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d032      	beq.n	8006eae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e48:	4b43      	ldr	r3, [pc, #268]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	4a42      	ldr	r2, [pc, #264]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e4e:	f043 0301 	orr.w	r3, r3, #1
 8006e52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e54:	f7fe faf4 	bl	8005440 <HAL_GetTick>
 8006e58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e5a:	e008      	b.n	8006e6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e5c:	f7fe faf0 	bl	8005440 <HAL_GetTick>
 8006e60:	4602      	mov	r2, r0
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	1ad3      	subs	r3, r2, r3
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e310      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e6e:	4b3a      	ldr	r3, [pc, #232]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d0f0      	beq.n	8006e5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e7a:	4b37      	ldr	r3, [pc, #220]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a36      	ldr	r2, [pc, #216]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e80:	f043 0308 	orr.w	r3, r3, #8
 8006e84:	6013      	str	r3, [r2, #0]
 8006e86:	4b34      	ldr	r3, [pc, #208]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	4931      	ldr	r1, [pc, #196]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e94:	4313      	orrs	r3, r2
 8006e96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e98:	4b2f      	ldr	r3, [pc, #188]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	69db      	ldr	r3, [r3, #28]
 8006ea4:	021b      	lsls	r3, r3, #8
 8006ea6:	492c      	ldr	r1, [pc, #176]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	604b      	str	r3, [r1, #4]
 8006eac:	e01a      	b.n	8006ee4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006eae:	4b2a      	ldr	r3, [pc, #168]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a29      	ldr	r2, [pc, #164]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006eba:	f7fe fac1 	bl	8005440 <HAL_GetTick>
 8006ebe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006ec0:	e008      	b.n	8006ed4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006ec2:	f7fe fabd 	bl	8005440 <HAL_GetTick>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	1ad3      	subs	r3, r2, r3
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d901      	bls.n	8006ed4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006ed0:	2303      	movs	r3, #3
 8006ed2:	e2dd      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006ed4:	4b20      	ldr	r3, [pc, #128]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0302 	and.w	r3, r3, #2
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1f0      	bne.n	8006ec2 <HAL_RCC_OscConfig+0x1da>
 8006ee0:	e000      	b.n	8006ee4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ee2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f003 0301 	and.w	r3, r3, #1
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d074      	beq.n	8006fda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006ef0:	69bb      	ldr	r3, [r7, #24]
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d005      	beq.n	8006f02 <HAL_RCC_OscConfig+0x21a>
 8006ef6:	69bb      	ldr	r3, [r7, #24]
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d10e      	bne.n	8006f1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2b03      	cmp	r3, #3
 8006f00:	d10b      	bne.n	8006f1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f02:	4b15      	ldr	r3, [pc, #84]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d064      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x2f0>
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d160      	bne.n	8006fd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006f16:	2301      	movs	r3, #1
 8006f18:	e2ba      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	685b      	ldr	r3, [r3, #4]
 8006f1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f22:	d106      	bne.n	8006f32 <HAL_RCC_OscConfig+0x24a>
 8006f24:	4b0c      	ldr	r3, [pc, #48]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a0b      	ldr	r2, [pc, #44]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f2e:	6013      	str	r3, [r2, #0]
 8006f30:	e026      	b.n	8006f80 <HAL_RCC_OscConfig+0x298>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f3a:	d115      	bne.n	8006f68 <HAL_RCC_OscConfig+0x280>
 8006f3c:	4b06      	ldr	r3, [pc, #24]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a05      	ldr	r2, [pc, #20]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006f42:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f46:	6013      	str	r3, [r2, #0]
 8006f48:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a02      	ldr	r2, [pc, #8]	; (8006f58 <HAL_RCC_OscConfig+0x270>)
 8006f4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e014      	b.n	8006f80 <HAL_RCC_OscConfig+0x298>
 8006f56:	bf00      	nop
 8006f58:	40021000 	.word	0x40021000
 8006f5c:	080129a0 	.word	0x080129a0
 8006f60:	20000000 	.word	0x20000000
 8006f64:	20000004 	.word	0x20000004
 8006f68:	4ba0      	ldr	r3, [pc, #640]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a9f      	ldr	r2, [pc, #636]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8006f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f72:	6013      	str	r3, [r2, #0]
 8006f74:	4b9d      	ldr	r3, [pc, #628]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a9c      	ldr	r2, [pc, #624]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8006f7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d013      	beq.n	8006fb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f88:	f7fe fa5a 	bl	8005440 <HAL_GetTick>
 8006f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f8e:	e008      	b.n	8006fa2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f90:	f7fe fa56 	bl	8005440 <HAL_GetTick>
 8006f94:	4602      	mov	r2, r0
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	1ad3      	subs	r3, r2, r3
 8006f9a:	2b64      	cmp	r3, #100	; 0x64
 8006f9c:	d901      	bls.n	8006fa2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e276      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006fa2:	4b92      	ldr	r3, [pc, #584]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0f0      	beq.n	8006f90 <HAL_RCC_OscConfig+0x2a8>
 8006fae:	e014      	b.n	8006fda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fb0:	f7fe fa46 	bl	8005440 <HAL_GetTick>
 8006fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fb6:	e008      	b.n	8006fca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006fb8:	f7fe fa42 	bl	8005440 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b64      	cmp	r3, #100	; 0x64
 8006fc4:	d901      	bls.n	8006fca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e262      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006fca:	4b88      	ldr	r3, [pc, #544]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCC_OscConfig+0x2d0>
 8006fd6:	e000      	b.n	8006fda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006fd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f003 0302 	and.w	r3, r3, #2
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d060      	beq.n	80070a8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006fe6:	69bb      	ldr	r3, [r7, #24]
 8006fe8:	2b04      	cmp	r3, #4
 8006fea:	d005      	beq.n	8006ff8 <HAL_RCC_OscConfig+0x310>
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b0c      	cmp	r3, #12
 8006ff0:	d119      	bne.n	8007026 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d116      	bne.n	8007026 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ff8:	4b7c      	ldr	r3, [pc, #496]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007000:	2b00      	cmp	r3, #0
 8007002:	d005      	beq.n	8007010 <HAL_RCC_OscConfig+0x328>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d101      	bne.n	8007010 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e23f      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007010:	4b76      	ldr	r3, [pc, #472]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	061b      	lsls	r3, r3, #24
 800701e:	4973      	ldr	r1, [pc, #460]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007020:	4313      	orrs	r3, r2
 8007022:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007024:	e040      	b.n	80070a8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d023      	beq.n	8007076 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800702e:	4b6f      	ldr	r3, [pc, #444]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a6e      	ldr	r2, [pc, #440]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007034:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007038:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800703a:	f7fe fa01 	bl	8005440 <HAL_GetTick>
 800703e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007040:	e008      	b.n	8007054 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007042:	f7fe f9fd 	bl	8005440 <HAL_GetTick>
 8007046:	4602      	mov	r2, r0
 8007048:	693b      	ldr	r3, [r7, #16]
 800704a:	1ad3      	subs	r3, r2, r3
 800704c:	2b02      	cmp	r3, #2
 800704e:	d901      	bls.n	8007054 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007050:	2303      	movs	r3, #3
 8007052:	e21d      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007054:	4b65      	ldr	r3, [pc, #404]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800705c:	2b00      	cmp	r3, #0
 800705e:	d0f0      	beq.n	8007042 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007060:	4b62      	ldr	r3, [pc, #392]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	061b      	lsls	r3, r3, #24
 800706e:	495f      	ldr	r1, [pc, #380]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007070:	4313      	orrs	r3, r2
 8007072:	604b      	str	r3, [r1, #4]
 8007074:	e018      	b.n	80070a8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007076:	4b5d      	ldr	r3, [pc, #372]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a5c      	ldr	r2, [pc, #368]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 800707c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007080:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007082:	f7fe f9dd 	bl	8005440 <HAL_GetTick>
 8007086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007088:	e008      	b.n	800709c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800708a:	f7fe f9d9 	bl	8005440 <HAL_GetTick>
 800708e:	4602      	mov	r2, r0
 8007090:	693b      	ldr	r3, [r7, #16]
 8007092:	1ad3      	subs	r3, r2, r3
 8007094:	2b02      	cmp	r3, #2
 8007096:	d901      	bls.n	800709c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e1f9      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800709c:	4b53      	ldr	r3, [pc, #332]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d1f0      	bne.n	800708a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f003 0308 	and.w	r3, r3, #8
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d03c      	beq.n	800712e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	695b      	ldr	r3, [r3, #20]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d01c      	beq.n	80070f6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80070bc:	4b4b      	ldr	r3, [pc, #300]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80070be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c2:	4a4a      	ldr	r2, [pc, #296]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80070c4:	f043 0301 	orr.w	r3, r3, #1
 80070c8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070cc:	f7fe f9b8 	bl	8005440 <HAL_GetTick>
 80070d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070d2:	e008      	b.n	80070e6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070d4:	f7fe f9b4 	bl	8005440 <HAL_GetTick>
 80070d8:	4602      	mov	r2, r0
 80070da:	693b      	ldr	r3, [r7, #16]
 80070dc:	1ad3      	subs	r3, r2, r3
 80070de:	2b02      	cmp	r3, #2
 80070e0:	d901      	bls.n	80070e6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80070e2:	2303      	movs	r3, #3
 80070e4:	e1d4      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070e6:	4b41      	ldr	r3, [pc, #260]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80070e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070ec:	f003 0302 	and.w	r3, r3, #2
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d0ef      	beq.n	80070d4 <HAL_RCC_OscConfig+0x3ec>
 80070f4:	e01b      	b.n	800712e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070f6:	4b3d      	ldr	r3, [pc, #244]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80070f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070fc:	4a3b      	ldr	r2, [pc, #236]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80070fe:	f023 0301 	bic.w	r3, r3, #1
 8007102:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007106:	f7fe f99b 	bl	8005440 <HAL_GetTick>
 800710a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800710c:	e008      	b.n	8007120 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800710e:	f7fe f997 	bl	8005440 <HAL_GetTick>
 8007112:	4602      	mov	r2, r0
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	1ad3      	subs	r3, r2, r3
 8007118:	2b02      	cmp	r3, #2
 800711a:	d901      	bls.n	8007120 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800711c:	2303      	movs	r3, #3
 800711e:	e1b7      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007120:	4b32      	ldr	r3, [pc, #200]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1ef      	bne.n	800710e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0304 	and.w	r3, r3, #4
 8007136:	2b00      	cmp	r3, #0
 8007138:	f000 80a6 	beq.w	8007288 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800713c:	2300      	movs	r3, #0
 800713e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007140:	4b2a      	ldr	r3, [pc, #168]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10d      	bne.n	8007168 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800714c:	4b27      	ldr	r3, [pc, #156]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 800714e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007150:	4a26      	ldr	r2, [pc, #152]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 8007152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007156:	6593      	str	r3, [r2, #88]	; 0x58
 8007158:	4b24      	ldr	r3, [pc, #144]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 800715a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800715c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007160:	60bb      	str	r3, [r7, #8]
 8007162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007164:	2301      	movs	r3, #1
 8007166:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007168:	4b21      	ldr	r3, [pc, #132]	; (80071f0 <HAL_RCC_OscConfig+0x508>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007170:	2b00      	cmp	r3, #0
 8007172:	d118      	bne.n	80071a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007174:	4b1e      	ldr	r3, [pc, #120]	; (80071f0 <HAL_RCC_OscConfig+0x508>)
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a1d      	ldr	r2, [pc, #116]	; (80071f0 <HAL_RCC_OscConfig+0x508>)
 800717a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007180:	f7fe f95e 	bl	8005440 <HAL_GetTick>
 8007184:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007186:	e008      	b.n	800719a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007188:	f7fe f95a 	bl	8005440 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	2b02      	cmp	r3, #2
 8007194:	d901      	bls.n	800719a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e17a      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800719a:	4b15      	ldr	r3, [pc, #84]	; (80071f0 <HAL_RCC_OscConfig+0x508>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d0f0      	beq.n	8007188 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d108      	bne.n	80071c0 <HAL_RCC_OscConfig+0x4d8>
 80071ae:	4b0f      	ldr	r3, [pc, #60]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071b4:	4a0d      	ldr	r2, [pc, #52]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80071b6:	f043 0301 	orr.w	r3, r3, #1
 80071ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071be:	e029      	b.n	8007214 <HAL_RCC_OscConfig+0x52c>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b05      	cmp	r3, #5
 80071c6:	d115      	bne.n	80071f4 <HAL_RCC_OscConfig+0x50c>
 80071c8:	4b08      	ldr	r3, [pc, #32]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80071ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ce:	4a07      	ldr	r2, [pc, #28]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80071d0:	f043 0304 	orr.w	r3, r3, #4
 80071d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071d8:	4b04      	ldr	r3, [pc, #16]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80071da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071de:	4a03      	ldr	r2, [pc, #12]	; (80071ec <HAL_RCC_OscConfig+0x504>)
 80071e0:	f043 0301 	orr.w	r3, r3, #1
 80071e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071e8:	e014      	b.n	8007214 <HAL_RCC_OscConfig+0x52c>
 80071ea:	bf00      	nop
 80071ec:	40021000 	.word	0x40021000
 80071f0:	40007000 	.word	0x40007000
 80071f4:	4b9c      	ldr	r3, [pc, #624]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80071f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071fa:	4a9b      	ldr	r2, [pc, #620]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80071fc:	f023 0301 	bic.w	r3, r3, #1
 8007200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007204:	4b98      	ldr	r3, [pc, #608]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720a:	4a97      	ldr	r2, [pc, #604]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800720c:	f023 0304 	bic.w	r3, r3, #4
 8007210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d016      	beq.n	800724a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800721c:	f7fe f910 	bl	8005440 <HAL_GetTick>
 8007220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007222:	e00a      	b.n	800723a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007224:	f7fe f90c 	bl	8005440 <HAL_GetTick>
 8007228:	4602      	mov	r2, r0
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007232:	4293      	cmp	r3, r2
 8007234:	d901      	bls.n	800723a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007236:	2303      	movs	r3, #3
 8007238:	e12a      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800723a:	4b8b      	ldr	r3, [pc, #556]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800723c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007240:	f003 0302 	and.w	r3, r3, #2
 8007244:	2b00      	cmp	r3, #0
 8007246:	d0ed      	beq.n	8007224 <HAL_RCC_OscConfig+0x53c>
 8007248:	e015      	b.n	8007276 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800724a:	f7fe f8f9 	bl	8005440 <HAL_GetTick>
 800724e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007250:	e00a      	b.n	8007268 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007252:	f7fe f8f5 	bl	8005440 <HAL_GetTick>
 8007256:	4602      	mov	r2, r0
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	1ad3      	subs	r3, r2, r3
 800725c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007260:	4293      	cmp	r3, r2
 8007262:	d901      	bls.n	8007268 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e113      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007268:	4b7f      	ldr	r3, [pc, #508]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800726a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800726e:	f003 0302 	and.w	r3, r3, #2
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1ed      	bne.n	8007252 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007276:	7ffb      	ldrb	r3, [r7, #31]
 8007278:	2b01      	cmp	r3, #1
 800727a:	d105      	bne.n	8007288 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800727c:	4b7a      	ldr	r3, [pc, #488]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800727e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007280:	4a79      	ldr	r2, [pc, #484]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007286:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728c:	2b00      	cmp	r3, #0
 800728e:	f000 80fe 	beq.w	800748e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007296:	2b02      	cmp	r3, #2
 8007298:	f040 80d0 	bne.w	800743c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800729c:	4b72      	ldr	r3, [pc, #456]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	f003 0203 	and.w	r2, r3, #3
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d130      	bne.n	8007312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	3b01      	subs	r3, #1
 80072bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072be:	429a      	cmp	r2, r3
 80072c0:	d127      	bne.n	8007312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d11f      	bne.n	8007312 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072dc:	2a07      	cmp	r2, #7
 80072de:	bf14      	ite	ne
 80072e0:	2201      	movne	r2, #1
 80072e2:	2200      	moveq	r2, #0
 80072e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d113      	bne.n	8007312 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	3b01      	subs	r3, #1
 80072f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d109      	bne.n	8007312 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007308:	085b      	lsrs	r3, r3, #1
 800730a:	3b01      	subs	r3, #1
 800730c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800730e:	429a      	cmp	r2, r3
 8007310:	d06e      	beq.n	80073f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	2b0c      	cmp	r3, #12
 8007316:	d069      	beq.n	80073ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007318:	4b53      	ldr	r3, [pc, #332]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007324:	4b50      	ldr	r3, [pc, #320]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8007330:	2301      	movs	r3, #1
 8007332:	e0ad      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007334:	4b4c      	ldr	r3, [pc, #304]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a4b      	ldr	r2, [pc, #300]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800733a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800733e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007340:	f7fe f87e 	bl	8005440 <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007346:	e008      	b.n	800735a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007348:	f7fe f87a 	bl	8005440 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	2b02      	cmp	r3, #2
 8007354:	d901      	bls.n	800735a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e09a      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800735a:	4b43      	ldr	r3, [pc, #268]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d1f0      	bne.n	8007348 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007366:	4b40      	ldr	r3, [pc, #256]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	4b40      	ldr	r3, [pc, #256]	; (800746c <HAL_RCC_OscConfig+0x784>)
 800736c:	4013      	ands	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007376:	3a01      	subs	r2, #1
 8007378:	0112      	lsls	r2, r2, #4
 800737a:	4311      	orrs	r1, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007380:	0212      	lsls	r2, r2, #8
 8007382:	4311      	orrs	r1, r2
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007388:	0852      	lsrs	r2, r2, #1
 800738a:	3a01      	subs	r2, #1
 800738c:	0552      	lsls	r2, r2, #21
 800738e:	4311      	orrs	r1, r2
 8007390:	687a      	ldr	r2, [r7, #4]
 8007392:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007394:	0852      	lsrs	r2, r2, #1
 8007396:	3a01      	subs	r2, #1
 8007398:	0652      	lsls	r2, r2, #25
 800739a:	4311      	orrs	r1, r2
 800739c:	687a      	ldr	r2, [r7, #4]
 800739e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073a0:	0912      	lsrs	r2, r2, #4
 80073a2:	0452      	lsls	r2, r2, #17
 80073a4:	430a      	orrs	r2, r1
 80073a6:	4930      	ldr	r1, [pc, #192]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80073a8:	4313      	orrs	r3, r2
 80073aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80073ac:	4b2e      	ldr	r3, [pc, #184]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a2d      	ldr	r2, [pc, #180]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80073b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073b8:	4b2b      	ldr	r3, [pc, #172]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80073ba:	68db      	ldr	r3, [r3, #12]
 80073bc:	4a2a      	ldr	r2, [pc, #168]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80073be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073c4:	f7fe f83c 	bl	8005440 <HAL_GetTick>
 80073c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073ca:	e008      	b.n	80073de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073cc:	f7fe f838 	bl	8005440 <HAL_GetTick>
 80073d0:	4602      	mov	r2, r0
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	1ad3      	subs	r3, r2, r3
 80073d6:	2b02      	cmp	r3, #2
 80073d8:	d901      	bls.n	80073de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e058      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073de:	4b22      	ldr	r3, [pc, #136]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f0      	beq.n	80073cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80073ea:	e050      	b.n	800748e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	e04f      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073f0:	4b1d      	ldr	r3, [pc, #116]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d148      	bne.n	800748e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80073fc:	4b1a      	ldr	r3, [pc, #104]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	4a19      	ldr	r2, [pc, #100]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007406:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007408:	4b17      	ldr	r3, [pc, #92]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	4a16      	ldr	r2, [pc, #88]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 800740e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007412:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007414:	f7fe f814 	bl	8005440 <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800741c:	f7fe f810 	bl	8005440 <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e030      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800742e:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d0f0      	beq.n	800741c <HAL_RCC_OscConfig+0x734>
 800743a:	e028      	b.n	800748e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b0c      	cmp	r3, #12
 8007440:	d023      	beq.n	800748a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007442:	4b09      	ldr	r3, [pc, #36]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a08      	ldr	r2, [pc, #32]	; (8007468 <HAL_RCC_OscConfig+0x780>)
 8007448:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800744c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800744e:	f7fd fff7 	bl	8005440 <HAL_GetTick>
 8007452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007454:	e00c      	b.n	8007470 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007456:	f7fd fff3 	bl	8005440 <HAL_GetTick>
 800745a:	4602      	mov	r2, r0
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	1ad3      	subs	r3, r2, r3
 8007460:	2b02      	cmp	r3, #2
 8007462:	d905      	bls.n	8007470 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8007464:	2303      	movs	r3, #3
 8007466:	e013      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
 8007468:	40021000 	.word	0x40021000
 800746c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007470:	4b09      	ldr	r3, [pc, #36]	; (8007498 <HAL_RCC_OscConfig+0x7b0>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1ec      	bne.n	8007456 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800747c:	4b06      	ldr	r3, [pc, #24]	; (8007498 <HAL_RCC_OscConfig+0x7b0>)
 800747e:	68da      	ldr	r2, [r3, #12]
 8007480:	4905      	ldr	r1, [pc, #20]	; (8007498 <HAL_RCC_OscConfig+0x7b0>)
 8007482:	4b06      	ldr	r3, [pc, #24]	; (800749c <HAL_RCC_OscConfig+0x7b4>)
 8007484:	4013      	ands	r3, r2
 8007486:	60cb      	str	r3, [r1, #12]
 8007488:	e001      	b.n	800748e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3720      	adds	r7, #32
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	40021000 	.word	0x40021000
 800749c:	feeefffc 	.word	0xfeeefffc

080074a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e0e7      	b.n	8007684 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074b4:	4b75      	ldr	r3, [pc, #468]	; (800768c <HAL_RCC_ClockConfig+0x1ec>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d910      	bls.n	80074e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074c2:	4b72      	ldr	r3, [pc, #456]	; (800768c <HAL_RCC_ClockConfig+0x1ec>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f023 0207 	bic.w	r2, r3, #7
 80074ca:	4970      	ldr	r1, [pc, #448]	; (800768c <HAL_RCC_ClockConfig+0x1ec>)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074d2:	4b6e      	ldr	r3, [pc, #440]	; (800768c <HAL_RCC_ClockConfig+0x1ec>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	683a      	ldr	r2, [r7, #0]
 80074dc:	429a      	cmp	r2, r3
 80074de:	d001      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e0cf      	b.n	8007684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d010      	beq.n	8007512 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	689a      	ldr	r2, [r3, #8]
 80074f4:	4b66      	ldr	r3, [pc, #408]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d908      	bls.n	8007512 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007500:	4b63      	ldr	r3, [pc, #396]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	4960      	ldr	r1, [pc, #384]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 800750e:	4313      	orrs	r3, r2
 8007510:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d04c      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	2b03      	cmp	r3, #3
 8007524:	d107      	bne.n	8007536 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007526:	4b5a      	ldr	r3, [pc, #360]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d121      	bne.n	8007576 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	e0a6      	b.n	8007684 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	685b      	ldr	r3, [r3, #4]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d107      	bne.n	800754e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800753e:	4b54      	ldr	r3, [pc, #336]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007546:	2b00      	cmp	r3, #0
 8007548:	d115      	bne.n	8007576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800754a:	2301      	movs	r3, #1
 800754c:	e09a      	b.n	8007684 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d107      	bne.n	8007566 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007556:	4b4e      	ldr	r3, [pc, #312]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f003 0302 	and.w	r3, r3, #2
 800755e:	2b00      	cmp	r3, #0
 8007560:	d109      	bne.n	8007576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007562:	2301      	movs	r3, #1
 8007564:	e08e      	b.n	8007684 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007566:	4b4a      	ldr	r3, [pc, #296]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e086      	b.n	8007684 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007576:	4b46      	ldr	r3, [pc, #280]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007578:	689b      	ldr	r3, [r3, #8]
 800757a:	f023 0203 	bic.w	r2, r3, #3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	4943      	ldr	r1, [pc, #268]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007584:	4313      	orrs	r3, r2
 8007586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007588:	f7fd ff5a 	bl	8005440 <HAL_GetTick>
 800758c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800758e:	e00a      	b.n	80075a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007590:	f7fd ff56 	bl	8005440 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f241 3288 	movw	r2, #5000	; 0x1388
 800759e:	4293      	cmp	r3, r2
 80075a0:	d901      	bls.n	80075a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80075a2:	2303      	movs	r3, #3
 80075a4:	e06e      	b.n	8007684 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075a6:	4b3a      	ldr	r3, [pc, #232]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 80075a8:	689b      	ldr	r3, [r3, #8]
 80075aa:	f003 020c 	and.w	r2, r3, #12
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d1eb      	bne.n	8007590 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d010      	beq.n	80075e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	4b31      	ldr	r3, [pc, #196]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 80075ca:	689b      	ldr	r3, [r3, #8]
 80075cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075d0:	429a      	cmp	r2, r3
 80075d2:	d208      	bcs.n	80075e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d4:	4b2e      	ldr	r3, [pc, #184]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	689b      	ldr	r3, [r3, #8]
 80075e0:	492b      	ldr	r1, [pc, #172]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 80075e2:	4313      	orrs	r3, r2
 80075e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075e6:	4b29      	ldr	r3, [pc, #164]	; (800768c <HAL_RCC_ClockConfig+0x1ec>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f003 0307 	and.w	r3, r3, #7
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d210      	bcs.n	8007616 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075f4:	4b25      	ldr	r3, [pc, #148]	; (800768c <HAL_RCC_ClockConfig+0x1ec>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f023 0207 	bic.w	r2, r3, #7
 80075fc:	4923      	ldr	r1, [pc, #140]	; (800768c <HAL_RCC_ClockConfig+0x1ec>)
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	4313      	orrs	r3, r2
 8007602:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007604:	4b21      	ldr	r3, [pc, #132]	; (800768c <HAL_RCC_ClockConfig+0x1ec>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f003 0307 	and.w	r3, r3, #7
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d001      	beq.n	8007616 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007612:	2301      	movs	r3, #1
 8007614:	e036      	b.n	8007684 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0304 	and.w	r3, r3, #4
 800761e:	2b00      	cmp	r3, #0
 8007620:	d008      	beq.n	8007634 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007622:	4b1b      	ldr	r3, [pc, #108]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007624:	689b      	ldr	r3, [r3, #8]
 8007626:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68db      	ldr	r3, [r3, #12]
 800762e:	4918      	ldr	r1, [pc, #96]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007630:	4313      	orrs	r3, r2
 8007632:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	f003 0308 	and.w	r3, r3, #8
 800763c:	2b00      	cmp	r3, #0
 800763e:	d009      	beq.n	8007654 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007640:	4b13      	ldr	r3, [pc, #76]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	4910      	ldr	r1, [pc, #64]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 8007650:	4313      	orrs	r3, r2
 8007652:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007654:	f000 f824 	bl	80076a0 <HAL_RCC_GetSysClockFreq>
 8007658:	4602      	mov	r2, r0
 800765a:	4b0d      	ldr	r3, [pc, #52]	; (8007690 <HAL_RCC_ClockConfig+0x1f0>)
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	091b      	lsrs	r3, r3, #4
 8007660:	f003 030f 	and.w	r3, r3, #15
 8007664:	490b      	ldr	r1, [pc, #44]	; (8007694 <HAL_RCC_ClockConfig+0x1f4>)
 8007666:	5ccb      	ldrb	r3, [r1, r3]
 8007668:	f003 031f 	and.w	r3, r3, #31
 800766c:	fa22 f303 	lsr.w	r3, r2, r3
 8007670:	4a09      	ldr	r2, [pc, #36]	; (8007698 <HAL_RCC_ClockConfig+0x1f8>)
 8007672:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007674:	4b09      	ldr	r3, [pc, #36]	; (800769c <HAL_RCC_ClockConfig+0x1fc>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4618      	mov	r0, r3
 800767a:	f7fd fe91 	bl	80053a0 <HAL_InitTick>
 800767e:	4603      	mov	r3, r0
 8007680:	72fb      	strb	r3, [r7, #11]

  return status;
 8007682:	7afb      	ldrb	r3, [r7, #11]
}
 8007684:	4618      	mov	r0, r3
 8007686:	3710      	adds	r7, #16
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}
 800768c:	40022000 	.word	0x40022000
 8007690:	40021000 	.word	0x40021000
 8007694:	080129a0 	.word	0x080129a0
 8007698:	20000000 	.word	0x20000000
 800769c:	20000004 	.word	0x20000004

080076a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b089      	sub	sp, #36	; 0x24
 80076a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
 80076aa:	2300      	movs	r3, #0
 80076ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076ae:	4b3e      	ldr	r3, [pc, #248]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076b0:	689b      	ldr	r3, [r3, #8]
 80076b2:	f003 030c 	and.w	r3, r3, #12
 80076b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076b8:	4b3b      	ldr	r3, [pc, #236]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0303 	and.w	r3, r3, #3
 80076c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <HAL_RCC_GetSysClockFreq+0x34>
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	2b0c      	cmp	r3, #12
 80076cc:	d121      	bne.n	8007712 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d11e      	bne.n	8007712 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80076d4:	4b34      	ldr	r3, [pc, #208]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d107      	bne.n	80076f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80076e0:	4b31      	ldr	r3, [pc, #196]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	f003 030f 	and.w	r3, r3, #15
 80076ec:	61fb      	str	r3, [r7, #28]
 80076ee:	e005      	b.n	80076fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80076f0:	4b2d      	ldr	r3, [pc, #180]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	091b      	lsrs	r3, r3, #4
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80076fc:	4a2b      	ldr	r2, [pc, #172]	; (80077ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80076fe:	69fb      	ldr	r3, [r7, #28]
 8007700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007704:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007706:	693b      	ldr	r3, [r7, #16]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10d      	bne.n	8007728 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007710:	e00a      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	2b04      	cmp	r3, #4
 8007716:	d102      	bne.n	800771e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8007718:	4b25      	ldr	r3, [pc, #148]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800771a:	61bb      	str	r3, [r7, #24]
 800771c:	e004      	b.n	8007728 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	2b08      	cmp	r3, #8
 8007722:	d101      	bne.n	8007728 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007724:	4b23      	ldr	r3, [pc, #140]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8007726:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8007728:	693b      	ldr	r3, [r7, #16]
 800772a:	2b0c      	cmp	r3, #12
 800772c:	d134      	bne.n	8007798 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800772e:	4b1e      	ldr	r3, [pc, #120]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007730:	68db      	ldr	r3, [r3, #12]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d003      	beq.n	8007746 <HAL_RCC_GetSysClockFreq+0xa6>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b03      	cmp	r3, #3
 8007742:	d003      	beq.n	800774c <HAL_RCC_GetSysClockFreq+0xac>
 8007744:	e005      	b.n	8007752 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8007746:	4b1a      	ldr	r3, [pc, #104]	; (80077b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8007748:	617b      	str	r3, [r7, #20]
      break;
 800774a:	e005      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800774c:	4b19      	ldr	r3, [pc, #100]	; (80077b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800774e:	617b      	str	r3, [r7, #20]
      break;
 8007750:	e002      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	617b      	str	r3, [r7, #20]
      break;
 8007756:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007758:	4b13      	ldr	r3, [pc, #76]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800775a:	68db      	ldr	r3, [r3, #12]
 800775c:	091b      	lsrs	r3, r3, #4
 800775e:	f003 0307 	and.w	r3, r3, #7
 8007762:	3301      	adds	r3, #1
 8007764:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007766:	4b10      	ldr	r3, [pc, #64]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	fb03 f202 	mul.w	r2, r3, r2
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	fbb2 f3f3 	udiv	r3, r2, r3
 800777c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800777e:	4b0a      	ldr	r3, [pc, #40]	; (80077a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8007780:	68db      	ldr	r3, [r3, #12]
 8007782:	0e5b      	lsrs	r3, r3, #25
 8007784:	f003 0303 	and.w	r3, r3, #3
 8007788:	3301      	adds	r3, #1
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800778e:	697a      	ldr	r2, [r7, #20]
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	fbb2 f3f3 	udiv	r3, r2, r3
 8007796:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007798:	69bb      	ldr	r3, [r7, #24]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3724      	adds	r7, #36	; 0x24
 800779e:	46bd      	mov	sp, r7
 80077a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a4:	4770      	bx	lr
 80077a6:	bf00      	nop
 80077a8:	40021000 	.word	0x40021000
 80077ac:	080129b8 	.word	0x080129b8
 80077b0:	00f42400 	.word	0x00f42400
 80077b4:	007a1200 	.word	0x007a1200

080077b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077b8:	b480      	push	{r7}
 80077ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077bc:	4b03      	ldr	r3, [pc, #12]	; (80077cc <HAL_RCC_GetHCLKFreq+0x14>)
 80077be:	681b      	ldr	r3, [r3, #0]
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	46bd      	mov	sp, r7
 80077c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c8:	4770      	bx	lr
 80077ca:	bf00      	nop
 80077cc:	20000000 	.word	0x20000000

080077d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80077d4:	f7ff fff0 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 80077d8:	4602      	mov	r2, r0
 80077da:	4b06      	ldr	r3, [pc, #24]	; (80077f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	0a1b      	lsrs	r3, r3, #8
 80077e0:	f003 0307 	and.w	r3, r3, #7
 80077e4:	4904      	ldr	r1, [pc, #16]	; (80077f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077e6:	5ccb      	ldrb	r3, [r1, r3]
 80077e8:	f003 031f 	and.w	r3, r3, #31
 80077ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40021000 	.word	0x40021000
 80077f8:	080129b0 	.word	0x080129b0

080077fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007800:	f7ff ffda 	bl	80077b8 <HAL_RCC_GetHCLKFreq>
 8007804:	4602      	mov	r2, r0
 8007806:	4b06      	ldr	r3, [pc, #24]	; (8007820 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007808:	689b      	ldr	r3, [r3, #8]
 800780a:	0adb      	lsrs	r3, r3, #11
 800780c:	f003 0307 	and.w	r3, r3, #7
 8007810:	4904      	ldr	r1, [pc, #16]	; (8007824 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007812:	5ccb      	ldrb	r3, [r1, r3]
 8007814:	f003 031f 	and.w	r3, r3, #31
 8007818:	fa22 f303 	lsr.w	r3, r2, r3
}
 800781c:	4618      	mov	r0, r3
 800781e:	bd80      	pop	{r7, pc}
 8007820:	40021000 	.word	0x40021000
 8007824:	080129b0 	.word	0x080129b0

08007828 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007830:	2300      	movs	r3, #0
 8007832:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007834:	4b2a      	ldr	r3, [pc, #168]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007838:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d003      	beq.n	8007848 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007840:	f7ff f922 	bl	8006a88 <HAL_PWREx_GetVoltageRange>
 8007844:	6178      	str	r0, [r7, #20]
 8007846:	e014      	b.n	8007872 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007848:	4b25      	ldr	r3, [pc, #148]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800784a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800784c:	4a24      	ldr	r2, [pc, #144]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800784e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007852:	6593      	str	r3, [r2, #88]	; 0x58
 8007854:	4b22      	ldr	r3, [pc, #136]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800785c:	60fb      	str	r3, [r7, #12]
 800785e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007860:	f7ff f912 	bl	8006a88 <HAL_PWREx_GetVoltageRange>
 8007864:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007866:	4b1e      	ldr	r3, [pc, #120]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800786a:	4a1d      	ldr	r2, [pc, #116]	; (80078e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800786c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007870:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007878:	d10b      	bne.n	8007892 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2b80      	cmp	r3, #128	; 0x80
 800787e:	d919      	bls.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2ba0      	cmp	r3, #160	; 0xa0
 8007884:	d902      	bls.n	800788c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007886:	2302      	movs	r3, #2
 8007888:	613b      	str	r3, [r7, #16]
 800788a:	e013      	b.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800788c:	2301      	movs	r3, #1
 800788e:	613b      	str	r3, [r7, #16]
 8007890:	e010      	b.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d902      	bls.n	800789e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007898:	2303      	movs	r3, #3
 800789a:	613b      	str	r3, [r7, #16]
 800789c:	e00a      	b.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	2b80      	cmp	r3, #128	; 0x80
 80078a2:	d102      	bne.n	80078aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80078a4:	2302      	movs	r3, #2
 80078a6:	613b      	str	r3, [r7, #16]
 80078a8:	e004      	b.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2b70      	cmp	r3, #112	; 0x70
 80078ae:	d101      	bne.n	80078b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80078b0:	2301      	movs	r3, #1
 80078b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80078b4:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f023 0207 	bic.w	r2, r3, #7
 80078bc:	4909      	ldr	r1, [pc, #36]	; (80078e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	4313      	orrs	r3, r2
 80078c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80078c4:	4b07      	ldr	r3, [pc, #28]	; (80078e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	693a      	ldr	r2, [r7, #16]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d001      	beq.n	80078d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e000      	b.n	80078d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80078d6:	2300      	movs	r3, #0
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3718      	adds	r7, #24
 80078dc:	46bd      	mov	sp, r7
 80078de:	bd80      	pop	{r7, pc}
 80078e0:	40021000 	.word	0x40021000
 80078e4:	40022000 	.word	0x40022000

080078e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b086      	sub	sp, #24
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80078f0:	2300      	movs	r3, #0
 80078f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80078f4:	2300      	movs	r3, #0
 80078f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007900:	2b00      	cmp	r3, #0
 8007902:	d041      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007908:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800790c:	d02a      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800790e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007912:	d824      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007914:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007918:	d008      	beq.n	800792c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800791a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800791e:	d81e      	bhi.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007928:	d010      	beq.n	800794c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800792a:	e018      	b.n	800795e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800792c:	4b86      	ldr	r3, [pc, #536]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	4a85      	ldr	r2, [pc, #532]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007936:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007938:	e015      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	3304      	adds	r3, #4
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f000 facb 	bl	8007edc <RCCEx_PLLSAI1_Config>
 8007946:	4603      	mov	r3, r0
 8007948:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800794a:	e00c      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	3320      	adds	r3, #32
 8007950:	2100      	movs	r1, #0
 8007952:	4618      	mov	r0, r3
 8007954:	f000 fbb6 	bl	80080c4 <RCCEx_PLLSAI2_Config>
 8007958:	4603      	mov	r3, r0
 800795a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800795c:	e003      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800795e:	2301      	movs	r3, #1
 8007960:	74fb      	strb	r3, [r7, #19]
      break;
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007966:	7cfb      	ldrb	r3, [r7, #19]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10b      	bne.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800796c:	4b76      	ldr	r3, [pc, #472]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800796e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007972:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800797a:	4973      	ldr	r1, [pc, #460]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800797c:	4313      	orrs	r3, r2
 800797e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007982:	e001      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007984:	7cfb      	ldrb	r3, [r7, #19]
 8007986:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d041      	beq.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007998:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800799c:	d02a      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800799e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80079a2:	d824      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80079a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079a8:	d008      	beq.n	80079bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80079aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079ae:	d81e      	bhi.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00a      	beq.n	80079ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80079b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079b8:	d010      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80079ba:	e018      	b.n	80079ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80079bc:	4b62      	ldr	r3, [pc, #392]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	4a61      	ldr	r2, [pc, #388]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079c8:	e015      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	3304      	adds	r3, #4
 80079ce:	2100      	movs	r1, #0
 80079d0:	4618      	mov	r0, r3
 80079d2:	f000 fa83 	bl	8007edc <RCCEx_PLLSAI1_Config>
 80079d6:	4603      	mov	r3, r0
 80079d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079da:	e00c      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	3320      	adds	r3, #32
 80079e0:	2100      	movs	r1, #0
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 fb6e 	bl	80080c4 <RCCEx_PLLSAI2_Config>
 80079e8:	4603      	mov	r3, r0
 80079ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80079ec:	e003      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	74fb      	strb	r3, [r7, #19]
      break;
 80079f2:	e000      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80079f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079f6:	7cfb      	ldrb	r3, [r7, #19]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10b      	bne.n	8007a14 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80079fc:	4b52      	ldr	r3, [pc, #328]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80079fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a02:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007a0a:	494f      	ldr	r1, [pc, #316]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007a12:	e001      	b.n	8007a18 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a14:	7cfb      	ldrb	r3, [r7, #19]
 8007a16:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 80a0 	beq.w	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a26:	2300      	movs	r3, #0
 8007a28:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a2a:	4b47      	ldr	r3, [pc, #284]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d00d      	beq.n	8007a5c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a40:	4b41      	ldr	r3, [pc, #260]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a44:	4a40      	ldr	r2, [pc, #256]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a4a:	6593      	str	r3, [r2, #88]	; 0x58
 8007a4c:	4b3e      	ldr	r3, [pc, #248]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a54:	60bb      	str	r3, [r7, #8]
 8007a56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a58:	2301      	movs	r3, #1
 8007a5a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a5c:	4b3b      	ldr	r3, [pc, #236]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a3a      	ldr	r2, [pc, #232]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a66:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a68:	f7fd fcea 	bl	8005440 <HAL_GetTick>
 8007a6c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a6e:	e009      	b.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a70:	f7fd fce6 	bl	8005440 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b02      	cmp	r3, #2
 8007a7c:	d902      	bls.n	8007a84 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	74fb      	strb	r3, [r7, #19]
        break;
 8007a82:	e005      	b.n	8007a90 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a84:	4b31      	ldr	r3, [pc, #196]	; (8007b4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0ef      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8007a90:	7cfb      	ldrb	r3, [r7, #19]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d15c      	bne.n	8007b50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a96:	4b2c      	ldr	r3, [pc, #176]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a9c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aa0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d01f      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d019      	beq.n	8007ae8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007ab4:	4b24      	ldr	r3, [pc, #144]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007abe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ac0:	4b21      	ldr	r3, [pc, #132]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac6:	4a20      	ldr	r2, [pc, #128]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007acc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ad0:	4b1d      	ldr	r3, [pc, #116]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ad2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ad6:	4a1c      	ldr	r2, [pc, #112]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ad8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007adc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ae0:	4a19      	ldr	r2, [pc, #100]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007ae2:	697b      	ldr	r3, [r7, #20]
 8007ae4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d016      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af2:	f7fd fca5 	bl	8005440 <HAL_GetTick>
 8007af6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007af8:	e00b      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007afa:	f7fd fca1 	bl	8005440 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d902      	bls.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007b0c:	2303      	movs	r3, #3
 8007b0e:	74fb      	strb	r3, [r7, #19]
            break;
 8007b10:	e006      	b.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b12:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b18:	f003 0302 	and.w	r3, r3, #2
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0ec      	beq.n	8007afa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8007b20:	7cfb      	ldrb	r3, [r7, #19]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10c      	bne.n	8007b40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b26:	4b08      	ldr	r3, [pc, #32]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007b36:	4904      	ldr	r1, [pc, #16]	; (8007b48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b3e:	e009      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b40:	7cfb      	ldrb	r3, [r7, #19]
 8007b42:	74bb      	strb	r3, [r7, #18]
 8007b44:	e006      	b.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8007b46:	bf00      	nop
 8007b48:	40021000 	.word	0x40021000
 8007b4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b50:	7cfb      	ldrb	r3, [r7, #19]
 8007b52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b54:	7c7b      	ldrb	r3, [r7, #17]
 8007b56:	2b01      	cmp	r3, #1
 8007b58:	d105      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b5a:	4b9e      	ldr	r3, [pc, #632]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b5e:	4a9d      	ldr	r2, [pc, #628]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f003 0301 	and.w	r3, r3, #1
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d00a      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b72:	4b98      	ldr	r3, [pc, #608]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b78:	f023 0203 	bic.w	r2, r3, #3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b80:	4994      	ldr	r1, [pc, #592]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f003 0302 	and.w	r3, r3, #2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b94:	4b8f      	ldr	r3, [pc, #572]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b9a:	f023 020c 	bic.w	r2, r3, #12
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	498c      	ldr	r1, [pc, #560]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f003 0304 	and.w	r3, r3, #4
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00a      	beq.n	8007bcc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007bb6:	4b87      	ldr	r3, [pc, #540]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bbc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bc4:	4983      	ldr	r1, [pc, #524]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00a      	beq.n	8007bee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bd8:	4b7e      	ldr	r3, [pc, #504]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bde:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be6:	497b      	ldr	r1, [pc, #492]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007be8:	4313      	orrs	r3, r2
 8007bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0310 	and.w	r3, r3, #16
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d00a      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007bfa:	4b76      	ldr	r3, [pc, #472]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c08:	4972      	ldr	r1, [pc, #456]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d00a      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007c1c:	4b6d      	ldr	r3, [pc, #436]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c2a:	496a      	ldr	r1, [pc, #424]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c2c:	4313      	orrs	r3, r2
 8007c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d00a      	beq.n	8007c54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007c3e:	4b65      	ldr	r3, [pc, #404]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c44:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	4961      	ldr	r1, [pc, #388]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d00a      	beq.n	8007c76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007c60:	4b5c      	ldr	r3, [pc, #368]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c66:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c6e:	4959      	ldr	r1, [pc, #356]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c70:	4313      	orrs	r3, r2
 8007c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c82:	4b54      	ldr	r3, [pc, #336]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c88:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c90:	4950      	ldr	r1, [pc, #320]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00a      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ca4:	4b4b      	ldr	r3, [pc, #300]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007caa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb2:	4948      	ldr	r1, [pc, #288]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007cc6:	4b43      	ldr	r3, [pc, #268]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ccc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cd4:	493f      	ldr	r1, [pc, #252]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d028      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ce8:	4b3a      	ldr	r3, [pc, #232]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf6:	4937      	ldr	r1, [pc, #220]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d06:	d106      	bne.n	8007d16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d08:	4b32      	ldr	r3, [pc, #200]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	4a31      	ldr	r2, [pc, #196]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d12:	60d3      	str	r3, [r2, #12]
 8007d14:	e011      	b.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d1a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d1e:	d10c      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	2101      	movs	r1, #1
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f8d8 	bl	8007edc <RCCEx_PLLSAI1_Config>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007d30:	7cfb      	ldrb	r3, [r7, #19]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8007d36:	7cfb      	ldrb	r3, [r7, #19]
 8007d38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d028      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007d46:	4b23      	ldr	r3, [pc, #140]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d54:	491f      	ldr	r1, [pc, #124]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d64:	d106      	bne.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007d66:	4b1b      	ldr	r3, [pc, #108]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d68:	68db      	ldr	r3, [r3, #12]
 8007d6a:	4a1a      	ldr	r2, [pc, #104]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007d6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007d70:	60d3      	str	r3, [r2, #12]
 8007d72:	e011      	b.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007d7c:	d10c      	bne.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3304      	adds	r3, #4
 8007d82:	2101      	movs	r1, #1
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f8a9 	bl	8007edc <RCCEx_PLLSAI1_Config>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d8e:	7cfb      	ldrb	r3, [r7, #19]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007d94:	7cfb      	ldrb	r3, [r7, #19]
 8007d96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d02b      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007da4:	4b0b      	ldr	r3, [pc, #44]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007da6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007daa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db2:	4908      	ldr	r1, [pc, #32]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007db4:	4313      	orrs	r3, r2
 8007db6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dbe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007dc2:	d109      	bne.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007dc4:	4b03      	ldr	r3, [pc, #12]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dc6:	68db      	ldr	r3, [r3, #12]
 8007dc8:	4a02      	ldr	r2, [pc, #8]	; (8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007dca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007dce:	60d3      	str	r3, [r2, #12]
 8007dd0:	e014      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8007dd2:	bf00      	nop
 8007dd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ddc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007de0:	d10c      	bne.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3304      	adds	r3, #4
 8007de6:	2101      	movs	r1, #1
 8007de8:	4618      	mov	r0, r3
 8007dea:	f000 f877 	bl	8007edc <RCCEx_PLLSAI1_Config>
 8007dee:	4603      	mov	r3, r0
 8007df0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007df2:	7cfb      	ldrb	r3, [r7, #19]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007df8:	7cfb      	ldrb	r3, [r7, #19]
 8007dfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d02f      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007e08:	4b2b      	ldr	r3, [pc, #172]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e0e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e16:	4928      	ldr	r1, [pc, #160]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e26:	d10d      	bne.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	3304      	adds	r3, #4
 8007e2c:	2102      	movs	r1, #2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f000 f854 	bl	8007edc <RCCEx_PLLSAI1_Config>
 8007e34:	4603      	mov	r3, r0
 8007e36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e38:	7cfb      	ldrb	r3, [r7, #19]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d014      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007e3e:	7cfb      	ldrb	r3, [r7, #19]
 8007e40:	74bb      	strb	r3, [r7, #18]
 8007e42:	e011      	b.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e4c:	d10c      	bne.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	3320      	adds	r3, #32
 8007e52:	2102      	movs	r1, #2
 8007e54:	4618      	mov	r0, r3
 8007e56:	f000 f935 	bl	80080c4 <RCCEx_PLLSAI2_Config>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007e5e:	7cfb      	ldrb	r3, [r7, #19]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d001      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8007e64:	7cfb      	ldrb	r3, [r7, #19]
 8007e66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d00a      	beq.n	8007e8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007e74:	4b10      	ldr	r3, [pc, #64]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e7a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e82:	490d      	ldr	r1, [pc, #52]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e84:	4313      	orrs	r3, r2
 8007e86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d00b      	beq.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007e96:	4b08      	ldr	r3, [pc, #32]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e9c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ea6:	4904      	ldr	r1, [pc, #16]	; (8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007eae:	7cbb      	ldrb	r3, [r7, #18]
}
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	3718      	adds	r7, #24
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	40021000 	.word	0x40021000

08007ebc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007ec0:	4b05      	ldr	r3, [pc, #20]	; (8007ed8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a04      	ldr	r2, [pc, #16]	; (8007ed8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007ec6:	f043 0304 	orr.w	r3, r3, #4
 8007eca:	6013      	str	r3, [r2, #0]
}
 8007ecc:	bf00      	nop
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	40021000 	.word	0x40021000

08007edc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007eea:	4b75      	ldr	r3, [pc, #468]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007eec:	68db      	ldr	r3, [r3, #12]
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d018      	beq.n	8007f28 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007ef6:	4b72      	ldr	r3, [pc, #456]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ef8:	68db      	ldr	r3, [r3, #12]
 8007efa:	f003 0203 	and.w	r2, r3, #3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d10d      	bne.n	8007f22 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
       ||
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007f0e:	4b6c      	ldr	r3, [pc, #432]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f10:	68db      	ldr	r3, [r3, #12]
 8007f12:	091b      	lsrs	r3, r3, #4
 8007f14:	f003 0307 	and.w	r3, r3, #7
 8007f18:	1c5a      	adds	r2, r3, #1
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	685b      	ldr	r3, [r3, #4]
       ||
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d047      	beq.n	8007fb2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	73fb      	strb	r3, [r7, #15]
 8007f26:	e044      	b.n	8007fb2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	d018      	beq.n	8007f62 <RCCEx_PLLSAI1_Config+0x86>
 8007f30:	2b03      	cmp	r3, #3
 8007f32:	d825      	bhi.n	8007f80 <RCCEx_PLLSAI1_Config+0xa4>
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d002      	beq.n	8007f3e <RCCEx_PLLSAI1_Config+0x62>
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d009      	beq.n	8007f50 <RCCEx_PLLSAI1_Config+0x74>
 8007f3c:	e020      	b.n	8007f80 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007f3e:	4b60      	ldr	r3, [pc, #384]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d11d      	bne.n	8007f86 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007f4a:	2301      	movs	r3, #1
 8007f4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f4e:	e01a      	b.n	8007f86 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007f50:	4b5b      	ldr	r3, [pc, #364]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d116      	bne.n	8007f8a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007f60:	e013      	b.n	8007f8a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007f62:	4b57      	ldr	r3, [pc, #348]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d10f      	bne.n	8007f8e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007f6e:	4b54      	ldr	r3, [pc, #336]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d109      	bne.n	8007f8e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f7e:	e006      	b.n	8007f8e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007f80:	2301      	movs	r3, #1
 8007f82:	73fb      	strb	r3, [r7, #15]
      break;
 8007f84:	e004      	b.n	8007f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f86:	bf00      	nop
 8007f88:	e002      	b.n	8007f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f8a:	bf00      	nop
 8007f8c:	e000      	b.n	8007f90 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007f8e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007f90:	7bfb      	ldrb	r3, [r7, #15]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d10d      	bne.n	8007fb2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007f96:	4b4a      	ldr	r3, [pc, #296]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007f98:	68db      	ldr	r3, [r3, #12]
 8007f9a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	6819      	ldr	r1, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	3b01      	subs	r3, #1
 8007fa8:	011b      	lsls	r3, r3, #4
 8007faa:	430b      	orrs	r3, r1
 8007fac:	4944      	ldr	r1, [pc, #272]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007fb2:	7bfb      	ldrb	r3, [r7, #15]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d17d      	bne.n	80080b4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007fb8:	4b41      	ldr	r3, [pc, #260]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a40      	ldr	r2, [pc, #256]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fbe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007fc2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fc4:	f7fd fa3c 	bl	8005440 <HAL_GetTick>
 8007fc8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007fca:	e009      	b.n	8007fe0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007fcc:	f7fd fa38 	bl	8005440 <HAL_GetTick>
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	2b02      	cmp	r3, #2
 8007fd8:	d902      	bls.n	8007fe0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007fda:	2303      	movs	r3, #3
 8007fdc:	73fb      	strb	r3, [r7, #15]
        break;
 8007fde:	e005      	b.n	8007fec <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007fe0:	4b37      	ldr	r3, [pc, #220]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d1ef      	bne.n	8007fcc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d160      	bne.n	80080b4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d111      	bne.n	800801c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ff8:	4b31      	ldr	r3, [pc, #196]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ffa:	691b      	ldr	r3, [r3, #16]
 8007ffc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8008000:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	6892      	ldr	r2, [r2, #8]
 8008008:	0211      	lsls	r1, r2, #8
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	68d2      	ldr	r2, [r2, #12]
 800800e:	0912      	lsrs	r2, r2, #4
 8008010:	0452      	lsls	r2, r2, #17
 8008012:	430a      	orrs	r2, r1
 8008014:	492a      	ldr	r1, [pc, #168]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008016:	4313      	orrs	r3, r2
 8008018:	610b      	str	r3, [r1, #16]
 800801a:	e027      	b.n	800806c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d112      	bne.n	8008048 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008022:	4b27      	ldr	r3, [pc, #156]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008024:	691b      	ldr	r3, [r3, #16]
 8008026:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800802a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800802e:	687a      	ldr	r2, [r7, #4]
 8008030:	6892      	ldr	r2, [r2, #8]
 8008032:	0211      	lsls	r1, r2, #8
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6912      	ldr	r2, [r2, #16]
 8008038:	0852      	lsrs	r2, r2, #1
 800803a:	3a01      	subs	r2, #1
 800803c:	0552      	lsls	r2, r2, #21
 800803e:	430a      	orrs	r2, r1
 8008040:	491f      	ldr	r1, [pc, #124]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008042:	4313      	orrs	r3, r2
 8008044:	610b      	str	r3, [r1, #16]
 8008046:	e011      	b.n	800806c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008048:	4b1d      	ldr	r3, [pc, #116]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800804a:	691b      	ldr	r3, [r3, #16]
 800804c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008050:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	6892      	ldr	r2, [r2, #8]
 8008058:	0211      	lsls	r1, r2, #8
 800805a:	687a      	ldr	r2, [r7, #4]
 800805c:	6952      	ldr	r2, [r2, #20]
 800805e:	0852      	lsrs	r2, r2, #1
 8008060:	3a01      	subs	r2, #1
 8008062:	0652      	lsls	r2, r2, #25
 8008064:	430a      	orrs	r2, r1
 8008066:	4916      	ldr	r1, [pc, #88]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008068:	4313      	orrs	r3, r2
 800806a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800806c:	4b14      	ldr	r3, [pc, #80]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a13      	ldr	r2, [pc, #76]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008076:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008078:	f7fd f9e2 	bl	8005440 <HAL_GetTick>
 800807c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800807e:	e009      	b.n	8008094 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008080:	f7fd f9de 	bl	8005440 <HAL_GetTick>
 8008084:	4602      	mov	r2, r0
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	2b02      	cmp	r3, #2
 800808c:	d902      	bls.n	8008094 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800808e:	2303      	movs	r3, #3
 8008090:	73fb      	strb	r3, [r7, #15]
          break;
 8008092:	e005      	b.n	80080a0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008094:	4b0a      	ldr	r3, [pc, #40]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800809c:	2b00      	cmp	r3, #0
 800809e:	d0ef      	beq.n	8008080 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d106      	bne.n	80080b4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80080a6:	4b06      	ldr	r3, [pc, #24]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080a8:	691a      	ldr	r2, [r3, #16]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	699b      	ldr	r3, [r3, #24]
 80080ae:	4904      	ldr	r1, [pc, #16]	; (80080c0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80080b0:	4313      	orrs	r3, r2
 80080b2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	40021000 	.word	0x40021000

080080c4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b084      	sub	sp, #16
 80080c8:	af00      	add	r7, sp, #0
 80080ca:	6078      	str	r0, [r7, #4]
 80080cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80080ce:	2300      	movs	r3, #0
 80080d0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80080d2:	4b6a      	ldr	r3, [pc, #424]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 80080d4:	68db      	ldr	r3, [r3, #12]
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d018      	beq.n	8008110 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80080de:	4b67      	ldr	r3, [pc, #412]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 80080e0:	68db      	ldr	r3, [r3, #12]
 80080e2:	f003 0203 	and.w	r2, r3, #3
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d10d      	bne.n	800810a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
       ||
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80080f6:	4b61      	ldr	r3, [pc, #388]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	091b      	lsrs	r3, r3, #4
 80080fc:	f003 0307 	and.w	r3, r3, #7
 8008100:	1c5a      	adds	r2, r3, #1
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	685b      	ldr	r3, [r3, #4]
       ||
 8008106:	429a      	cmp	r2, r3
 8008108:	d047      	beq.n	800819a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	73fb      	strb	r3, [r7, #15]
 800810e:	e044      	b.n	800819a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	2b03      	cmp	r3, #3
 8008116:	d018      	beq.n	800814a <RCCEx_PLLSAI2_Config+0x86>
 8008118:	2b03      	cmp	r3, #3
 800811a:	d825      	bhi.n	8008168 <RCCEx_PLLSAI2_Config+0xa4>
 800811c:	2b01      	cmp	r3, #1
 800811e:	d002      	beq.n	8008126 <RCCEx_PLLSAI2_Config+0x62>
 8008120:	2b02      	cmp	r3, #2
 8008122:	d009      	beq.n	8008138 <RCCEx_PLLSAI2_Config+0x74>
 8008124:	e020      	b.n	8008168 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008126:	4b55      	ldr	r3, [pc, #340]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f003 0302 	and.w	r3, r3, #2
 800812e:	2b00      	cmp	r3, #0
 8008130:	d11d      	bne.n	800816e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8008132:	2301      	movs	r3, #1
 8008134:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008136:	e01a      	b.n	800816e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008138:	4b50      	ldr	r3, [pc, #320]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008140:	2b00      	cmp	r3, #0
 8008142:	d116      	bne.n	8008172 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8008144:	2301      	movs	r3, #1
 8008146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008148:	e013      	b.n	8008172 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800814a:	4b4c      	ldr	r3, [pc, #304]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10f      	bne.n	8008176 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008156:	4b49      	ldr	r3, [pc, #292]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800815e:	2b00      	cmp	r3, #0
 8008160:	d109      	bne.n	8008176 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008166:	e006      	b.n	8008176 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	73fb      	strb	r3, [r7, #15]
      break;
 800816c:	e004      	b.n	8008178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800816e:	bf00      	nop
 8008170:	e002      	b.n	8008178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008172:	bf00      	nop
 8008174:	e000      	b.n	8008178 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8008176:	bf00      	nop
    }

    if(status == HAL_OK)
 8008178:	7bfb      	ldrb	r3, [r7, #15]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d10d      	bne.n	800819a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800817e:	4b3f      	ldr	r3, [pc, #252]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008180:	68db      	ldr	r3, [r3, #12]
 8008182:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6819      	ldr	r1, [r3, #0]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	3b01      	subs	r3, #1
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	430b      	orrs	r3, r1
 8008194:	4939      	ldr	r1, [pc, #228]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008196:	4313      	orrs	r3, r2
 8008198:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800819a:	7bfb      	ldrb	r3, [r7, #15]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d167      	bne.n	8008270 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80081a0:	4b36      	ldr	r3, [pc, #216]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a35      	ldr	r2, [pc, #212]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081ac:	f7fd f948 	bl	8005440 <HAL_GetTick>
 80081b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80081b2:	e009      	b.n	80081c8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80081b4:	f7fd f944 	bl	8005440 <HAL_GetTick>
 80081b8:	4602      	mov	r2, r0
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	1ad3      	subs	r3, r2, r3
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d902      	bls.n	80081c8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80081c2:	2303      	movs	r3, #3
 80081c4:	73fb      	strb	r3, [r7, #15]
        break;
 80081c6:	e005      	b.n	80081d4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80081c8:	4b2c      	ldr	r3, [pc, #176]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1ef      	bne.n	80081b4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d14a      	bne.n	8008270 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d111      	bne.n	8008204 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80081e0:	4b26      	ldr	r3, [pc, #152]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081e2:	695b      	ldr	r3, [r3, #20]
 80081e4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80081e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	6892      	ldr	r2, [r2, #8]
 80081f0:	0211      	lsls	r1, r2, #8
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	68d2      	ldr	r2, [r2, #12]
 80081f6:	0912      	lsrs	r2, r2, #4
 80081f8:	0452      	lsls	r2, r2, #17
 80081fa:	430a      	orrs	r2, r1
 80081fc:	491f      	ldr	r1, [pc, #124]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 80081fe:	4313      	orrs	r3, r2
 8008200:	614b      	str	r3, [r1, #20]
 8008202:	e011      	b.n	8008228 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008204:	4b1d      	ldr	r3, [pc, #116]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800820c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008210:	687a      	ldr	r2, [r7, #4]
 8008212:	6892      	ldr	r2, [r2, #8]
 8008214:	0211      	lsls	r1, r2, #8
 8008216:	687a      	ldr	r2, [r7, #4]
 8008218:	6912      	ldr	r2, [r2, #16]
 800821a:	0852      	lsrs	r2, r2, #1
 800821c:	3a01      	subs	r2, #1
 800821e:	0652      	lsls	r2, r2, #25
 8008220:	430a      	orrs	r2, r1
 8008222:	4916      	ldr	r1, [pc, #88]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008224:	4313      	orrs	r3, r2
 8008226:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008228:	4b14      	ldr	r3, [pc, #80]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a13      	ldr	r2, [pc, #76]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 800822e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008232:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008234:	f7fd f904 	bl	8005440 <HAL_GetTick>
 8008238:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800823a:	e009      	b.n	8008250 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800823c:	f7fd f900 	bl	8005440 <HAL_GetTick>
 8008240:	4602      	mov	r2, r0
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	1ad3      	subs	r3, r2, r3
 8008246:	2b02      	cmp	r3, #2
 8008248:	d902      	bls.n	8008250 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	73fb      	strb	r3, [r7, #15]
          break;
 800824e:	e005      	b.n	800825c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008250:	4b0a      	ldr	r3, [pc, #40]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008258:	2b00      	cmp	r3, #0
 800825a:	d0ef      	beq.n	800823c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800825c:	7bfb      	ldrb	r3, [r7, #15]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d106      	bne.n	8008270 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008262:	4b06      	ldr	r3, [pc, #24]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 8008264:	695a      	ldr	r2, [r3, #20]
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	695b      	ldr	r3, [r3, #20]
 800826a:	4904      	ldr	r1, [pc, #16]	; (800827c <RCCEx_PLLSAI2_Config+0x1b8>)
 800826c:	4313      	orrs	r3, r2
 800826e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	40021000 	.word	0x40021000

08008280 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d101      	bne.n	8008292 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	e049      	b.n	8008326 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	795b      	ldrb	r3, [r3, #5]
 8008296:	b2db      	uxtb	r3, r3
 8008298:	2b00      	cmp	r3, #0
 800829a:	d105      	bne.n	80082a8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	2200      	movs	r2, #0
 80082a0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f7fb fadc 	bl	8003860 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	681a      	ldr	r2, [r3, #0]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f042 0204 	orr.w	r2, r2, #4
 80082bc:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082c8:	2b40      	cmp	r3, #64	; 0x40
 80082ca:	d104      	bne.n	80082d6 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2204      	movs	r2, #4
 80082d0:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80082d2:	2301      	movs	r3, #1
 80082d4:	e027      	b.n	8008326 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80082d6:	f7fd f8b3 	bl	8005440 <HAL_GetTick>
 80082da:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80082dc:	e015      	b.n	800830a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80082de:	f7fd f8af 	bl	8005440 <HAL_GetTick>
 80082e2:	4602      	mov	r2, r0
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	2b02      	cmp	r3, #2
 80082ea:	d90e      	bls.n	800830a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	685b      	ldr	r3, [r3, #4]
 80082f2:	f003 0304 	and.w	r3, r3, #4
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d107      	bne.n	800830a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2204      	movs	r2, #4
 80082fe:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2202      	movs	r2, #2
 8008304:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e00d      	b.n	8008326 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b04      	cmp	r3, #4
 8008316:	d0e2      	beq.n	80082de <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3710      	adds	r7, #16
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b084      	sub	sp, #16
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d06c      	beq.n	800841a <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008346:	b2db      	uxtb	r3, r3
 8008348:	2b00      	cmp	r3, #0
 800834a:	d106      	bne.n	800835a <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008354:	6878      	ldr	r0, [r7, #4]
 8008356:	f7fb faa3 	bl	80038a0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2202      	movs	r2, #2
 800835e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	22ca      	movs	r2, #202	; 0xca
 8008368:	625a      	str	r2, [r3, #36]	; 0x24
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	2253      	movs	r2, #83	; 0x53
 8008370:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f9a0 	bl	80086b8 <RTC_EnterInitMode>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	2b00      	cmp	r3, #0
 8008380:	d14b      	bne.n	800841a <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	689b      	ldr	r3, [r3, #8]
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	6812      	ldr	r2, [r2, #0]
 800838c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008390:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008394:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	6899      	ldr	r1, [r3, #8]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	431a      	orrs	r2, r3
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	431a      	orrs	r2, r3
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	687a      	ldr	r2, [r7, #4]
 80083ba:	68d2      	ldr	r2, [r2, #12]
 80083bc:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	6919      	ldr	r1, [r3, #16]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	041a      	lsls	r2, r3, #16
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	430a      	orrs	r2, r1
 80083d0:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f9a4 	bl	8008720 <RTC_ExitInitMode>
 80083d8:	4603      	mov	r3, r0
 80083da:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80083dc:	7bfb      	ldrb	r3, [r7, #15]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d11b      	bne.n	800841a <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f022 0203 	bic.w	r2, r2, #3
 80083f0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	69da      	ldr	r2, [r3, #28]
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	431a      	orrs	r2, r3
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	430a      	orrs	r2, r1
 8008408:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	22ff      	movs	r2, #255	; 0xff
 8008410:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800841a:	7bfb      	ldrb	r3, [r7, #15]
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008424:	b590      	push	{r4, r7, lr}
 8008426:	b087      	sub	sp, #28
 8008428:	af00      	add	r7, sp, #0
 800842a:	60f8      	str	r0, [r7, #12]
 800842c:	60b9      	str	r1, [r7, #8]
 800842e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008436:	2b01      	cmp	r3, #1
 8008438:	d101      	bne.n	800843e <HAL_RTC_SetTime+0x1a>
 800843a:	2302      	movs	r3, #2
 800843c:	e08b      	b.n	8008556 <HAL_RTC_SetTime+0x132>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2201      	movs	r2, #1
 8008442:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	2202      	movs	r2, #2
 800844a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	22ca      	movs	r2, #202	; 0xca
 8008454:	625a      	str	r2, [r3, #36]	; 0x24
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	2253      	movs	r2, #83	; 0x53
 800845c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800845e:	68f8      	ldr	r0, [r7, #12]
 8008460:	f000 f92a 	bl	80086b8 <RTC_EnterInitMode>
 8008464:	4603      	mov	r3, r0
 8008466:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008468:	7cfb      	ldrb	r3, [r7, #19]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d163      	bne.n	8008536 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d126      	bne.n	80084c2 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	689b      	ldr	r3, [r3, #8]
 800847a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d102      	bne.n	8008488 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2200      	movs	r2, #0
 8008486:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	781b      	ldrb	r3, [r3, #0]
 800848c:	4618      	mov	r0, r3
 800848e:	f000 f985 	bl	800879c <RTC_ByteToBcd2>
 8008492:	4603      	mov	r3, r0
 8008494:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	785b      	ldrb	r3, [r3, #1]
 800849a:	4618      	mov	r0, r3
 800849c:	f000 f97e 	bl	800879c <RTC_ByteToBcd2>
 80084a0:	4603      	mov	r3, r0
 80084a2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084a4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	789b      	ldrb	r3, [r3, #2]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f976 	bl	800879c <RTC_ByteToBcd2>
 80084b0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084b2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	78db      	ldrb	r3, [r3, #3]
 80084ba:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084bc:	4313      	orrs	r3, r2
 80084be:	617b      	str	r3, [r7, #20]
 80084c0:	e018      	b.n	80084f4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d102      	bne.n	80084d6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	2200      	movs	r2, #0
 80084d4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	785b      	ldrb	r3, [r3, #1]
 80084e0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084e2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80084e4:	68ba      	ldr	r2, [r7, #8]
 80084e6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80084e8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	78db      	ldrb	r3, [r3, #3]
 80084ee:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80084fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008502:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	689a      	ldr	r2, [r3, #8]
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008512:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	6899      	ldr	r1, [r3, #8]
 800851a:	68bb      	ldr	r3, [r7, #8]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	68bb      	ldr	r3, [r7, #8]
 8008520:	691b      	ldr	r3, [r3, #16]
 8008522:	431a      	orrs	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	430a      	orrs	r2, r1
 800852a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800852c:	68f8      	ldr	r0, [r7, #12]
 800852e:	f000 f8f7 	bl	8008720 <RTC_ExitInitMode>
 8008532:	4603      	mov	r3, r0
 8008534:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	22ff      	movs	r2, #255	; 0xff
 800853c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800853e:	7cfb      	ldrb	r3, [r7, #19]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d103      	bne.n	800854c <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008554:	7cfb      	ldrb	r3, [r7, #19]
}
 8008556:	4618      	mov	r0, r3
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	bd90      	pop	{r4, r7, pc}

0800855e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800855e:	b590      	push	{r4, r7, lr}
 8008560:	b087      	sub	sp, #28
 8008562:	af00      	add	r7, sp, #0
 8008564:	60f8      	str	r0, [r7, #12]
 8008566:	60b9      	str	r1, [r7, #8]
 8008568:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008570:	2b01      	cmp	r3, #1
 8008572:	d101      	bne.n	8008578 <HAL_RTC_SetDate+0x1a>
 8008574:	2302      	movs	r3, #2
 8008576:	e075      	b.n	8008664 <HAL_RTC_SetDate+0x106>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2202      	movs	r2, #2
 8008584:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10e      	bne.n	80085ac <HAL_RTC_SetDate+0x4e>
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	785b      	ldrb	r3, [r3, #1]
 8008592:	f003 0310 	and.w	r3, r3, #16
 8008596:	2b00      	cmp	r3, #0
 8008598:	d008      	beq.n	80085ac <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	785b      	ldrb	r3, [r3, #1]
 800859e:	f023 0310 	bic.w	r3, r3, #16
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	330a      	adds	r3, #10
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d11c      	bne.n	80085ec <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	78db      	ldrb	r3, [r3, #3]
 80085b6:	4618      	mov	r0, r3
 80085b8:	f000 f8f0 	bl	800879c <RTC_ByteToBcd2>
 80085bc:	4603      	mov	r3, r0
 80085be:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	785b      	ldrb	r3, [r3, #1]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f000 f8e9 	bl	800879c <RTC_ByteToBcd2>
 80085ca:	4603      	mov	r3, r0
 80085cc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80085ce:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	789b      	ldrb	r3, [r3, #2]
 80085d4:	4618      	mov	r0, r3
 80085d6:	f000 f8e1 	bl	800879c <RTC_ByteToBcd2>
 80085da:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80085dc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80085e6:	4313      	orrs	r3, r2
 80085e8:	617b      	str	r3, [r7, #20]
 80085ea:	e00e      	b.n	800860a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	78db      	ldrb	r3, [r3, #3]
 80085f0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	785b      	ldrb	r3, [r3, #1]
 80085f6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80085f8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80085fe:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	781b      	ldrb	r3, [r3, #0]
 8008604:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8008606:	4313      	orrs	r3, r2
 8008608:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	22ca      	movs	r2, #202	; 0xca
 8008610:	625a      	str	r2, [r3, #36]	; 0x24
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	2253      	movs	r2, #83	; 0x53
 8008618:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800861a:	68f8      	ldr	r0, [r7, #12]
 800861c:	f000 f84c 	bl	80086b8 <RTC_EnterInitMode>
 8008620:	4603      	mov	r3, r0
 8008622:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8008624:	7cfb      	ldrb	r3, [r7, #19]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10c      	bne.n	8008644 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	697b      	ldr	r3, [r7, #20]
 8008630:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008634:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008638:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800863a:	68f8      	ldr	r0, [r7, #12]
 800863c:	f000 f870 	bl	8008720 <RTC_ExitInitMode>
 8008640:	4603      	mov	r3, r0
 8008642:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	22ff      	movs	r2, #255	; 0xff
 800864a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800864c:	7cfb      	ldrb	r3, [r7, #19]
 800864e:	2b00      	cmp	r3, #0
 8008650:	d103      	bne.n	800865a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	2201      	movs	r2, #1
 8008656:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2200      	movs	r2, #0
 800865e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8008662:	7cfb      	ldrb	r3, [r7, #19]
}
 8008664:	4618      	mov	r0, r3
 8008666:	371c      	adds	r7, #28
 8008668:	46bd      	mov	sp, r7
 800866a:	bd90      	pop	{r4, r7, pc}

0800866c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	68da      	ldr	r2, [r3, #12]
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008682:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008684:	f7fc fedc 	bl	8005440 <HAL_GetTick>
 8008688:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800868a:	e009      	b.n	80086a0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800868c:	f7fc fed8 	bl	8005440 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800869a:	d901      	bls.n	80086a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e007      	b.n	80086b0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	68db      	ldr	r3, [r3, #12]
 80086a6:	f003 0320 	and.w	r3, r3, #32
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d0ee      	beq.n	800868c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d120      	bne.n	8008714 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f04f 32ff 	mov.w	r2, #4294967295
 80086da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80086dc:	f7fc feb0 	bl	8005440 <HAL_GetTick>
 80086e0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80086e2:	e00d      	b.n	8008700 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80086e4:	f7fc feac 	bl	8005440 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086f2:	d905      	bls.n	8008700 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80086f4:	2303      	movs	r3, #3
 80086f6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2203      	movs	r2, #3
 80086fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800870a:	2b00      	cmp	r3, #0
 800870c:	d102      	bne.n	8008714 <RTC_EnterInitMode+0x5c>
 800870e:	7bfb      	ldrb	r3, [r7, #15]
 8008710:	2b03      	cmp	r3, #3
 8008712:	d1e7      	bne.n	80086e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008714:	7bfb      	ldrb	r3, [r7, #15]
}
 8008716:	4618      	mov	r0, r3
 8008718:	3710      	adds	r7, #16
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
	...

08008720 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b084      	sub	sp, #16
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800872c:	4b1a      	ldr	r3, [pc, #104]	; (8008798 <RTC_ExitInitMode+0x78>)
 800872e:	68db      	ldr	r3, [r3, #12]
 8008730:	4a19      	ldr	r2, [pc, #100]	; (8008798 <RTC_ExitInitMode+0x78>)
 8008732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008736:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008738:	4b17      	ldr	r3, [pc, #92]	; (8008798 <RTC_ExitInitMode+0x78>)
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f003 0320 	and.w	r3, r3, #32
 8008740:	2b00      	cmp	r3, #0
 8008742:	d10c      	bne.n	800875e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008744:	6878      	ldr	r0, [r7, #4]
 8008746:	f7ff ff91 	bl	800866c <HAL_RTC_WaitForSynchro>
 800874a:	4603      	mov	r3, r0
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01e      	beq.n	800878e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2203      	movs	r2, #3
 8008754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008758:	2303      	movs	r3, #3
 800875a:	73fb      	strb	r3, [r7, #15]
 800875c:	e017      	b.n	800878e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800875e:	4b0e      	ldr	r3, [pc, #56]	; (8008798 <RTC_ExitInitMode+0x78>)
 8008760:	689b      	ldr	r3, [r3, #8]
 8008762:	4a0d      	ldr	r2, [pc, #52]	; (8008798 <RTC_ExitInitMode+0x78>)
 8008764:	f023 0320 	bic.w	r3, r3, #32
 8008768:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800876a:	6878      	ldr	r0, [r7, #4]
 800876c:	f7ff ff7e 	bl	800866c <HAL_RTC_WaitForSynchro>
 8008770:	4603      	mov	r3, r0
 8008772:	2b00      	cmp	r3, #0
 8008774:	d005      	beq.n	8008782 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2203      	movs	r2, #3
 800877a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800877e:	2303      	movs	r3, #3
 8008780:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008782:	4b05      	ldr	r3, [pc, #20]	; (8008798 <RTC_ExitInitMode+0x78>)
 8008784:	689b      	ldr	r3, [r3, #8]
 8008786:	4a04      	ldr	r2, [pc, #16]	; (8008798 <RTC_ExitInitMode+0x78>)
 8008788:	f043 0320 	orr.w	r3, r3, #32
 800878c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800878e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008790:	4618      	mov	r0, r3
 8008792:	3710      	adds	r7, #16
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	40002800 	.word	0x40002800

0800879c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800879c:	b480      	push	{r7}
 800879e:	b085      	sub	sp, #20
 80087a0:	af00      	add	r7, sp, #0
 80087a2:	4603      	mov	r3, r0
 80087a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80087a6:	2300      	movs	r3, #0
 80087a8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80087ae:	e005      	b.n	80087bc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	3301      	adds	r3, #1
 80087b4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80087b6:	7afb      	ldrb	r3, [r7, #11]
 80087b8:	3b0a      	subs	r3, #10
 80087ba:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80087bc:	7afb      	ldrb	r3, [r7, #11]
 80087be:	2b09      	cmp	r3, #9
 80087c0:	d8f6      	bhi.n	80087b0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	011b      	lsls	r3, r3, #4
 80087c8:	b2da      	uxtb	r2, r3
 80087ca:	7afb      	ldrb	r3, [r7, #11]
 80087cc:	4313      	orrs	r3, r2
 80087ce:	b2db      	uxtb	r3, r3
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	3714      	adds	r7, #20
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	60f8      	str	r0, [r7, #12]
 80087e4:	60b9      	str	r1, [r7, #8]
 80087e6:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d101      	bne.n	80087f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 80087f2:	2302      	movs	r3, #2
 80087f4:	e07f      	b.n	80088f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2201      	movs	r2, #1
 80087fa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2202      	movs	r2, #2
 8008802:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	22ca      	movs	r2, #202	; 0xca
 800880c:	625a      	str	r2, [r3, #36]	; 0x24
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	2253      	movs	r2, #83	; 0x53
 8008814:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	689a      	ldr	r2, [r3, #8]
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008824:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	68db      	ldr	r3, [r3, #12]
 800882c:	b2da      	uxtb	r2, r3
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008836:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008842:	2b00      	cmp	r3, #0
 8008844:	d120      	bne.n	8008888 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8008846:	f7fc fdfb 	bl	8005440 <HAL_GetTick>
 800884a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800884c:	e015      	b.n	800887a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800884e:	f7fc fdf7 	bl	8005440 <HAL_GetTick>
 8008852:	4602      	mov	r2, r0
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	1ad3      	subs	r3, r2, r3
 8008858:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800885c:	d90d      	bls.n	800887a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	22ff      	movs	r2, #255	; 0xff
 8008864:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2203      	movs	r2, #3
 800886a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2200      	movs	r2, #0
 8008872:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8008876:	2303      	movs	r3, #3
 8008878:	e03d      	b.n	80088f6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68db      	ldr	r3, [r3, #12]
 8008880:	f003 0304 	and.w	r3, r3, #4
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0e2      	beq.n	800884e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68ba      	ldr	r2, [r7, #8]
 800888e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	f023 0107 	bic.w	r1, r3, #7
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	687a      	ldr	r2, [r7, #4]
 80088a0:	430a      	orrs	r2, r1
 80088a2:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 80088a4:	4b16      	ldr	r3, [pc, #88]	; (8008900 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a15      	ldr	r2, [pc, #84]	; (8008900 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80088aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088ae:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 80088b0:	4b13      	ldr	r3, [pc, #76]	; (8008900 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	4a12      	ldr	r2, [pc, #72]	; (8008900 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 80088b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088ba:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	689a      	ldr	r2, [r3, #8]
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80088ca:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	689a      	ldr	r2, [r3, #8]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80088da:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	22ff      	movs	r2, #255	; 0xff
 80088e2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3718      	adds	r7, #24
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
 80088fe:	bf00      	nop
 8008900:	40010400 	.word	0x40010400

08008904 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @brief  Handle Wake Up Timer interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 800890c:	4b0f      	ldr	r3, [pc, #60]	; (800894c <HAL_RTCEx_WakeUpTimerIRQHandler+0x48>)
 800890e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008912:	615a      	str	r2, [r3, #20]
  {
    /* Immediately clear flags */
    hrtc->Instance->SCR = RTC_SCR_CWUTF;
#else
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	68db      	ldr	r3, [r3, #12]
 800891a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00b      	beq.n	800893a <HAL_RTCEx_WakeUpTimerIRQHandler+0x36>
  {
    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	68db      	ldr	r3, [r3, #12]
 8008928:	b2da      	uxtb	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008932:	60da      	str	r2, [r3, #12]
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call WakeUpTimerEvent registered Callback */
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7f9 fdd5 	bl	80024e4 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 8008942:	bf00      	nop
 8008944:	3708      	adds	r7, #8
 8008946:	46bd      	mov	sp, r7
 8008948:	bd80      	pop	{r7, pc}
 800894a:	bf00      	nop
 800894c:	40010400 	.word	0x40010400

08008950 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008950:	b580      	push	{r7, lr}
 8008952:	b084      	sub	sp, #16
 8008954:	af00      	add	r7, sp, #0
 8008956:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d101      	bne.n	8008962 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800895e:	2301      	movs	r3, #1
 8008960:	e095      	b.n	8008a8e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008966:	2b00      	cmp	r3, #0
 8008968:	d108      	bne.n	800897c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	685b      	ldr	r3, [r3, #4]
 800896e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008972:	d009      	beq.n	8008988 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	61da      	str	r2, [r3, #28]
 800897a:	e005      	b.n	8008988 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	2200      	movs	r2, #0
 8008980:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2200      	movs	r2, #0
 800898c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008994:	b2db      	uxtb	r3, r3
 8008996:	2b00      	cmp	r3, #0
 8008998:	d106      	bne.n	80089a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f7fa ffb6 	bl	8003914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2202      	movs	r2, #2
 80089ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80089be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	68db      	ldr	r3, [r3, #12]
 80089c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089c8:	d902      	bls.n	80089d0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80089ca:	2300      	movs	r3, #0
 80089cc:	60fb      	str	r3, [r7, #12]
 80089ce:	e002      	b.n	80089d6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80089d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80089d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80089de:	d007      	beq.n	80089f0 <HAL_SPI_Init+0xa0>
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	68db      	ldr	r3, [r3, #12]
 80089e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80089e8:	d002      	beq.n	80089f0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	2200      	movs	r2, #0
 80089ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	689b      	ldr	r3, [r3, #8]
 80089fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008a00:	431a      	orrs	r2, r3
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	f003 0302 	and.w	r3, r3, #2
 8008a0a:	431a      	orrs	r2, r3
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	695b      	ldr	r3, [r3, #20]
 8008a10:	f003 0301 	and.w	r3, r3, #1
 8008a14:	431a      	orrs	r2, r3
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008a1e:	431a      	orrs	r2, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	69db      	ldr	r3, [r3, #28]
 8008a24:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008a28:	431a      	orrs	r2, r3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6a1b      	ldr	r3, [r3, #32]
 8008a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a32:	ea42 0103 	orr.w	r1, r2, r3
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	430a      	orrs	r2, r1
 8008a44:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	699b      	ldr	r3, [r3, #24]
 8008a4a:	0c1b      	lsrs	r3, r3, #16
 8008a4c:	f003 0204 	and.w	r2, r3, #4
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a54:	f003 0310 	and.w	r3, r3, #16
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5e:	f003 0308 	and.w	r3, r3, #8
 8008a62:	431a      	orrs	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008a6c:	ea42 0103 	orr.w	r1, r2, r3
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	430a      	orrs	r2, r1
 8008a7c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2201      	movs	r2, #1
 8008a88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008a8c:	2300      	movs	r3, #0
}
 8008a8e:	4618      	mov	r0, r3
 8008a90:	3710      	adds	r7, #16
 8008a92:	46bd      	mov	sp, r7
 8008a94:	bd80      	pop	{r7, pc}

08008a96 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8008a96:	b580      	push	{r7, lr}
 8008a98:	b082      	sub	sp, #8
 8008a9a:	af00      	add	r7, sp, #0
 8008a9c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d101      	bne.n	8008aa8 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	e01a      	b.n	8008ade <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	2202      	movs	r2, #2
 8008aac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	681a      	ldr	r2, [r3, #0]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008abe:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8008ac0:	6878      	ldr	r0, [r7, #4]
 8008ac2:	f7fa ff6b 	bl	800399c <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_RESET;
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3708      	adds	r7, #8
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b088      	sub	sp, #32
 8008aea:	af02      	add	r7, sp, #8
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	603b      	str	r3, [r7, #0]
 8008af2:	4613      	mov	r3, r2
 8008af4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008af6:	2300      	movs	r3, #0
 8008af8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008b02:	d112      	bne.n	8008b2a <HAL_SPI_Receive+0x44>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d10e      	bne.n	8008b2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2204      	movs	r2, #4
 8008b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8008b14:	88fa      	ldrh	r2, [r7, #6]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	9300      	str	r3, [sp, #0]
 8008b1a:	4613      	mov	r3, r2
 8008b1c:	68ba      	ldr	r2, [r7, #8]
 8008b1e:	68b9      	ldr	r1, [r7, #8]
 8008b20:	68f8      	ldr	r0, [r7, #12]
 8008b22:	f000 f910 	bl	8008d46 <HAL_SPI_TransmitReceive>
 8008b26:	4603      	mov	r3, r0
 8008b28:	e109      	b.n	8008d3e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d101      	bne.n	8008b38 <HAL_SPI_Receive+0x52>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e102      	b.n	8008d3e <HAL_SPI_Receive+0x258>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008b40:	f7fc fc7e 	bl	8005440 <HAL_GetTick>
 8008b44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b01      	cmp	r3, #1
 8008b50:	d002      	beq.n	8008b58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8008b52:	2302      	movs	r3, #2
 8008b54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b56:	e0e9      	b.n	8008d2c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d002      	beq.n	8008b64 <HAL_SPI_Receive+0x7e>
 8008b5e:	88fb      	ldrh	r3, [r7, #6]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d102      	bne.n	8008b6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8008b64:	2301      	movs	r3, #1
 8008b66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8008b68:	e0e0      	b.n	8008d2c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	2204      	movs	r2, #4
 8008b6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	2200      	movs	r2, #0
 8008b76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	88fa      	ldrh	r2, [r7, #6]
 8008b82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	88fa      	ldrh	r2, [r7, #6]
 8008b8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2200      	movs	r2, #0
 8008b98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	2200      	movs	r2, #0
 8008baa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008bb4:	d908      	bls.n	8008bc8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	685a      	ldr	r2, [r3, #4]
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bc4:	605a      	str	r2, [r3, #4]
 8008bc6:	e007      	b.n	8008bd8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	685a      	ldr	r2, [r3, #4]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008bd6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008be0:	d10f      	bne.n	8008c02 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	681a      	ldr	r2, [r3, #0]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008c00:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c0c:	2b40      	cmp	r3, #64	; 0x40
 8008c0e:	d007      	beq.n	8008c20 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c1e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008c28:	d867      	bhi.n	8008cfa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8008c2a:	e030      	b.n	8008c8e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	689b      	ldr	r3, [r3, #8]
 8008c32:	f003 0301 	and.w	r3, r3, #1
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d117      	bne.n	8008c6a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f103 020c 	add.w	r2, r3, #12
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c46:	7812      	ldrb	r2, [r2, #0]
 8008c48:	b2d2      	uxtb	r2, r2
 8008c4a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c50:	1c5a      	adds	r2, r3, #1
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c5c:	b29b      	uxth	r3, r3
 8008c5e:	3b01      	subs	r3, #1
 8008c60:	b29a      	uxth	r2, r3
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008c68:	e011      	b.n	8008c8e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008c6a:	f7fc fbe9 	bl	8005440 <HAL_GetTick>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	683a      	ldr	r2, [r7, #0]
 8008c76:	429a      	cmp	r2, r3
 8008c78:	d803      	bhi.n	8008c82 <HAL_SPI_Receive+0x19c>
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c80:	d102      	bne.n	8008c88 <HAL_SPI_Receive+0x1a2>
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008c8c:	e04e      	b.n	8008d2c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1c8      	bne.n	8008c2c <HAL_SPI_Receive+0x146>
 8008c9a:	e034      	b.n	8008d06 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d115      	bne.n	8008cd6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	68da      	ldr	r2, [r3, #12]
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb4:	b292      	uxth	r2, r2
 8008cb6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cbc:	1c9a      	adds	r2, r3, #2
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008cc8:	b29b      	uxth	r3, r3
 8008cca:	3b01      	subs	r3, #1
 8008ccc:	b29a      	uxth	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8008cd4:	e011      	b.n	8008cfa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008cd6:	f7fc fbb3 	bl	8005440 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d803      	bhi.n	8008cee <HAL_SPI_Receive+0x208>
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cec:	d102      	bne.n	8008cf4 <HAL_SPI_Receive+0x20e>
 8008cee:	683b      	ldr	r3, [r7, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d102      	bne.n	8008cfa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	75fb      	strb	r3, [r7, #23]
          goto error;
 8008cf8:	e018      	b.n	8008d2c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d1ca      	bne.n	8008c9c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008d06:	693a      	ldr	r2, [r7, #16]
 8008d08:	6839      	ldr	r1, [r7, #0]
 8008d0a:	68f8      	ldr	r0, [r7, #12]
 8008d0c:	f001 f802 	bl	8009d14 <SPI_EndRxTransaction>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d002      	beq.n	8008d1c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d002      	beq.n	8008d2a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]
 8008d28:	e000      	b.n	8008d2c <HAL_SPI_Receive+0x246>
  }

error :
 8008d2a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2201      	movs	r2, #1
 8008d30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3718      	adds	r7, #24
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}

08008d46 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8008d46:	b580      	push	{r7, lr}
 8008d48:	b08a      	sub	sp, #40	; 0x28
 8008d4a:	af00      	add	r7, sp, #0
 8008d4c:	60f8      	str	r0, [r7, #12]
 8008d4e:	60b9      	str	r1, [r7, #8]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8008d54:	2301      	movs	r3, #1
 8008d56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8008d58:	2300      	movs	r3, #0
 8008d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d101      	bne.n	8008d6c <HAL_SPI_TransmitReceive+0x26>
 8008d68:	2302      	movs	r3, #2
 8008d6a:	e1fb      	b.n	8009164 <HAL_SPI_TransmitReceive+0x41e>
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008d74:	f7fc fb64 	bl	8005440 <HAL_GetTick>
 8008d78:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d80:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8008d88:	887b      	ldrh	r3, [r7, #2]
 8008d8a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8008d8c:	887b      	ldrh	r3, [r7, #2]
 8008d8e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008d90:	7efb      	ldrb	r3, [r7, #27]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d00e      	beq.n	8008db4 <HAL_SPI_TransmitReceive+0x6e>
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008d9c:	d106      	bne.n	8008dac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d102      	bne.n	8008dac <HAL_SPI_TransmitReceive+0x66>
 8008da6:	7efb      	ldrb	r3, [r7, #27]
 8008da8:	2b04      	cmp	r3, #4
 8008daa:	d003      	beq.n	8008db4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8008dac:	2302      	movs	r3, #2
 8008dae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008db2:	e1cd      	b.n	8009150 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d005      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x80>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d002      	beq.n	8008dc6 <HAL_SPI_TransmitReceive+0x80>
 8008dc0:	887b      	ldrh	r3, [r7, #2]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d103      	bne.n	8008dce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8008dcc:	e1c0      	b.n	8009150 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008dd4:	b2db      	uxtb	r3, r3
 8008dd6:	2b04      	cmp	r3, #4
 8008dd8:	d003      	beq.n	8008de2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	2205      	movs	r2, #5
 8008dde:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2200      	movs	r2, #0
 8008de6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	887a      	ldrh	r2, [r7, #2]
 8008df2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	887a      	ldrh	r2, [r7, #2]
 8008dfa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	887a      	ldrh	r2, [r7, #2]
 8008e08:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	887a      	ldrh	r2, [r7, #2]
 8008e0e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	2200      	movs	r2, #0
 8008e14:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	68db      	ldr	r3, [r3, #12]
 8008e20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e24:	d802      	bhi.n	8008e2c <HAL_SPI_TransmitReceive+0xe6>
 8008e26:	8a3b      	ldrh	r3, [r7, #16]
 8008e28:	2b01      	cmp	r3, #1
 8008e2a:	d908      	bls.n	8008e3e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685a      	ldr	r2, [r3, #4]
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008e3a:	605a      	str	r2, [r3, #4]
 8008e3c:	e007      	b.n	8008e4e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	685a      	ldr	r2, [r3, #4]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008e4c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e58:	2b40      	cmp	r3, #64	; 0x40
 8008e5a:	d007      	beq.n	8008e6c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e6a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	68db      	ldr	r3, [r3, #12]
 8008e70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008e74:	d97c      	bls.n	8008f70 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	685b      	ldr	r3, [r3, #4]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d002      	beq.n	8008e84 <HAL_SPI_TransmitReceive+0x13e>
 8008e7e:	8a7b      	ldrh	r3, [r7, #18]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d169      	bne.n	8008f58 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e88:	881a      	ldrh	r2, [r3, #0]
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e94:	1c9a      	adds	r2, r3, #2
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29a      	uxth	r2, r3
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008ea8:	e056      	b.n	8008f58 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b02      	cmp	r3, #2
 8008eb6:	d11b      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x1aa>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d016      	beq.n	8008ef0 <HAL_SPI_TransmitReceive+0x1aa>
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d113      	bne.n	8008ef0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ecc:	881a      	ldrh	r2, [r3, #0]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ed8:	1c9a      	adds	r2, r3, #2
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ee2:	b29b      	uxth	r3, r3
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	b29a      	uxth	r2, r3
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	689b      	ldr	r3, [r3, #8]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b01      	cmp	r3, #1
 8008efc:	d11c      	bne.n	8008f38 <HAL_SPI_TransmitReceive+0x1f2>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f04:	b29b      	uxth	r3, r3
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d016      	beq.n	8008f38 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68da      	ldr	r2, [r3, #12]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f14:	b292      	uxth	r2, r2
 8008f16:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1c:	1c9a      	adds	r2, r3, #2
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	b29a      	uxth	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008f34:	2301      	movs	r3, #1
 8008f36:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008f38:	f7fc fa82 	bl	8005440 <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	69fb      	ldr	r3, [r7, #28]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d807      	bhi.n	8008f58 <HAL_SPI_TransmitReceive+0x212>
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f4e:	d003      	beq.n	8008f58 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8008f50:	2303      	movs	r3, #3
 8008f52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8008f56:	e0fb      	b.n	8009150 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d1a3      	bne.n	8008eaa <HAL_SPI_TransmitReceive+0x164>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d19d      	bne.n	8008eaa <HAL_SPI_TransmitReceive+0x164>
 8008f6e:	e0df      	b.n	8009130 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <HAL_SPI_TransmitReceive+0x23a>
 8008f78:	8a7b      	ldrh	r3, [r7, #18]
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	f040 80cb 	bne.w	8009116 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008f84:	b29b      	uxth	r3, r3
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d912      	bls.n	8008fb0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f8e:	881a      	ldrh	r2, [r3, #0]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f9a:	1c9a      	adds	r2, r3, #2
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	3b02      	subs	r3, #2
 8008fa8:	b29a      	uxth	r2, r3
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8008fae:	e0b2      	b.n	8009116 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	330c      	adds	r3, #12
 8008fba:	7812      	ldrb	r2, [r2, #0]
 8008fbc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fcc:	b29b      	uxth	r3, r3
 8008fce:	3b01      	subs	r3, #1
 8008fd0:	b29a      	uxth	r2, r3
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008fd6:	e09e      	b.n	8009116 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f003 0302 	and.w	r3, r3, #2
 8008fe2:	2b02      	cmp	r3, #2
 8008fe4:	d134      	bne.n	8009050 <HAL_SPI_TransmitReceive+0x30a>
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d02f      	beq.n	8009050 <HAL_SPI_TransmitReceive+0x30a>
 8008ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff2:	2b01      	cmp	r3, #1
 8008ff4:	d12c      	bne.n	8009050 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d912      	bls.n	8009026 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009004:	881a      	ldrh	r2, [r3, #0]
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009010:	1c9a      	adds	r2, r3, #2
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800901a:	b29b      	uxth	r3, r3
 800901c:	3b02      	subs	r3, #2
 800901e:	b29a      	uxth	r2, r3
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009024:	e012      	b.n	800904c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	330c      	adds	r3, #12
 8009030:	7812      	ldrb	r2, [r2, #0]
 8009032:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009038:	1c5a      	adds	r2, r3, #1
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009042:	b29b      	uxth	r3, r3
 8009044:	3b01      	subs	r3, #1
 8009046:	b29a      	uxth	r2, r3
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f003 0301 	and.w	r3, r3, #1
 800905a:	2b01      	cmp	r3, #1
 800905c:	d148      	bne.n	80090f0 <HAL_SPI_TransmitReceive+0x3aa>
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009064:	b29b      	uxth	r3, r3
 8009066:	2b00      	cmp	r3, #0
 8009068:	d042      	beq.n	80090f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009070:	b29b      	uxth	r3, r3
 8009072:	2b01      	cmp	r3, #1
 8009074:	d923      	bls.n	80090be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	68da      	ldr	r2, [r3, #12]
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009080:	b292      	uxth	r2, r2
 8009082:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009088:	1c9a      	adds	r2, r3, #2
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009094:	b29b      	uxth	r3, r3
 8009096:	3b02      	subs	r3, #2
 8009098:	b29a      	uxth	r2, r3
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d81f      	bhi.n	80090ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80090ba:	605a      	str	r2, [r3, #4]
 80090bc:	e016      	b.n	80090ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	f103 020c 	add.w	r2, r3, #12
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	7812      	ldrb	r2, [r2, #0]
 80090cc:	b2d2      	uxtb	r2, r2
 80090ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	1c5a      	adds	r2, r3, #1
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80090e0:	b29b      	uxth	r3, r3
 80090e2:	3b01      	subs	r3, #1
 80090e4:	b29a      	uxth	r2, r3
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80090ec:	2301      	movs	r3, #1
 80090ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80090f0:	f7fc f9a6 	bl	8005440 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	69fb      	ldr	r3, [r7, #28]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d803      	bhi.n	8009108 <HAL_SPI_TransmitReceive+0x3c2>
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009106:	d102      	bne.n	800910e <HAL_SPI_TransmitReceive+0x3c8>
 8009108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910a:	2b00      	cmp	r3, #0
 800910c:	d103      	bne.n	8009116 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800910e:	2303      	movs	r3, #3
 8009110:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009114:	e01c      	b.n	8009150 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800911a:	b29b      	uxth	r3, r3
 800911c:	2b00      	cmp	r3, #0
 800911e:	f47f af5b 	bne.w	8008fd8 <HAL_SPI_TransmitReceive+0x292>
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009128:	b29b      	uxth	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	f47f af54 	bne.w	8008fd8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009130:	69fa      	ldr	r2, [r7, #28]
 8009132:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fe45 	bl	8009dc4 <SPI_EndRxTxTransaction>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d006      	beq.n	800914e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2220      	movs	r2, #32
 800914a:	661a      	str	r2, [r3, #96]	; 0x60
 800914c:	e000      	b.n	8009150 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800914e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2201      	movs	r2, #1
 8009154:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009160:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009164:	4618      	mov	r0, r3
 8009166:	3728      	adds	r7, #40	; 0x28
 8009168:	46bd      	mov	sp, r7
 800916a:	bd80      	pop	{r7, pc}

0800916c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800916c:	b480      	push	{r7}
 800916e:	b087      	sub	sp, #28
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	4613      	mov	r3, r2
 8009178:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800917a:	2300      	movs	r3, #0
 800917c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009184:	2b01      	cmp	r3, #1
 8009186:	d101      	bne.n	800918c <HAL_SPI_Transmit_IT+0x20>
 8009188:	2302      	movs	r3, #2
 800918a:	e072      	b.n	8009272 <HAL_SPI_Transmit_IT+0x106>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2201      	movs	r2, #1
 8009190:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d002      	beq.n	80091a0 <HAL_SPI_Transmit_IT+0x34>
 800919a:	88fb      	ldrh	r3, [r7, #6]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d102      	bne.n	80091a6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80091a0:	2301      	movs	r3, #1
 80091a2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80091a4:	e060      	b.n	8009268 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80091ac:	b2db      	uxtb	r3, r3
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d002      	beq.n	80091b8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80091b2:	2302      	movs	r3, #2
 80091b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80091b6:	e057      	b.n	8009268 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2203      	movs	r2, #3
 80091bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	68ba      	ldr	r2, [r7, #8]
 80091ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	88fa      	ldrh	r2, [r7, #6]
 80091d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	88fa      	ldrh	r2, [r7, #6]
 80091d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	2200      	movs	r2, #0
 80091e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2200      	movs	r2, #0
 80091f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091fc:	d903      	bls.n	8009206 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	4a1f      	ldr	r2, [pc, #124]	; (8009280 <HAL_SPI_Transmit_IT+0x114>)
 8009202:	651a      	str	r2, [r3, #80]	; 0x50
 8009204:	e002      	b.n	800920c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	4a1e      	ldr	r2, [pc, #120]	; (8009284 <HAL_SPI_Transmit_IT+0x118>)
 800920a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	689b      	ldr	r3, [r3, #8]
 8009210:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009214:	d10f      	bne.n	8009236 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	681a      	ldr	r2, [r3, #0]
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009224:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	681a      	ldr	r2, [r3, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009234:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	685a      	ldr	r2, [r3, #4]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8009244:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009250:	2b40      	cmp	r3, #64	; 0x40
 8009252:	d008      	beq.n	8009266 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009262:	601a      	str	r2, [r3, #0]
 8009264:	e000      	b.n	8009268 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 8009266:	bf00      	nop
  __HAL_UNLOCK(hspi);
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2200      	movs	r2, #0
 800926c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009270:	7dfb      	ldrb	r3, [r7, #23]
}
 8009272:	4618      	mov	r0, r3
 8009274:	371c      	adds	r7, #28
 8009276:	46bd      	mov	sp, r7
 8009278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927c:	4770      	bx	lr
 800927e:	bf00      	nop
 8009280:	08009a93 	.word	0x08009a93
 8009284:	08009a4d 	.word	0x08009a4d

08009288 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	60f8      	str	r0, [r7, #12]
 8009290:	60b9      	str	r1, [r7, #8]
 8009292:	4613      	mov	r3, r2
 8009294:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	689b      	ldr	r3, [r3, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d110      	bne.n	80092c4 <HAL_SPI_Receive_IT+0x3c>
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	685b      	ldr	r3, [r3, #4]
 80092a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80092aa:	d10b      	bne.n	80092c4 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	2204      	movs	r2, #4
 80092b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80092b4:	88fb      	ldrh	r3, [r7, #6]
 80092b6:	68ba      	ldr	r2, [r7, #8]
 80092b8:	68b9      	ldr	r1, [r7, #8]
 80092ba:	68f8      	ldr	r0, [r7, #12]
 80092bc:	f000 f894 	bl	80093e8 <HAL_SPI_TransmitReceive_IT>
 80092c0:	4603      	mov	r3, r0
 80092c2:	e089      	b.n	80093d8 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80092ca:	2b01      	cmp	r3, #1
 80092cc:	d101      	bne.n	80092d2 <HAL_SPI_Receive_IT+0x4a>
 80092ce:	2302      	movs	r3, #2
 80092d0:	e082      	b.n	80093d8 <HAL_SPI_Receive_IT+0x150>
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d002      	beq.n	80092ec <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 80092e6:	2302      	movs	r3, #2
 80092e8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092ea:	e070      	b.n	80093ce <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d002      	beq.n	80092f8 <HAL_SPI_Receive_IT+0x70>
 80092f2:	88fb      	ldrh	r3, [r7, #6]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d102      	bne.n	80092fe <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 80092f8:	2301      	movs	r3, #1
 80092fa:	75fb      	strb	r3, [r7, #23]
    goto error;
 80092fc:	e067      	b.n	80093ce <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	2204      	movs	r2, #4
 8009302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	68ba      	ldr	r2, [r7, #8]
 8009310:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	88fa      	ldrh	r2, [r7, #6]
 8009316:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	88fa      	ldrh	r2, [r7, #6]
 800931e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2200      	movs	r2, #0
 8009326:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	2200      	movs	r2, #0
 800932c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2200      	movs	r2, #0
 8009338:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009342:	d90b      	bls.n	800935c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	685a      	ldr	r2, [r3, #4]
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009352:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4a22      	ldr	r2, [pc, #136]	; (80093e0 <HAL_SPI_Receive_IT+0x158>)
 8009358:	64da      	str	r2, [r3, #76]	; 0x4c
 800935a:	e00a      	b.n	8009372 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800936a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4a1d      	ldr	r2, [pc, #116]	; (80093e4 <HAL_SPI_Receive_IT+0x15c>)
 8009370:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800937a:	d10f      	bne.n	800939c <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	681a      	ldr	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800938a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800939a:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685a      	ldr	r2, [r3, #4]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80093aa:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80093b6:	2b40      	cmp	r3, #64	; 0x40
 80093b8:	d008      	beq.n	80093cc <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093c8:	601a      	str	r2, [r3, #0]
 80093ca:	e000      	b.n	80093ce <HAL_SPI_Receive_IT+0x146>
  }

error :
 80093cc:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3718      	adds	r7, #24
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	08009a01 	.word	0x08009a01
 80093e4:	080099b1 	.word	0x080099b1

080093e8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b087      	sub	sp, #28
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	60f8      	str	r0, [r7, #12]
 80093f0:	60b9      	str	r1, [r7, #8]
 80093f2:	607a      	str	r2, [r7, #4]
 80093f4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80093f6:	2300      	movs	r3, #0
 80093f8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009400:	2b01      	cmp	r3, #1
 8009402:	d101      	bne.n	8009408 <HAL_SPI_TransmitReceive_IT+0x20>
 8009404:	2302      	movs	r3, #2
 8009406:	e091      	b.n	800952c <HAL_SPI_TransmitReceive_IT+0x144>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2201      	movs	r2, #1
 800940c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009416:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	685b      	ldr	r3, [r3, #4]
 800941c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800941e:	7dbb      	ldrb	r3, [r7, #22]
 8009420:	2b01      	cmp	r3, #1
 8009422:	d00d      	beq.n	8009440 <HAL_SPI_TransmitReceive_IT+0x58>
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800942a:	d106      	bne.n	800943a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d102      	bne.n	800943a <HAL_SPI_TransmitReceive_IT+0x52>
 8009434:	7dbb      	ldrb	r3, [r7, #22]
 8009436:	2b04      	cmp	r3, #4
 8009438:	d002      	beq.n	8009440 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800943a:	2302      	movs	r3, #2
 800943c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800943e:	e070      	b.n	8009522 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d005      	beq.n	8009452 <HAL_SPI_TransmitReceive_IT+0x6a>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2b00      	cmp	r3, #0
 800944a:	d002      	beq.n	8009452 <HAL_SPI_TransmitReceive_IT+0x6a>
 800944c:	887b      	ldrh	r3, [r7, #2]
 800944e:	2b00      	cmp	r3, #0
 8009450:	d102      	bne.n	8009458 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009456:	e064      	b.n	8009522 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800945e:	b2db      	uxtb	r3, r3
 8009460:	2b04      	cmp	r3, #4
 8009462:	d003      	beq.n	800946c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	2205      	movs	r2, #5
 8009468:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	2200      	movs	r2, #0
 8009470:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	68ba      	ldr	r2, [r7, #8]
 8009476:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	887a      	ldrh	r2, [r7, #2]
 800947c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	887a      	ldrh	r2, [r7, #2]
 8009482:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	887a      	ldrh	r2, [r7, #2]
 800948e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	887a      	ldrh	r2, [r7, #2]
 8009496:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094a2:	d906      	bls.n	80094b2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	4a24      	ldr	r2, [pc, #144]	; (8009538 <HAL_SPI_TransmitReceive_IT+0x150>)
 80094a8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	4a23      	ldr	r2, [pc, #140]	; (800953c <HAL_SPI_TransmitReceive_IT+0x154>)
 80094ae:	651a      	str	r2, [r3, #80]	; 0x50
 80094b0:	e005      	b.n	80094be <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4a22      	ldr	r2, [pc, #136]	; (8009540 <HAL_SPI_TransmitReceive_IT+0x158>)
 80094b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	4a22      	ldr	r2, [pc, #136]	; (8009544 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80094bc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	68db      	ldr	r3, [r3, #12]
 80094c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80094c6:	d802      	bhi.n	80094ce <HAL_SPI_TransmitReceive_IT+0xe6>
 80094c8:	887b      	ldrh	r3, [r7, #2]
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d908      	bls.n	80094e0 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	685a      	ldr	r2, [r3, #4]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80094dc:	605a      	str	r2, [r3, #4]
 80094de:	e007      	b.n	80094f0 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80094ee:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 80094fe:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950a:	2b40      	cmp	r3, #64	; 0x40
 800950c:	d008      	beq.n	8009520 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	681a      	ldr	r2, [r3, #0]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800951c:	601a      	str	r2, [r3, #0]
 800951e:	e000      	b.n	8009522 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8009520:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	2200      	movs	r2, #0
 8009526:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800952a:	7dfb      	ldrb	r3, [r7, #23]
}
 800952c:	4618      	mov	r0, r3
 800952e:	371c      	adds	r7, #28
 8009530:	46bd      	mov	sp, r7
 8009532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009536:	4770      	bx	lr
 8009538:	080098eb 	.word	0x080098eb
 800953c:	08009951 	.word	0x08009951
 8009540:	0800979b 	.word	0x0800979b
 8009544:	08009859 	.word	0x08009859

08009548 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b088      	sub	sp, #32
 800954c:	af00      	add	r7, sp, #0
 800954e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	689b      	ldr	r3, [r3, #8]
 800955e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009560:	69bb      	ldr	r3, [r7, #24]
 8009562:	099b      	lsrs	r3, r3, #6
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d10f      	bne.n	800958c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00a      	beq.n	800958c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	099b      	lsrs	r3, r3, #6
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d004      	beq.n	800958c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009586:	6878      	ldr	r0, [r7, #4]
 8009588:	4798      	blx	r3
    return;
 800958a:	e0d7      	b.n	800973c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800958c:	69bb      	ldr	r3, [r7, #24]
 800958e:	085b      	lsrs	r3, r3, #1
 8009590:	f003 0301 	and.w	r3, r3, #1
 8009594:	2b00      	cmp	r3, #0
 8009596:	d00a      	beq.n	80095ae <HAL_SPI_IRQHandler+0x66>
 8009598:	69fb      	ldr	r3, [r7, #28]
 800959a:	09db      	lsrs	r3, r3, #7
 800959c:	f003 0301 	and.w	r3, r3, #1
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d004      	beq.n	80095ae <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	4798      	blx	r3
    return;
 80095ac:	e0c6      	b.n	800973c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	095b      	lsrs	r3, r3, #5
 80095b2:	f003 0301 	and.w	r3, r3, #1
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d10c      	bne.n	80095d4 <HAL_SPI_IRQHandler+0x8c>
 80095ba:	69bb      	ldr	r3, [r7, #24]
 80095bc:	099b      	lsrs	r3, r3, #6
 80095be:	f003 0301 	and.w	r3, r3, #1
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d106      	bne.n	80095d4 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80095c6:	69bb      	ldr	r3, [r7, #24]
 80095c8:	0a1b      	lsrs	r3, r3, #8
 80095ca:	f003 0301 	and.w	r3, r3, #1
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	f000 80b4 	beq.w	800973c <HAL_SPI_IRQHandler+0x1f4>
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	095b      	lsrs	r3, r3, #5
 80095d8:	f003 0301 	and.w	r3, r3, #1
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 80ad 	beq.w	800973c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	099b      	lsrs	r3, r3, #6
 80095e6:	f003 0301 	and.w	r3, r3, #1
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d023      	beq.n	8009636 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80095f4:	b2db      	uxtb	r3, r3
 80095f6:	2b03      	cmp	r3, #3
 80095f8:	d011      	beq.n	800961e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095fe:	f043 0204 	orr.w	r2, r3, #4
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009606:	2300      	movs	r3, #0
 8009608:	617b      	str	r3, [r7, #20]
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	68db      	ldr	r3, [r3, #12]
 8009610:	617b      	str	r3, [r7, #20]
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	617b      	str	r3, [r7, #20]
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	e00b      	b.n	8009636 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800961e:	2300      	movs	r3, #0
 8009620:	613b      	str	r3, [r7, #16]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	613b      	str	r3, [r7, #16]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	689b      	ldr	r3, [r3, #8]
 8009630:	613b      	str	r3, [r7, #16]
 8009632:	693b      	ldr	r3, [r7, #16]
        return;
 8009634:	e082      	b.n	800973c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	095b      	lsrs	r3, r3, #5
 800963a:	f003 0301 	and.w	r3, r3, #1
 800963e:	2b00      	cmp	r3, #0
 8009640:	d014      	beq.n	800966c <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009646:	f043 0201 	orr.w	r2, r3, #1
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800964e:	2300      	movs	r3, #0
 8009650:	60fb      	str	r3, [r7, #12]
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	60fb      	str	r3, [r7, #12]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	0a1b      	lsrs	r3, r3, #8
 8009670:	f003 0301 	and.w	r3, r3, #1
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00c      	beq.n	8009692 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800967c:	f043 0208 	orr.w	r2, r3, #8
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009684:	2300      	movs	r3, #0
 8009686:	60bb      	str	r3, [r7, #8]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	60bb      	str	r3, [r7, #8]
 8009690:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009696:	2b00      	cmp	r3, #0
 8009698:	d04f      	beq.n	800973a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	685a      	ldr	r2, [r3, #4]
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80096a8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2201      	movs	r2, #1
 80096ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80096b2:	69fb      	ldr	r3, [r7, #28]
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d104      	bne.n	80096c6 <HAL_SPI_IRQHandler+0x17e>
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	f003 0301 	and.w	r3, r3, #1
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d034      	beq.n	8009730 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	685a      	ldr	r2, [r3, #4]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f022 0203 	bic.w	r2, r2, #3
 80096d4:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d011      	beq.n	8009702 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e2:	4a18      	ldr	r2, [pc, #96]	; (8009744 <HAL_SPI_IRQHandler+0x1fc>)
 80096e4:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ea:	4618      	mov	r0, r3
 80096ec:	f7fc f8f6 	bl	80058dc <HAL_DMA_Abort_IT>
 80096f0:	4603      	mov	r3, r0
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d005      	beq.n	8009702 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80096fa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009706:	2b00      	cmp	r3, #0
 8009708:	d016      	beq.n	8009738 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800970e:	4a0d      	ldr	r2, [pc, #52]	; (8009744 <HAL_SPI_IRQHandler+0x1fc>)
 8009710:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009716:	4618      	mov	r0, r3
 8009718:	f7fc f8e0 	bl	80058dc <HAL_DMA_Abort_IT>
 800971c:	4603      	mov	r3, r0
 800971e:	2b00      	cmp	r3, #0
 8009720:	d00a      	beq.n	8009738 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800972e:	e003      	b.n	8009738 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f813 	bl	800975c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8009736:	e000      	b.n	800973a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8009738:	bf00      	nop
    return;
 800973a:	bf00      	nop
  }
}
 800973c:	3720      	adds	r7, #32
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	08009771 	.word	0x08009771

08009748 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8009750:	bf00      	nop
 8009752:	370c      	adds	r7, #12
 8009754:	46bd      	mov	sp, r7
 8009756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975a:	4770      	bx	lr

0800975c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8009764:	bf00      	nop
 8009766:	370c      	adds	r7, #12
 8009768:	46bd      	mov	sp, r7
 800976a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976e:	4770      	bx	lr

08009770 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800977c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2200      	movs	r2, #0
 8009782:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800978c:	68f8      	ldr	r0, [r7, #12]
 800978e:	f7ff ffe5 	bl	800975c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8009792:	bf00      	nop
 8009794:	3710      	adds	r7, #16
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800979a:	b580      	push	{r7, lr}
 800979c:	b082      	sub	sp, #8
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d923      	bls.n	80097f6 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	68da      	ldr	r2, [r3, #12]
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b8:	b292      	uxth	r2, r2
 80097ba:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c0:	1c9a      	adds	r2, r3, #2
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	3b02      	subs	r3, #2
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80097de:	b29b      	uxth	r3, r3
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d11f      	bne.n	8009824 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	685a      	ldr	r2, [r3, #4]
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80097f2:	605a      	str	r2, [r3, #4]
 80097f4:	e016      	b.n	8009824 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f103 020c 	add.w	r2, r3, #12
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009802:	7812      	ldrb	r2, [r2, #0]
 8009804:	b2d2      	uxtb	r2, r2
 8009806:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800980c:	1c5a      	adds	r2, r3, #1
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009818:	b29b      	uxth	r3, r3
 800981a:	3b01      	subs	r3, #1
 800981c:	b29a      	uxth	r2, r3
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800982a:	b29b      	uxth	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	d10f      	bne.n	8009850 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	685a      	ldr	r2, [r3, #4]
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800983e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009844:	b29b      	uxth	r3, r3
 8009846:	2b00      	cmp	r3, #0
 8009848:	d102      	bne.n	8009850 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fb00 	bl	8009e50 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009850:	bf00      	nop
 8009852:	3708      	adds	r7, #8
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b01      	cmp	r3, #1
 8009868:	d912      	bls.n	8009890 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800986e:	881a      	ldrh	r2, [r3, #0]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800987a:	1c9a      	adds	r2, r3, #2
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009884:	b29b      	uxth	r3, r3
 8009886:	3b02      	subs	r3, #2
 8009888:	b29a      	uxth	r2, r3
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800988e:	e012      	b.n	80098b6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	330c      	adds	r3, #12
 800989a:	7812      	ldrb	r2, [r2, #0]
 800989c:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098a2:	1c5a      	adds	r2, r3, #1
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ac:	b29b      	uxth	r3, r3
 80098ae:	3b01      	subs	r3, #1
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098ba:	b29b      	uxth	r3, r3
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d110      	bne.n	80098e2 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	685a      	ldr	r2, [r3, #4]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098ce:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d102      	bne.n	80098e2 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 fab7 	bl	8009e50 <SPI_CloseRxTx_ISR>
    }
  }
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}

080098ea <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80098ea:	b580      	push	{r7, lr}
 80098ec:	b082      	sub	sp, #8
 80098ee:	af00      	add	r7, sp, #0
 80098f0:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	68da      	ldr	r2, [r3, #12]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098fc:	b292      	uxth	r2, r2
 80098fe:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009904:	1c9a      	adds	r2, r3, #2
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009910:	b29b      	uxth	r3, r3
 8009912:	3b01      	subs	r3, #1
 8009914:	b29a      	uxth	r2, r3
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009922:	b29b      	uxth	r3, r3
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10f      	bne.n	8009948 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	685a      	ldr	r2, [r3, #4]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009936:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800993c:	b29b      	uxth	r3, r3
 800993e:	2b00      	cmp	r3, #0
 8009940:	d102      	bne.n	8009948 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 fa84 	bl	8009e50 <SPI_CloseRxTx_ISR>
    }
  }
}
 8009948:	bf00      	nop
 800994a:	3708      	adds	r7, #8
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b082      	sub	sp, #8
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800995c:	881a      	ldrh	r2, [r3, #0]
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009968:	1c9a      	adds	r2, r3, #2
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009972:	b29b      	uxth	r3, r3
 8009974:	3b01      	subs	r3, #1
 8009976:	b29a      	uxth	r2, r3
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009980:	b29b      	uxth	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d110      	bne.n	80099a8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	685a      	ldr	r2, [r3, #4]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009994:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800999c:	b29b      	uxth	r3, r3
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d102      	bne.n	80099a8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa54 	bl	8009e50 <SPI_CloseRxTx_ISR>
    }
  }
}
 80099a8:	bf00      	nop
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}

080099b0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f103 020c 	add.w	r2, r3, #12
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099c4:	7812      	ldrb	r2, [r2, #0]
 80099c6:	b2d2      	uxtb	r2, r2
 80099c8:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ce:	1c5a      	adds	r2, r3, #1
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099da:	b29b      	uxth	r3, r3
 80099dc:	3b01      	subs	r3, #1
 80099de:	b29a      	uxth	r2, r3
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa6e 	bl	8009ed4 <SPI_CloseRx_ISR>
  }
}
 80099f8:	bf00      	nop
 80099fa:	3708      	adds	r7, #8
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b082      	sub	sp, #8
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	68da      	ldr	r2, [r3, #12]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	b292      	uxth	r2, r2
 8009a14:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a1a:	1c9a      	adds	r2, r3, #2
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a26:	b29b      	uxth	r3, r3
 8009a28:	3b01      	subs	r3, #1
 8009a2a:	b29a      	uxth	r2, r3
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009a38:	b29b      	uxth	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d102      	bne.n	8009a44 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8009a3e:	6878      	ldr	r0, [r7, #4]
 8009a40:	f000 fa48 	bl	8009ed4 <SPI_CloseRx_ISR>
  }
}
 8009a44:	bf00      	nop
 8009a46:	3708      	adds	r7, #8
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	bd80      	pop	{r7, pc}

08009a4c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009a4c:	b580      	push	{r7, lr}
 8009a4e:	b082      	sub	sp, #8
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	330c      	adds	r3, #12
 8009a5e:	7812      	ldrb	r2, [r2, #0]
 8009a60:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a66:	1c5a      	adds	r2, r3, #1
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a70:	b29b      	uxth	r3, r3
 8009a72:	3b01      	subs	r3, #1
 8009a74:	b29a      	uxth	r2, r3
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d102      	bne.n	8009a8a <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fa55 	bl	8009f34 <SPI_CloseTx_ISR>
  }
}
 8009a8a:	bf00      	nop
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}

08009a92 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a9e:	881a      	ldrh	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aaa:	1c9a      	adds	r2, r3, #2
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	3b01      	subs	r3, #1
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac2:	b29b      	uxth	r3, r3
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d102      	bne.n	8009ace <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8009ac8:	6878      	ldr	r0, [r7, #4]
 8009aca:	f000 fa33 	bl	8009f34 <SPI_CloseTx_ISR>
  }
}
 8009ace:	bf00      	nop
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b088      	sub	sp, #32
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	60f8      	str	r0, [r7, #12]
 8009ae0:	60b9      	str	r1, [r7, #8]
 8009ae2:	603b      	str	r3, [r7, #0]
 8009ae4:	4613      	mov	r3, r2
 8009ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009ae8:	f7fb fcaa 	bl	8005440 <HAL_GetTick>
 8009aec:	4602      	mov	r2, r0
 8009aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af0:	1a9b      	subs	r3, r3, r2
 8009af2:	683a      	ldr	r2, [r7, #0]
 8009af4:	4413      	add	r3, r2
 8009af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009af8:	f7fb fca2 	bl	8005440 <HAL_GetTick>
 8009afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8009afe:	4b39      	ldr	r3, [pc, #228]	; (8009be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	015b      	lsls	r3, r3, #5
 8009b04:	0d1b      	lsrs	r3, r3, #20
 8009b06:	69fa      	ldr	r2, [r7, #28]
 8009b08:	fb02 f303 	mul.w	r3, r2, r3
 8009b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009b0e:	e054      	b.n	8009bba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009b10:	683b      	ldr	r3, [r7, #0]
 8009b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b16:	d050      	beq.n	8009bba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009b18:	f7fb fc92 	bl	8005440 <HAL_GetTick>
 8009b1c:	4602      	mov	r2, r0
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	1ad3      	subs	r3, r2, r3
 8009b22:	69fa      	ldr	r2, [r7, #28]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	d902      	bls.n	8009b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8009b28:	69fb      	ldr	r3, [r7, #28]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d13d      	bne.n	8009baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	685a      	ldr	r2, [r3, #4]
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009b46:	d111      	bne.n	8009b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	689b      	ldr	r3, [r3, #8]
 8009b4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b50:	d004      	beq.n	8009b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	689b      	ldr	r3, [r3, #8]
 8009b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b5a:	d107      	bne.n	8009b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	681a      	ldr	r2, [r3, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b74:	d10f      	bne.n	8009b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681a      	ldr	r2, [r3, #0]
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009b84:	601a      	str	r2, [r3, #0]
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	2201      	movs	r2, #1
 8009b9a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ba6:	2303      	movs	r3, #3
 8009ba8:	e017      	b.n	8009bda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009baa:	697b      	ldr	r3, [r7, #20]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d101      	bne.n	8009bb4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009bb0:	2300      	movs	r3, #0
 8009bb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	689a      	ldr	r2, [r3, #8]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	4013      	ands	r3, r2
 8009bc4:	68ba      	ldr	r2, [r7, #8]
 8009bc6:	429a      	cmp	r2, r3
 8009bc8:	bf0c      	ite	eq
 8009bca:	2301      	moveq	r3, #1
 8009bcc:	2300      	movne	r3, #0
 8009bce:	b2db      	uxtb	r3, r3
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	79fb      	ldrb	r3, [r7, #7]
 8009bd4:	429a      	cmp	r2, r3
 8009bd6:	d19b      	bne.n	8009b10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009bd8:	2300      	movs	r3, #0
}
 8009bda:	4618      	mov	r0, r3
 8009bdc:	3720      	adds	r7, #32
 8009bde:	46bd      	mov	sp, r7
 8009be0:	bd80      	pop	{r7, pc}
 8009be2:	bf00      	nop
 8009be4:	20000000 	.word	0x20000000

08009be8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b08a      	sub	sp, #40	; 0x28
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	60f8      	str	r0, [r7, #12]
 8009bf0:	60b9      	str	r1, [r7, #8]
 8009bf2:	607a      	str	r2, [r7, #4]
 8009bf4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8009bf6:	2300      	movs	r3, #0
 8009bf8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8009bfa:	f7fb fc21 	bl	8005440 <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c02:	1a9b      	subs	r3, r3, r2
 8009c04:	683a      	ldr	r2, [r7, #0]
 8009c06:	4413      	add	r3, r2
 8009c08:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8009c0a:	f7fb fc19 	bl	8005440 <HAL_GetTick>
 8009c0e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	330c      	adds	r3, #12
 8009c16:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8009c18:	4b3d      	ldr	r3, [pc, #244]	; (8009d10 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	4613      	mov	r3, r2
 8009c1e:	009b      	lsls	r3, r3, #2
 8009c20:	4413      	add	r3, r2
 8009c22:	00da      	lsls	r2, r3, #3
 8009c24:	1ad3      	subs	r3, r2, r3
 8009c26:	0d1b      	lsrs	r3, r3, #20
 8009c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c2a:	fb02 f303 	mul.w	r3, r2, r3
 8009c2e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8009c30:	e060      	b.n	8009cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009c38:	d107      	bne.n	8009c4a <SPI_WaitFifoStateUntilTimeout+0x62>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d104      	bne.n	8009c4a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8009c40:	69fb      	ldr	r3, [r7, #28]
 8009c42:	781b      	ldrb	r3, [r3, #0]
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8009c48:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d050      	beq.n	8009cf4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009c52:	f7fb fbf5 	bl	8005440 <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	6a3b      	ldr	r3, [r7, #32]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d902      	bls.n	8009c68 <SPI_WaitFifoStateUntilTimeout+0x80>
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d13d      	bne.n	8009ce4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	685a      	ldr	r2, [r3, #4]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c76:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c80:	d111      	bne.n	8009ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	689b      	ldr	r3, [r3, #8]
 8009c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c8a:	d004      	beq.n	8009c96 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c94:	d107      	bne.n	8009ca6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009ca4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cae:	d10f      	bne.n	8009cd0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	681a      	ldr	r2, [r3, #0]
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cbe:	601a      	str	r2, [r3, #0]
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009ce0:	2303      	movs	r3, #3
 8009ce2:	e010      	b.n	8009d06 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8009ce4:	69bb      	ldr	r3, [r7, #24]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d101      	bne.n	8009cee <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8009cea:	2300      	movs	r3, #0
 8009cec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	689a      	ldr	r2, [r3, #8]
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	4013      	ands	r3, r2
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d196      	bne.n	8009c32 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3728      	adds	r7, #40	; 0x28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	20000000 	.word	0x20000000

08009d14 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b086      	sub	sp, #24
 8009d18:	af02      	add	r7, sp, #8
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d28:	d111      	bne.n	8009d4e <SPI_EndRxTransaction+0x3a>
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d32:	d004      	beq.n	8009d3e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	689b      	ldr	r3, [r3, #8]
 8009d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d3c:	d107      	bne.n	8009d4e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d4c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	2200      	movs	r2, #0
 8009d56:	2180      	movs	r1, #128	; 0x80
 8009d58:	68f8      	ldr	r0, [r7, #12]
 8009d5a:	f7ff febd 	bl	8009ad8 <SPI_WaitFlagStateUntilTimeout>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d007      	beq.n	8009d74 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d68:	f043 0220 	orr.w	r2, r3, #32
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009d70:	2303      	movs	r3, #3
 8009d72:	e023      	b.n	8009dbc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	685b      	ldr	r3, [r3, #4]
 8009d78:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d7c:	d11d      	bne.n	8009dba <SPI_EndRxTransaction+0xa6>
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	689b      	ldr	r3, [r3, #8]
 8009d82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d86:	d004      	beq.n	8009d92 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d90:	d113      	bne.n	8009dba <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff ff22 	bl	8009be8 <SPI_WaitFifoStateUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dae:	f043 0220 	orr.w	r2, r3, #32
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e000      	b.n	8009dbc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b086      	sub	sp, #24
 8009dc8:	af02      	add	r7, sp, #8
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	9300      	str	r3, [sp, #0]
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	2200      	movs	r2, #0
 8009dd8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009ddc:	68f8      	ldr	r0, [r7, #12]
 8009dde:	f7ff ff03 	bl	8009be8 <SPI_WaitFifoStateUntilTimeout>
 8009de2:	4603      	mov	r3, r0
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d007      	beq.n	8009df8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dec:	f043 0220 	orr.w	r2, r3, #32
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009df4:	2303      	movs	r3, #3
 8009df6:	e027      	b.n	8009e48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2180      	movs	r1, #128	; 0x80
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f7ff fe68 	bl	8009ad8 <SPI_WaitFlagStateUntilTimeout>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d007      	beq.n	8009e1e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e12:	f043 0220 	orr.w	r2, r3, #32
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	e014      	b.n	8009e48 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009e2a:	68f8      	ldr	r0, [r7, #12]
 8009e2c:	f7ff fedc 	bl	8009be8 <SPI_WaitFifoStateUntilTimeout>
 8009e30:	4603      	mov	r3, r0
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d007      	beq.n	8009e46 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e3a:	f043 0220 	orr.w	r2, r3, #32
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009e42:	2303      	movs	r3, #3
 8009e44:	e000      	b.n	8009e48 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3710      	adds	r7, #16
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009e58:	f7fb faf2 	bl	8005440 <HAL_GetTick>
 8009e5c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	685a      	ldr	r2, [r3, #4]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f022 0220 	bic.w	r2, r2, #32
 8009e6c:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	2164      	movs	r1, #100	; 0x64
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f7ff ffa6 	bl	8009dc4 <SPI_EndRxTxTransaction>
 8009e78:	4603      	mov	r3, r0
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d005      	beq.n	8009e8a <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e82:	f043 0220 	orr.w	r2, r3, #32
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d115      	bne.n	8009ebe <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e98:	b2db      	uxtb	r3, r3
 8009e9a:	2b04      	cmp	r3, #4
 8009e9c:	d107      	bne.n	8009eae <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2201      	movs	r2, #1
 8009ea2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f003 fc6a 	bl	800d780 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009eac:	e00e      	b.n	8009ecc <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2201      	movs	r2, #1
 8009eb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 8009eb6:	6878      	ldr	r0, [r7, #4]
 8009eb8:	f7ff fc46 	bl	8009748 <HAL_SPI_TxRxCpltCallback>
}
 8009ebc:	e006      	b.n	8009ecc <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f7ff fc48 	bl	800975c <HAL_SPI_ErrorCallback>
}
 8009ecc:	bf00      	nop
 8009ece:	3710      	adds	r7, #16
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	bd80      	pop	{r7, pc}

08009ed4 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b082      	sub	sp, #8
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8009eea:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8009eec:	f7fb faa8 	bl	8005440 <HAL_GetTick>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	461a      	mov	r2, r3
 8009ef4:	2164      	movs	r1, #100	; 0x64
 8009ef6:	6878      	ldr	r0, [r7, #4]
 8009ef8:	f7ff ff0c 	bl	8009d14 <SPI_EndRxTransaction>
 8009efc:	4603      	mov	r3, r0
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d005      	beq.n	8009f0e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f06:	f043 0220 	orr.w	r2, r3, #32
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d103      	bne.n	8009f26 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f003 fc2e 	bl	800d780 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8009f24:	e002      	b.n	8009f2c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f7ff fc18 	bl	800975c <HAL_SPI_ErrorCallback>
}
 8009f2c:	bf00      	nop
 8009f2e:	3708      	adds	r7, #8
 8009f30:	46bd      	mov	sp, r7
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009f3c:	f7fb fa80 	bl	8005440 <HAL_GetTick>
 8009f40:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	685a      	ldr	r2, [r3, #4]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009f50:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8009f52:	68fa      	ldr	r2, [r7, #12]
 8009f54:	2164      	movs	r1, #100	; 0x64
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f7ff ff34 	bl	8009dc4 <SPI_EndRxTxTransaction>
 8009f5c:	4603      	mov	r3, r0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d005      	beq.n	8009f6e <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f66:	f043 0220 	orr.w	r2, r3, #32
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009f76:	2300      	movs	r3, #0
 8009f78:	60bb      	str	r3, [r7, #8]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68db      	ldr	r3, [r3, #12]
 8009f80:	60bb      	str	r3, [r7, #8]
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	60bb      	str	r3, [r7, #8]
 8009f8a:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2201      	movs	r2, #1
 8009f90:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d003      	beq.n	8009fa4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fbdd 	bl	800975c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8009fa2:	e002      	b.n	8009faa <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f003 fbff 	bl	800d7a8 <HAL_SPI_TxCpltCallback>
}
 8009faa:	bf00      	nop
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b082      	sub	sp, #8
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d101      	bne.n	8009fc4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009fc0:	2301      	movs	r3, #1
 8009fc2:	e049      	b.n	800a058 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009fca:	b2db      	uxtb	r3, r3
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d106      	bne.n	8009fde <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009fd8:	6878      	ldr	r0, [r7, #4]
 8009fda:	f7f9 fcfd 	bl	80039d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2202      	movs	r2, #2
 8009fe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	3304      	adds	r3, #4
 8009fee:	4619      	mov	r1, r3
 8009ff0:	4610      	mov	r0, r2
 8009ff2:	f000 f9ed 	bl	800a3d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2201      	movs	r2, #1
 800a00a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	2201      	movs	r2, #1
 800a012:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	2201      	movs	r2, #1
 800a02a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2201      	movs	r2, #1
 800a032:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2201      	movs	r2, #1
 800a042:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	2201      	movs	r2, #1
 800a04a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2201      	movs	r2, #1
 800a052:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a056:	2300      	movs	r3, #0
}
 800a058:	4618      	mov	r0, r3
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a060:	b480      	push	{r7}
 800a062:	b085      	sub	sp, #20
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a06e:	b2db      	uxtb	r3, r3
 800a070:	2b01      	cmp	r3, #1
 800a072:	d001      	beq.n	800a078 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a074:	2301      	movs	r3, #1
 800a076:	e04f      	b.n	800a118 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	2202      	movs	r2, #2
 800a07c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	68da      	ldr	r2, [r3, #12]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f042 0201 	orr.w	r2, r2, #1
 800a08e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	4a23      	ldr	r2, [pc, #140]	; (800a124 <HAL_TIM_Base_Start_IT+0xc4>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d01d      	beq.n	800a0d6 <HAL_TIM_Base_Start_IT+0x76>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0a2:	d018      	beq.n	800a0d6 <HAL_TIM_Base_Start_IT+0x76>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	4a1f      	ldr	r2, [pc, #124]	; (800a128 <HAL_TIM_Base_Start_IT+0xc8>)
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d013      	beq.n	800a0d6 <HAL_TIM_Base_Start_IT+0x76>
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	4a1e      	ldr	r2, [pc, #120]	; (800a12c <HAL_TIM_Base_Start_IT+0xcc>)
 800a0b4:	4293      	cmp	r3, r2
 800a0b6:	d00e      	beq.n	800a0d6 <HAL_TIM_Base_Start_IT+0x76>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a1c      	ldr	r2, [pc, #112]	; (800a130 <HAL_TIM_Base_Start_IT+0xd0>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d009      	beq.n	800a0d6 <HAL_TIM_Base_Start_IT+0x76>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	4a1b      	ldr	r2, [pc, #108]	; (800a134 <HAL_TIM_Base_Start_IT+0xd4>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d004      	beq.n	800a0d6 <HAL_TIM_Base_Start_IT+0x76>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	4a19      	ldr	r2, [pc, #100]	; (800a138 <HAL_TIM_Base_Start_IT+0xd8>)
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	d115      	bne.n	800a102 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	4b17      	ldr	r3, [pc, #92]	; (800a13c <HAL_TIM_Base_Start_IT+0xdc>)
 800a0de:	4013      	ands	r3, r2
 800a0e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	2b06      	cmp	r3, #6
 800a0e6:	d015      	beq.n	800a114 <HAL_TIM_Base_Start_IT+0xb4>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ee:	d011      	beq.n	800a114 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f042 0201 	orr.w	r2, r2, #1
 800a0fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a100:	e008      	b.n	800a114 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f042 0201 	orr.w	r2, r2, #1
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	e000      	b.n	800a116 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a114:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a116:	2300      	movs	r3, #0
}
 800a118:	4618      	mov	r0, r3
 800a11a:	3714      	adds	r7, #20
 800a11c:	46bd      	mov	sp, r7
 800a11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a122:	4770      	bx	lr
 800a124:	40012c00 	.word	0x40012c00
 800a128:	40000400 	.word	0x40000400
 800a12c:	40000800 	.word	0x40000800
 800a130:	40000c00 	.word	0x40000c00
 800a134:	40013400 	.word	0x40013400
 800a138:	40014000 	.word	0x40014000
 800a13c:	00010007 	.word	0x00010007

0800a140 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b02      	cmp	r3, #2
 800a154:	d122      	bne.n	800a19c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	68db      	ldr	r3, [r3, #12]
 800a15c:	f003 0302 	and.w	r3, r3, #2
 800a160:	2b02      	cmp	r3, #2
 800a162:	d11b      	bne.n	800a19c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f06f 0202 	mvn.w	r2, #2
 800a16c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2201      	movs	r2, #1
 800a172:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
 800a17a:	f003 0303 	and.w	r3, r3, #3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d003      	beq.n	800a18a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f905 	bl	800a392 <HAL_TIM_IC_CaptureCallback>
 800a188:	e005      	b.n	800a196 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a18a:	6878      	ldr	r0, [r7, #4]
 800a18c:	f000 f8f7 	bl	800a37e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a190:	6878      	ldr	r0, [r7, #4]
 800a192:	f000 f908 	bl	800a3a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	f003 0304 	and.w	r3, r3, #4
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d122      	bne.n	800a1f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f003 0304 	and.w	r3, r3, #4
 800a1b4:	2b04      	cmp	r3, #4
 800a1b6:	d11b      	bne.n	800a1f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f06f 0204 	mvn.w	r2, #4
 800a1c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	2202      	movs	r2, #2
 800a1c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699b      	ldr	r3, [r3, #24]
 800a1ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d003      	beq.n	800a1de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f8db 	bl	800a392 <HAL_TIM_IC_CaptureCallback>
 800a1dc:	e005      	b.n	800a1ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f000 f8cd 	bl	800a37e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1e4:	6878      	ldr	r0, [r7, #4]
 800a1e6:	f000 f8de 	bl	800a3a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	691b      	ldr	r3, [r3, #16]
 800a1f6:	f003 0308 	and.w	r3, r3, #8
 800a1fa:	2b08      	cmp	r3, #8
 800a1fc:	d122      	bne.n	800a244 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	68db      	ldr	r3, [r3, #12]
 800a204:	f003 0308 	and.w	r3, r3, #8
 800a208:	2b08      	cmp	r3, #8
 800a20a:	d11b      	bne.n	800a244 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f06f 0208 	mvn.w	r2, #8
 800a214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2204      	movs	r2, #4
 800a21a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	69db      	ldr	r3, [r3, #28]
 800a222:	f003 0303 	and.w	r3, r3, #3
 800a226:	2b00      	cmp	r3, #0
 800a228:	d003      	beq.n	800a232 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 f8b1 	bl	800a392 <HAL_TIM_IC_CaptureCallback>
 800a230:	e005      	b.n	800a23e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 f8a3 	bl	800a37e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 f8b4 	bl	800a3a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	f003 0310 	and.w	r3, r3, #16
 800a24e:	2b10      	cmp	r3, #16
 800a250:	d122      	bne.n	800a298 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	f003 0310 	and.w	r3, r3, #16
 800a25c:	2b10      	cmp	r3, #16
 800a25e:	d11b      	bne.n	800a298 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f06f 0210 	mvn.w	r2, #16
 800a268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	2208      	movs	r2, #8
 800a26e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	69db      	ldr	r3, [r3, #28]
 800a276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d003      	beq.n	800a286 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f000 f887 	bl	800a392 <HAL_TIM_IC_CaptureCallback>
 800a284:	e005      	b.n	800a292 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a286:	6878      	ldr	r0, [r7, #4]
 800a288:	f000 f879 	bl	800a37e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f000 f88a 	bl	800a3a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2200      	movs	r2, #0
 800a296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	691b      	ldr	r3, [r3, #16]
 800a29e:	f003 0301 	and.w	r3, r3, #1
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d10e      	bne.n	800a2c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	68db      	ldr	r3, [r3, #12]
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d107      	bne.n	800a2c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f06f 0201 	mvn.w	r2, #1
 800a2bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a2be:	6878      	ldr	r0, [r7, #4]
 800a2c0:	f7f8 f920 	bl	8002504 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	691b      	ldr	r3, [r3, #16]
 800a2ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2ce:	2b80      	cmp	r3, #128	; 0x80
 800a2d0:	d10e      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2dc:	2b80      	cmp	r3, #128	; 0x80
 800a2de:	d107      	bne.n	800a2f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a2e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f99c 	bl	800a628 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2fe:	d10e      	bne.n	800a31e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a30a:	2b80      	cmp	r3, #128	; 0x80
 800a30c:	d107      	bne.n	800a31e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a316:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f98f 	bl	800a63c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a328:	2b40      	cmp	r3, #64	; 0x40
 800a32a:	d10e      	bne.n	800a34a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	68db      	ldr	r3, [r3, #12]
 800a332:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a336:	2b40      	cmp	r3, #64	; 0x40
 800a338:	d107      	bne.n	800a34a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a342:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f838 	bl	800a3ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	691b      	ldr	r3, [r3, #16]
 800a350:	f003 0320 	and.w	r3, r3, #32
 800a354:	2b20      	cmp	r3, #32
 800a356:	d10e      	bne.n	800a376 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	68db      	ldr	r3, [r3, #12]
 800a35e:	f003 0320 	and.w	r3, r3, #32
 800a362:	2b20      	cmp	r3, #32
 800a364:	d107      	bne.n	800a376 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f06f 0220 	mvn.w	r2, #32
 800a36e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a370:	6878      	ldr	r0, [r7, #4]
 800a372:	f000 f94f 	bl	800a614 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a376:	bf00      	nop
 800a378:	3708      	adds	r7, #8
 800a37a:	46bd      	mov	sp, r7
 800a37c:	bd80      	pop	{r7, pc}

0800a37e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a37e:	b480      	push	{r7}
 800a380:	b083      	sub	sp, #12
 800a382:	af00      	add	r7, sp, #0
 800a384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a386:	bf00      	nop
 800a388:	370c      	adds	r7, #12
 800a38a:	46bd      	mov	sp, r7
 800a38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a390:	4770      	bx	lr

0800a392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a392:	b480      	push	{r7}
 800a394:	b083      	sub	sp, #12
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr

0800a3a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a3a6:	b480      	push	{r7}
 800a3a8:	b083      	sub	sp, #12
 800a3aa:	af00      	add	r7, sp, #0
 800a3ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a3ae:	bf00      	nop
 800a3b0:	370c      	adds	r7, #12
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b8:	4770      	bx	lr

0800a3ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3ba:	b480      	push	{r7}
 800a3bc:	b083      	sub	sp, #12
 800a3be:	af00      	add	r7, sp, #0
 800a3c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3c2:	bf00      	nop
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr
	...

0800a3d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a40      	ldr	r2, [pc, #256]	; (800a4e4 <TIM_Base_SetConfig+0x114>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d013      	beq.n	800a410 <TIM_Base_SetConfig+0x40>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3ee:	d00f      	beq.n	800a410 <TIM_Base_SetConfig+0x40>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a3d      	ldr	r2, [pc, #244]	; (800a4e8 <TIM_Base_SetConfig+0x118>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d00b      	beq.n	800a410 <TIM_Base_SetConfig+0x40>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a3c      	ldr	r2, [pc, #240]	; (800a4ec <TIM_Base_SetConfig+0x11c>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d007      	beq.n	800a410 <TIM_Base_SetConfig+0x40>
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	4a3b      	ldr	r2, [pc, #236]	; (800a4f0 <TIM_Base_SetConfig+0x120>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d003      	beq.n	800a410 <TIM_Base_SetConfig+0x40>
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a3a      	ldr	r2, [pc, #232]	; (800a4f4 <TIM_Base_SetConfig+0x124>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d108      	bne.n	800a422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	685b      	ldr	r3, [r3, #4]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	4313      	orrs	r3, r2
 800a420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a2f      	ldr	r2, [pc, #188]	; (800a4e4 <TIM_Base_SetConfig+0x114>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d01f      	beq.n	800a46a <TIM_Base_SetConfig+0x9a>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a430:	d01b      	beq.n	800a46a <TIM_Base_SetConfig+0x9a>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a2c      	ldr	r2, [pc, #176]	; (800a4e8 <TIM_Base_SetConfig+0x118>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d017      	beq.n	800a46a <TIM_Base_SetConfig+0x9a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a2b      	ldr	r2, [pc, #172]	; (800a4ec <TIM_Base_SetConfig+0x11c>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d013      	beq.n	800a46a <TIM_Base_SetConfig+0x9a>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a2a      	ldr	r2, [pc, #168]	; (800a4f0 <TIM_Base_SetConfig+0x120>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d00f      	beq.n	800a46a <TIM_Base_SetConfig+0x9a>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a29      	ldr	r2, [pc, #164]	; (800a4f4 <TIM_Base_SetConfig+0x124>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d00b      	beq.n	800a46a <TIM_Base_SetConfig+0x9a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a28      	ldr	r2, [pc, #160]	; (800a4f8 <TIM_Base_SetConfig+0x128>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d007      	beq.n	800a46a <TIM_Base_SetConfig+0x9a>
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a27      	ldr	r2, [pc, #156]	; (800a4fc <TIM_Base_SetConfig+0x12c>)
 800a45e:	4293      	cmp	r3, r2
 800a460:	d003      	beq.n	800a46a <TIM_Base_SetConfig+0x9a>
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	4a26      	ldr	r2, [pc, #152]	; (800a500 <TIM_Base_SetConfig+0x130>)
 800a466:	4293      	cmp	r3, r2
 800a468:	d108      	bne.n	800a47c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	68db      	ldr	r3, [r3, #12]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	4313      	orrs	r3, r2
 800a47a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	4313      	orrs	r3, r2
 800a488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	68fa      	ldr	r2, [r7, #12]
 800a48e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	689a      	ldr	r2, [r3, #8]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a498:	683b      	ldr	r3, [r7, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a10      	ldr	r2, [pc, #64]	; (800a4e4 <TIM_Base_SetConfig+0x114>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d00f      	beq.n	800a4c8 <TIM_Base_SetConfig+0xf8>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a12      	ldr	r2, [pc, #72]	; (800a4f4 <TIM_Base_SetConfig+0x124>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d00b      	beq.n	800a4c8 <TIM_Base_SetConfig+0xf8>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a11      	ldr	r2, [pc, #68]	; (800a4f8 <TIM_Base_SetConfig+0x128>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d007      	beq.n	800a4c8 <TIM_Base_SetConfig+0xf8>
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	4a10      	ldr	r2, [pc, #64]	; (800a4fc <TIM_Base_SetConfig+0x12c>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d003      	beq.n	800a4c8 <TIM_Base_SetConfig+0xf8>
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	4a0f      	ldr	r2, [pc, #60]	; (800a500 <TIM_Base_SetConfig+0x130>)
 800a4c4:	4293      	cmp	r3, r2
 800a4c6:	d103      	bne.n	800a4d0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	691a      	ldr	r2, [r3, #16]
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2201      	movs	r2, #1
 800a4d4:	615a      	str	r2, [r3, #20]
}
 800a4d6:	bf00      	nop
 800a4d8:	3714      	adds	r7, #20
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e0:	4770      	bx	lr
 800a4e2:	bf00      	nop
 800a4e4:	40012c00 	.word	0x40012c00
 800a4e8:	40000400 	.word	0x40000400
 800a4ec:	40000800 	.word	0x40000800
 800a4f0:	40000c00 	.word	0x40000c00
 800a4f4:	40013400 	.word	0x40013400
 800a4f8:	40014000 	.word	0x40014000
 800a4fc:	40014400 	.word	0x40014400
 800a500:	40014800 	.word	0x40014800

0800a504 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a514:	2b01      	cmp	r3, #1
 800a516:	d101      	bne.n	800a51c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a518:	2302      	movs	r3, #2
 800a51a:	e068      	b.n	800a5ee <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	2201      	movs	r2, #1
 800a520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	2202      	movs	r2, #2
 800a528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	685b      	ldr	r3, [r3, #4]
 800a532:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	689b      	ldr	r3, [r3, #8]
 800a53a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	4a2e      	ldr	r2, [pc, #184]	; (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d004      	beq.n	800a550 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	4a2d      	ldr	r2, [pc, #180]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d108      	bne.n	800a562 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a556:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a558:	683b      	ldr	r3, [r7, #0]
 800a55a:	685b      	ldr	r3, [r3, #4]
 800a55c:	68fa      	ldr	r2, [r7, #12]
 800a55e:	4313      	orrs	r3, r2
 800a560:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a568:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	68fa      	ldr	r2, [r7, #12]
 800a570:	4313      	orrs	r3, r2
 800a572:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	68fa      	ldr	r2, [r7, #12]
 800a57a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a1e      	ldr	r2, [pc, #120]	; (800a5fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d01d      	beq.n	800a5c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a58e:	d018      	beq.n	800a5c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a1b      	ldr	r2, [pc, #108]	; (800a604 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d013      	beq.n	800a5c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	4a1a      	ldr	r2, [pc, #104]	; (800a608 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a5a0:	4293      	cmp	r3, r2
 800a5a2:	d00e      	beq.n	800a5c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	4a18      	ldr	r2, [pc, #96]	; (800a60c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a5aa:	4293      	cmp	r3, r2
 800a5ac:	d009      	beq.n	800a5c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a13      	ldr	r2, [pc, #76]	; (800a600 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a5b4:	4293      	cmp	r3, r2
 800a5b6:	d004      	beq.n	800a5c2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	4a14      	ldr	r2, [pc, #80]	; (800a610 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d10c      	bne.n	800a5dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a5c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	689b      	ldr	r3, [r3, #8]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	4313      	orrs	r3, r2
 800a5d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	68ba      	ldr	r2, [r7, #8]
 800a5da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2201      	movs	r2, #1
 800a5e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3714      	adds	r7, #20
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f8:	4770      	bx	lr
 800a5fa:	bf00      	nop
 800a5fc:	40012c00 	.word	0x40012c00
 800a600:	40013400 	.word	0x40013400
 800a604:	40000400 	.word	0x40000400
 800a608:	40000800 	.word	0x40000800
 800a60c:	40000c00 	.word	0x40000c00
 800a610:	40014000 	.word	0x40014000

0800a614 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a614:	b480      	push	{r7}
 800a616:	b083      	sub	sp, #12
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a61c:	bf00      	nop
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a630:	bf00      	nop
 800a632:	370c      	adds	r7, #12
 800a634:	46bd      	mov	sp, r7
 800a636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63a:	4770      	bx	lr

0800a63c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a63c:	b480      	push	{r7}
 800a63e:	b083      	sub	sp, #12
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a644:	bf00      	nop
 800a646:	370c      	adds	r7, #12
 800a648:	46bd      	mov	sp, r7
 800a64a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64e:	4770      	bx	lr

0800a650 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d101      	bne.n	800a662 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a65e:	2301      	movs	r3, #1
 800a660:	e040      	b.n	800a6e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a666:	2b00      	cmp	r3, #0
 800a668:	d106      	bne.n	800a678 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	2200      	movs	r2, #0
 800a66e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a672:	6878      	ldr	r0, [r7, #4]
 800a674:	f7f9 f9d6 	bl	8003a24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2224      	movs	r2, #36	; 0x24
 800a67c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	681a      	ldr	r2, [r3, #0]
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f022 0201 	bic.w	r2, r2, #1
 800a68c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	f000 f8c0 	bl	800a814 <UART_SetConfig>
 800a694:	4603      	mov	r3, r0
 800a696:	2b01      	cmp	r3, #1
 800a698:	d101      	bne.n	800a69e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e022      	b.n	800a6e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d002      	beq.n	800a6ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f000 fb6c 	bl	800ad84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	685a      	ldr	r2, [r3, #4]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a6ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689a      	ldr	r2, [r3, #8]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a6ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	681a      	ldr	r2, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f042 0201 	orr.w	r2, r2, #1
 800a6da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a6dc:	6878      	ldr	r0, [r7, #4]
 800a6de:	f000 fbf3 	bl	800aec8 <UART_CheckIdleState>
 800a6e2:	4603      	mov	r3, r0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b08a      	sub	sp, #40	; 0x28
 800a6f0:	af02      	add	r7, sp, #8
 800a6f2:	60f8      	str	r0, [r7, #12]
 800a6f4:	60b9      	str	r1, [r7, #8]
 800a6f6:	603b      	str	r3, [r7, #0]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a700:	2b20      	cmp	r3, #32
 800a702:	f040 8082 	bne.w	800a80a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d002      	beq.n	800a712 <HAL_UART_Transmit+0x26>
 800a70c:	88fb      	ldrh	r3, [r7, #6]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d101      	bne.n	800a716 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a712:	2301      	movs	r3, #1
 800a714:	e07a      	b.n	800a80c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a71c:	2b01      	cmp	r3, #1
 800a71e:	d101      	bne.n	800a724 <HAL_UART_Transmit+0x38>
 800a720:	2302      	movs	r3, #2
 800a722:	e073      	b.n	800a80c <HAL_UART_Transmit+0x120>
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	2200      	movs	r2, #0
 800a730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	2221      	movs	r2, #33	; 0x21
 800a738:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a73a:	f7fa fe81 	bl	8005440 <HAL_GetTick>
 800a73e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	88fa      	ldrh	r2, [r7, #6]
 800a744:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	88fa      	ldrh	r2, [r7, #6]
 800a74c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a758:	d108      	bne.n	800a76c <HAL_UART_Transmit+0x80>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	691b      	ldr	r3, [r3, #16]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d104      	bne.n	800a76c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a762:	2300      	movs	r3, #0
 800a764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	61bb      	str	r3, [r7, #24]
 800a76a:	e003      	b.n	800a774 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a770:	2300      	movs	r3, #0
 800a772:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a77c:	e02d      	b.n	800a7da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	9300      	str	r3, [sp, #0]
 800a782:	697b      	ldr	r3, [r7, #20]
 800a784:	2200      	movs	r2, #0
 800a786:	2180      	movs	r1, #128	; 0x80
 800a788:	68f8      	ldr	r0, [r7, #12]
 800a78a:	f000 fbe6 	bl	800af5a <UART_WaitOnFlagUntilTimeout>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a794:	2303      	movs	r3, #3
 800a796:	e039      	b.n	800a80c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a798:	69fb      	ldr	r3, [r7, #28]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d10b      	bne.n	800a7b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	881a      	ldrh	r2, [r3, #0]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a7aa:	b292      	uxth	r2, r2
 800a7ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a7ae:	69bb      	ldr	r3, [r7, #24]
 800a7b0:	3302      	adds	r3, #2
 800a7b2:	61bb      	str	r3, [r7, #24]
 800a7b4:	e008      	b.n	800a7c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a7b6:	69fb      	ldr	r3, [r7, #28]
 800a7b8:	781a      	ldrb	r2, [r3, #0]
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	b292      	uxth	r2, r2
 800a7c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	3b01      	subs	r3, #1
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a7e0:	b29b      	uxth	r3, r3
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d1cb      	bne.n	800a77e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	9300      	str	r3, [sp, #0]
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	2140      	movs	r1, #64	; 0x40
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f000 fbb2 	bl	800af5a <UART_WaitOnFlagUntilTimeout>
 800a7f6:	4603      	mov	r3, r0
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d001      	beq.n	800a800 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a7fc:	2303      	movs	r3, #3
 800a7fe:	e005      	b.n	800a80c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2220      	movs	r2, #32
 800a804:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a806:	2300      	movs	r3, #0
 800a808:	e000      	b.n	800a80c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a80a:	2302      	movs	r3, #2
  }
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3720      	adds	r7, #32
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}

0800a814 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a814:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a818:	b08a      	sub	sp, #40	; 0x28
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a81e:	2300      	movs	r3, #0
 800a820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	689a      	ldr	r2, [r3, #8]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	691b      	ldr	r3, [r3, #16]
 800a82c:	431a      	orrs	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	695b      	ldr	r3, [r3, #20]
 800a832:	431a      	orrs	r2, r3
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	4313      	orrs	r3, r2
 800a83a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	681a      	ldr	r2, [r3, #0]
 800a842:	4ba4      	ldr	r3, [pc, #656]	; (800aad4 <UART_SetConfig+0x2c0>)
 800a844:	4013      	ands	r3, r2
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	6812      	ldr	r2, [r2, #0]
 800a84a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a84c:	430b      	orrs	r3, r1
 800a84e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	68da      	ldr	r2, [r3, #12]
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	430a      	orrs	r2, r1
 800a864:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	699b      	ldr	r3, [r3, #24]
 800a86a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	4a99      	ldr	r2, [pc, #612]	; (800aad8 <UART_SetConfig+0x2c4>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d004      	beq.n	800a880 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	6a1b      	ldr	r3, [r3, #32]
 800a87a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a87c:	4313      	orrs	r3, r2
 800a87e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	689b      	ldr	r3, [r3, #8]
 800a886:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a890:	430a      	orrs	r2, r1
 800a892:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	4a90      	ldr	r2, [pc, #576]	; (800aadc <UART_SetConfig+0x2c8>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d126      	bne.n	800a8ec <UART_SetConfig+0xd8>
 800a89e:	4b90      	ldr	r3, [pc, #576]	; (800aae0 <UART_SetConfig+0x2cc>)
 800a8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8a4:	f003 0303 	and.w	r3, r3, #3
 800a8a8:	2b03      	cmp	r3, #3
 800a8aa:	d81b      	bhi.n	800a8e4 <UART_SetConfig+0xd0>
 800a8ac:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <UART_SetConfig+0xa0>)
 800a8ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b2:	bf00      	nop
 800a8b4:	0800a8c5 	.word	0x0800a8c5
 800a8b8:	0800a8d5 	.word	0x0800a8d5
 800a8bc:	0800a8cd 	.word	0x0800a8cd
 800a8c0:	0800a8dd 	.word	0x0800a8dd
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8ca:	e116      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a8cc:	2302      	movs	r3, #2
 800a8ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8d2:	e112      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a8d4:	2304      	movs	r3, #4
 800a8d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8da:	e10e      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a8dc:	2308      	movs	r3, #8
 800a8de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8e2:	e10a      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a8e4:	2310      	movs	r3, #16
 800a8e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a8ea:	e106      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	4a7c      	ldr	r2, [pc, #496]	; (800aae4 <UART_SetConfig+0x2d0>)
 800a8f2:	4293      	cmp	r3, r2
 800a8f4:	d138      	bne.n	800a968 <UART_SetConfig+0x154>
 800a8f6:	4b7a      	ldr	r3, [pc, #488]	; (800aae0 <UART_SetConfig+0x2cc>)
 800a8f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a8fc:	f003 030c 	and.w	r3, r3, #12
 800a900:	2b0c      	cmp	r3, #12
 800a902:	d82d      	bhi.n	800a960 <UART_SetConfig+0x14c>
 800a904:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <UART_SetConfig+0xf8>)
 800a906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90a:	bf00      	nop
 800a90c:	0800a941 	.word	0x0800a941
 800a910:	0800a961 	.word	0x0800a961
 800a914:	0800a961 	.word	0x0800a961
 800a918:	0800a961 	.word	0x0800a961
 800a91c:	0800a951 	.word	0x0800a951
 800a920:	0800a961 	.word	0x0800a961
 800a924:	0800a961 	.word	0x0800a961
 800a928:	0800a961 	.word	0x0800a961
 800a92c:	0800a949 	.word	0x0800a949
 800a930:	0800a961 	.word	0x0800a961
 800a934:	0800a961 	.word	0x0800a961
 800a938:	0800a961 	.word	0x0800a961
 800a93c:	0800a959 	.word	0x0800a959
 800a940:	2300      	movs	r3, #0
 800a942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a946:	e0d8      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a948:	2302      	movs	r3, #2
 800a94a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a94e:	e0d4      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a950:	2304      	movs	r3, #4
 800a952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a956:	e0d0      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a958:	2308      	movs	r3, #8
 800a95a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a95e:	e0cc      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a960:	2310      	movs	r3, #16
 800a962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a966:	e0c8      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	4a5e      	ldr	r2, [pc, #376]	; (800aae8 <UART_SetConfig+0x2d4>)
 800a96e:	4293      	cmp	r3, r2
 800a970:	d125      	bne.n	800a9be <UART_SetConfig+0x1aa>
 800a972:	4b5b      	ldr	r3, [pc, #364]	; (800aae0 <UART_SetConfig+0x2cc>)
 800a974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a978:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a97c:	2b30      	cmp	r3, #48	; 0x30
 800a97e:	d016      	beq.n	800a9ae <UART_SetConfig+0x19a>
 800a980:	2b30      	cmp	r3, #48	; 0x30
 800a982:	d818      	bhi.n	800a9b6 <UART_SetConfig+0x1a2>
 800a984:	2b20      	cmp	r3, #32
 800a986:	d00a      	beq.n	800a99e <UART_SetConfig+0x18a>
 800a988:	2b20      	cmp	r3, #32
 800a98a:	d814      	bhi.n	800a9b6 <UART_SetConfig+0x1a2>
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d002      	beq.n	800a996 <UART_SetConfig+0x182>
 800a990:	2b10      	cmp	r3, #16
 800a992:	d008      	beq.n	800a9a6 <UART_SetConfig+0x192>
 800a994:	e00f      	b.n	800a9b6 <UART_SetConfig+0x1a2>
 800a996:	2300      	movs	r3, #0
 800a998:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a99c:	e0ad      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a99e:	2302      	movs	r3, #2
 800a9a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9a4:	e0a9      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a9a6:	2304      	movs	r3, #4
 800a9a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9ac:	e0a5      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a9ae:	2308      	movs	r3, #8
 800a9b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9b4:	e0a1      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a9b6:	2310      	movs	r3, #16
 800a9b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9bc:	e09d      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	4a4a      	ldr	r2, [pc, #296]	; (800aaec <UART_SetConfig+0x2d8>)
 800a9c4:	4293      	cmp	r3, r2
 800a9c6:	d125      	bne.n	800aa14 <UART_SetConfig+0x200>
 800a9c8:	4b45      	ldr	r3, [pc, #276]	; (800aae0 <UART_SetConfig+0x2cc>)
 800a9ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a9ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a9d2:	2bc0      	cmp	r3, #192	; 0xc0
 800a9d4:	d016      	beq.n	800aa04 <UART_SetConfig+0x1f0>
 800a9d6:	2bc0      	cmp	r3, #192	; 0xc0
 800a9d8:	d818      	bhi.n	800aa0c <UART_SetConfig+0x1f8>
 800a9da:	2b80      	cmp	r3, #128	; 0x80
 800a9dc:	d00a      	beq.n	800a9f4 <UART_SetConfig+0x1e0>
 800a9de:	2b80      	cmp	r3, #128	; 0x80
 800a9e0:	d814      	bhi.n	800aa0c <UART_SetConfig+0x1f8>
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d002      	beq.n	800a9ec <UART_SetConfig+0x1d8>
 800a9e6:	2b40      	cmp	r3, #64	; 0x40
 800a9e8:	d008      	beq.n	800a9fc <UART_SetConfig+0x1e8>
 800a9ea:	e00f      	b.n	800aa0c <UART_SetConfig+0x1f8>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9f2:	e082      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a9f4:	2302      	movs	r3, #2
 800a9f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a9fa:	e07e      	b.n	800aafa <UART_SetConfig+0x2e6>
 800a9fc:	2304      	movs	r3, #4
 800a9fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa02:	e07a      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aa04:	2308      	movs	r3, #8
 800aa06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa0a:	e076      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aa0c:	2310      	movs	r3, #16
 800aa0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa12:	e072      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	4a35      	ldr	r2, [pc, #212]	; (800aaf0 <UART_SetConfig+0x2dc>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d12a      	bne.n	800aa74 <UART_SetConfig+0x260>
 800aa1e:	4b30      	ldr	r3, [pc, #192]	; (800aae0 <UART_SetConfig+0x2cc>)
 800aa20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aa28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa2c:	d01a      	beq.n	800aa64 <UART_SetConfig+0x250>
 800aa2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aa32:	d81b      	bhi.n	800aa6c <UART_SetConfig+0x258>
 800aa34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa38:	d00c      	beq.n	800aa54 <UART_SetConfig+0x240>
 800aa3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aa3e:	d815      	bhi.n	800aa6c <UART_SetConfig+0x258>
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d003      	beq.n	800aa4c <UART_SetConfig+0x238>
 800aa44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa48:	d008      	beq.n	800aa5c <UART_SetConfig+0x248>
 800aa4a:	e00f      	b.n	800aa6c <UART_SetConfig+0x258>
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa52:	e052      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aa54:	2302      	movs	r3, #2
 800aa56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa5a:	e04e      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aa5c:	2304      	movs	r3, #4
 800aa5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa62:	e04a      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aa64:	2308      	movs	r3, #8
 800aa66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa6a:	e046      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aa6c:	2310      	movs	r3, #16
 800aa6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aa72:	e042      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	4a17      	ldr	r2, [pc, #92]	; (800aad8 <UART_SetConfig+0x2c4>)
 800aa7a:	4293      	cmp	r3, r2
 800aa7c:	d13a      	bne.n	800aaf4 <UART_SetConfig+0x2e0>
 800aa7e:	4b18      	ldr	r3, [pc, #96]	; (800aae0 <UART_SetConfig+0x2cc>)
 800aa80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aa84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aa88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa8c:	d01a      	beq.n	800aac4 <UART_SetConfig+0x2b0>
 800aa8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aa92:	d81b      	bhi.n	800aacc <UART_SetConfig+0x2b8>
 800aa94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa98:	d00c      	beq.n	800aab4 <UART_SetConfig+0x2a0>
 800aa9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa9e:	d815      	bhi.n	800aacc <UART_SetConfig+0x2b8>
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d003      	beq.n	800aaac <UART_SetConfig+0x298>
 800aaa4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aaa8:	d008      	beq.n	800aabc <UART_SetConfig+0x2a8>
 800aaaa:	e00f      	b.n	800aacc <UART_SetConfig+0x2b8>
 800aaac:	2300      	movs	r3, #0
 800aaae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aab2:	e022      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aab4:	2302      	movs	r3, #2
 800aab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaba:	e01e      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aabc:	2304      	movs	r3, #4
 800aabe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aac2:	e01a      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aac4:	2308      	movs	r3, #8
 800aac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aaca:	e016      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aacc:	2310      	movs	r3, #16
 800aace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aad2:	e012      	b.n	800aafa <UART_SetConfig+0x2e6>
 800aad4:	efff69f3 	.word	0xefff69f3
 800aad8:	40008000 	.word	0x40008000
 800aadc:	40013800 	.word	0x40013800
 800aae0:	40021000 	.word	0x40021000
 800aae4:	40004400 	.word	0x40004400
 800aae8:	40004800 	.word	0x40004800
 800aaec:	40004c00 	.word	0x40004c00
 800aaf0:	40005000 	.word	0x40005000
 800aaf4:	2310      	movs	r3, #16
 800aaf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4a9f      	ldr	r2, [pc, #636]	; (800ad7c <UART_SetConfig+0x568>)
 800ab00:	4293      	cmp	r3, r2
 800ab02:	d17a      	bne.n	800abfa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ab04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ab08:	2b08      	cmp	r3, #8
 800ab0a:	d824      	bhi.n	800ab56 <UART_SetConfig+0x342>
 800ab0c:	a201      	add	r2, pc, #4	; (adr r2, 800ab14 <UART_SetConfig+0x300>)
 800ab0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab12:	bf00      	nop
 800ab14:	0800ab39 	.word	0x0800ab39
 800ab18:	0800ab57 	.word	0x0800ab57
 800ab1c:	0800ab41 	.word	0x0800ab41
 800ab20:	0800ab57 	.word	0x0800ab57
 800ab24:	0800ab47 	.word	0x0800ab47
 800ab28:	0800ab57 	.word	0x0800ab57
 800ab2c:	0800ab57 	.word	0x0800ab57
 800ab30:	0800ab57 	.word	0x0800ab57
 800ab34:	0800ab4f 	.word	0x0800ab4f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ab38:	f7fc fe4a 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 800ab3c:	61f8      	str	r0, [r7, #28]
        break;
 800ab3e:	e010      	b.n	800ab62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ab40:	4b8f      	ldr	r3, [pc, #572]	; (800ad80 <UART_SetConfig+0x56c>)
 800ab42:	61fb      	str	r3, [r7, #28]
        break;
 800ab44:	e00d      	b.n	800ab62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ab46:	f7fc fdab 	bl	80076a0 <HAL_RCC_GetSysClockFreq>
 800ab4a:	61f8      	str	r0, [r7, #28]
        break;
 800ab4c:	e009      	b.n	800ab62 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab52:	61fb      	str	r3, [r7, #28]
        break;
 800ab54:	e005      	b.n	800ab62 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800ab56:	2300      	movs	r3, #0
 800ab58:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ab60:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800ab62:	69fb      	ldr	r3, [r7, #28]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	f000 80fb 	beq.w	800ad60 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	685a      	ldr	r2, [r3, #4]
 800ab6e:	4613      	mov	r3, r2
 800ab70:	005b      	lsls	r3, r3, #1
 800ab72:	4413      	add	r3, r2
 800ab74:	69fa      	ldr	r2, [r7, #28]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d305      	bcc.n	800ab86 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800ab80:	69fa      	ldr	r2, [r7, #28]
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d903      	bls.n	800ab8e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800ab86:	2301      	movs	r3, #1
 800ab88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800ab8c:	e0e8      	b.n	800ad60 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	2200      	movs	r2, #0
 800ab92:	461c      	mov	r4, r3
 800ab94:	4615      	mov	r5, r2
 800ab96:	f04f 0200 	mov.w	r2, #0
 800ab9a:	f04f 0300 	mov.w	r3, #0
 800ab9e:	022b      	lsls	r3, r5, #8
 800aba0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800aba4:	0222      	lsls	r2, r4, #8
 800aba6:	68f9      	ldr	r1, [r7, #12]
 800aba8:	6849      	ldr	r1, [r1, #4]
 800abaa:	0849      	lsrs	r1, r1, #1
 800abac:	2000      	movs	r0, #0
 800abae:	4688      	mov	r8, r1
 800abb0:	4681      	mov	r9, r0
 800abb2:	eb12 0a08 	adds.w	sl, r2, r8
 800abb6:	eb43 0b09 	adc.w	fp, r3, r9
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	2200      	movs	r2, #0
 800abc0:	603b      	str	r3, [r7, #0]
 800abc2:	607a      	str	r2, [r7, #4]
 800abc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800abc8:	4650      	mov	r0, sl
 800abca:	4659      	mov	r1, fp
 800abcc:	f7f5 fffc 	bl	8000bc8 <__aeabi_uldivmod>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4613      	mov	r3, r2
 800abd6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800abd8:	69bb      	ldr	r3, [r7, #24]
 800abda:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800abde:	d308      	bcc.n	800abf2 <UART_SetConfig+0x3de>
 800abe0:	69bb      	ldr	r3, [r7, #24]
 800abe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800abe6:	d204      	bcs.n	800abf2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	69ba      	ldr	r2, [r7, #24]
 800abee:	60da      	str	r2, [r3, #12]
 800abf0:	e0b6      	b.n	800ad60 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800abf2:	2301      	movs	r3, #1
 800abf4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800abf8:	e0b2      	b.n	800ad60 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	69db      	ldr	r3, [r3, #28]
 800abfe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac02:	d15e      	bne.n	800acc2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800ac04:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ac08:	2b08      	cmp	r3, #8
 800ac0a:	d828      	bhi.n	800ac5e <UART_SetConfig+0x44a>
 800ac0c:	a201      	add	r2, pc, #4	; (adr r2, 800ac14 <UART_SetConfig+0x400>)
 800ac0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac12:	bf00      	nop
 800ac14:	0800ac39 	.word	0x0800ac39
 800ac18:	0800ac41 	.word	0x0800ac41
 800ac1c:	0800ac49 	.word	0x0800ac49
 800ac20:	0800ac5f 	.word	0x0800ac5f
 800ac24:	0800ac4f 	.word	0x0800ac4f
 800ac28:	0800ac5f 	.word	0x0800ac5f
 800ac2c:	0800ac5f 	.word	0x0800ac5f
 800ac30:	0800ac5f 	.word	0x0800ac5f
 800ac34:	0800ac57 	.word	0x0800ac57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac38:	f7fc fdca 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 800ac3c:	61f8      	str	r0, [r7, #28]
        break;
 800ac3e:	e014      	b.n	800ac6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac40:	f7fc fddc 	bl	80077fc <HAL_RCC_GetPCLK2Freq>
 800ac44:	61f8      	str	r0, [r7, #28]
        break;
 800ac46:	e010      	b.n	800ac6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ac48:	4b4d      	ldr	r3, [pc, #308]	; (800ad80 <UART_SetConfig+0x56c>)
 800ac4a:	61fb      	str	r3, [r7, #28]
        break;
 800ac4c:	e00d      	b.n	800ac6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ac4e:	f7fc fd27 	bl	80076a0 <HAL_RCC_GetSysClockFreq>
 800ac52:	61f8      	str	r0, [r7, #28]
        break;
 800ac54:	e009      	b.n	800ac6a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ac56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ac5a:	61fb      	str	r3, [r7, #28]
        break;
 800ac5c:	e005      	b.n	800ac6a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ac62:	2301      	movs	r3, #1
 800ac64:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ac68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ac6a:	69fb      	ldr	r3, [r7, #28]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d077      	beq.n	800ad60 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac70:	69fb      	ldr	r3, [r7, #28]
 800ac72:	005a      	lsls	r2, r3, #1
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	085b      	lsrs	r3, r3, #1
 800ac7a:	441a      	add	r2, r3
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac84:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	2b0f      	cmp	r3, #15
 800ac8a:	d916      	bls.n	800acba <UART_SetConfig+0x4a6>
 800ac8c:	69bb      	ldr	r3, [r7, #24]
 800ac8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac92:	d212      	bcs.n	800acba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ac94:	69bb      	ldr	r3, [r7, #24]
 800ac96:	b29b      	uxth	r3, r3
 800ac98:	f023 030f 	bic.w	r3, r3, #15
 800ac9c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	085b      	lsrs	r3, r3, #1
 800aca2:	b29b      	uxth	r3, r3
 800aca4:	f003 0307 	and.w	r3, r3, #7
 800aca8:	b29a      	uxth	r2, r3
 800acaa:	8afb      	ldrh	r3, [r7, #22]
 800acac:	4313      	orrs	r3, r2
 800acae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800acb0:	68fb      	ldr	r3, [r7, #12]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	8afa      	ldrh	r2, [r7, #22]
 800acb6:	60da      	str	r2, [r3, #12]
 800acb8:	e052      	b.n	800ad60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800acba:	2301      	movs	r3, #1
 800acbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800acc0:	e04e      	b.n	800ad60 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800acc2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800acc6:	2b08      	cmp	r3, #8
 800acc8:	d827      	bhi.n	800ad1a <UART_SetConfig+0x506>
 800acca:	a201      	add	r2, pc, #4	; (adr r2, 800acd0 <UART_SetConfig+0x4bc>)
 800accc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acd0:	0800acf5 	.word	0x0800acf5
 800acd4:	0800acfd 	.word	0x0800acfd
 800acd8:	0800ad05 	.word	0x0800ad05
 800acdc:	0800ad1b 	.word	0x0800ad1b
 800ace0:	0800ad0b 	.word	0x0800ad0b
 800ace4:	0800ad1b 	.word	0x0800ad1b
 800ace8:	0800ad1b 	.word	0x0800ad1b
 800acec:	0800ad1b 	.word	0x0800ad1b
 800acf0:	0800ad13 	.word	0x0800ad13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800acf4:	f7fc fd6c 	bl	80077d0 <HAL_RCC_GetPCLK1Freq>
 800acf8:	61f8      	str	r0, [r7, #28]
        break;
 800acfa:	e014      	b.n	800ad26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acfc:	f7fc fd7e 	bl	80077fc <HAL_RCC_GetPCLK2Freq>
 800ad00:	61f8      	str	r0, [r7, #28]
        break;
 800ad02:	e010      	b.n	800ad26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800ad04:	4b1e      	ldr	r3, [pc, #120]	; (800ad80 <UART_SetConfig+0x56c>)
 800ad06:	61fb      	str	r3, [r7, #28]
        break;
 800ad08:	e00d      	b.n	800ad26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad0a:	f7fc fcc9 	bl	80076a0 <HAL_RCC_GetSysClockFreq>
 800ad0e:	61f8      	str	r0, [r7, #28]
        break;
 800ad10:	e009      	b.n	800ad26 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad16:	61fb      	str	r3, [r7, #28]
        break;
 800ad18:	e005      	b.n	800ad26 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800ad24:	bf00      	nop
    }

    if (pclk != 0U)
 800ad26:	69fb      	ldr	r3, [r7, #28]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d019      	beq.n	800ad60 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	685b      	ldr	r3, [r3, #4]
 800ad30:	085a      	lsrs	r2, r3, #1
 800ad32:	69fb      	ldr	r3, [r7, #28]
 800ad34:	441a      	add	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad3e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad40:	69bb      	ldr	r3, [r7, #24]
 800ad42:	2b0f      	cmp	r3, #15
 800ad44:	d909      	bls.n	800ad5a <UART_SetConfig+0x546>
 800ad46:	69bb      	ldr	r3, [r7, #24]
 800ad48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad4c:	d205      	bcs.n	800ad5a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	b29a      	uxth	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	60da      	str	r2, [r3, #12]
 800ad58:	e002      	b.n	800ad60 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	2200      	movs	r2, #0
 800ad6a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800ad6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800ad70:	4618      	mov	r0, r3
 800ad72:	3728      	adds	r7, #40	; 0x28
 800ad74:	46bd      	mov	sp, r7
 800ad76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ad7a:	bf00      	nop
 800ad7c:	40008000 	.word	0x40008000
 800ad80:	00f42400 	.word	0x00f42400

0800ad84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad84:	b480      	push	{r7}
 800ad86:	b083      	sub	sp, #12
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	f003 0301 	and.w	r3, r3, #1
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d00a      	beq.n	800adae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	430a      	orrs	r2, r1
 800adac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adb2:	f003 0302 	and.w	r3, r3, #2
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d00a      	beq.n	800add0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	685b      	ldr	r3, [r3, #4]
 800adc0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800add4:	f003 0304 	and.w	r3, r3, #4
 800add8:	2b00      	cmp	r3, #0
 800adda:	d00a      	beq.n	800adf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	685b      	ldr	r3, [r3, #4]
 800ade2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	430a      	orrs	r2, r1
 800adf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf6:	f003 0308 	and.w	r3, r3, #8
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00a      	beq.n	800ae14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	685b      	ldr	r3, [r3, #4]
 800ae04:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	430a      	orrs	r2, r1
 800ae12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae18:	f003 0310 	and.w	r3, r3, #16
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00a      	beq.n	800ae36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	430a      	orrs	r2, r1
 800ae34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae3a:	f003 0320 	and.w	r3, r3, #32
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d00a      	beq.n	800ae58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	430a      	orrs	r2, r1
 800ae56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d01a      	beq.n	800ae9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	685b      	ldr	r3, [r3, #4]
 800ae6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	430a      	orrs	r2, r1
 800ae78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae82:	d10a      	bne.n	800ae9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	685b      	ldr	r3, [r3, #4]
 800ae8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	430a      	orrs	r2, r1
 800ae98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d00a      	beq.n	800aebc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	685b      	ldr	r3, [r3, #4]
 800aeac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	430a      	orrs	r2, r1
 800aeba:	605a      	str	r2, [r3, #4]
  }
}
 800aebc:	bf00      	nop
 800aebe:	370c      	adds	r7, #12
 800aec0:	46bd      	mov	sp, r7
 800aec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec6:	4770      	bx	lr

0800aec8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b086      	sub	sp, #24
 800aecc:	af02      	add	r7, sp, #8
 800aece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800aed8:	f7fa fab2 	bl	8005440 <HAL_GetTick>
 800aedc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f003 0308 	and.w	r3, r3, #8
 800aee8:	2b08      	cmp	r3, #8
 800aeea:	d10e      	bne.n	800af0a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800aeec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800aef0:	9300      	str	r3, [sp, #0]
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2200      	movs	r2, #0
 800aef6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 f82d 	bl	800af5a <UART_WaitOnFlagUntilTimeout>
 800af00:	4603      	mov	r3, r0
 800af02:	2b00      	cmp	r3, #0
 800af04:	d001      	beq.n	800af0a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af06:	2303      	movs	r3, #3
 800af08:	e023      	b.n	800af52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f003 0304 	and.w	r3, r3, #4
 800af14:	2b04      	cmp	r3, #4
 800af16:	d10e      	bne.n	800af36 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	2200      	movs	r2, #0
 800af22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f000 f817 	bl	800af5a <UART_WaitOnFlagUntilTimeout>
 800af2c:	4603      	mov	r3, r0
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d001      	beq.n	800af36 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af32:	2303      	movs	r3, #3
 800af34:	e00d      	b.n	800af52 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2220      	movs	r2, #32
 800af3a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2220      	movs	r2, #32
 800af40:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800af50:	2300      	movs	r3, #0
}
 800af52:	4618      	mov	r0, r3
 800af54:	3710      	adds	r7, #16
 800af56:	46bd      	mov	sp, r7
 800af58:	bd80      	pop	{r7, pc}

0800af5a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af5a:	b580      	push	{r7, lr}
 800af5c:	b09c      	sub	sp, #112	; 0x70
 800af5e:	af00      	add	r7, sp, #0
 800af60:	60f8      	str	r0, [r7, #12]
 800af62:	60b9      	str	r1, [r7, #8]
 800af64:	603b      	str	r3, [r7, #0]
 800af66:	4613      	mov	r3, r2
 800af68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af6a:	e0a5      	b.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af72:	f000 80a1 	beq.w	800b0b8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af76:	f7fa fa63 	bl	8005440 <HAL_GetTick>
 800af7a:	4602      	mov	r2, r0
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	1ad3      	subs	r3, r2, r3
 800af80:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800af82:	429a      	cmp	r2, r3
 800af84:	d302      	bcc.n	800af8c <UART_WaitOnFlagUntilTimeout+0x32>
 800af86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d13e      	bne.n	800b00a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af94:	e853 3f00 	ldrex	r3, [r3]
 800af98:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800af9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800afa0:	667b      	str	r3, [r7, #100]	; 0x64
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	461a      	mov	r2, r3
 800afa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800afaa:	65fb      	str	r3, [r7, #92]	; 0x5c
 800afac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800afb0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800afb2:	e841 2300 	strex	r3, r2, [r1]
 800afb6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800afb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1e6      	bne.n	800af8c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	3308      	adds	r3, #8
 800afc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afc8:	e853 3f00 	ldrex	r3, [r3]
 800afcc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800afce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800afd0:	f023 0301 	bic.w	r3, r3, #1
 800afd4:	663b      	str	r3, [r7, #96]	; 0x60
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	3308      	adds	r3, #8
 800afdc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800afde:	64ba      	str	r2, [r7, #72]	; 0x48
 800afe0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afe2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800afe4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800afe6:	e841 2300 	strex	r3, r2, [r1]
 800afea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800afec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1e5      	bne.n	800afbe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2220      	movs	r2, #32
 800aff6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2220      	movs	r2, #32
 800affc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2200      	movs	r2, #0
 800b002:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800b006:	2303      	movs	r3, #3
 800b008:	e067      	b.n	800b0da <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f003 0304 	and.w	r3, r3, #4
 800b014:	2b00      	cmp	r3, #0
 800b016:	d04f      	beq.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	69db      	ldr	r3, [r3, #28]
 800b01e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b022:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b026:	d147      	bne.n	800b0b8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b030:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b03a:	e853 3f00 	ldrex	r3, [r3]
 800b03e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b042:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800b046:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	461a      	mov	r2, r3
 800b04e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b050:	637b      	str	r3, [r7, #52]	; 0x34
 800b052:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b054:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b056:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b058:	e841 2300 	strex	r3, r2, [r1]
 800b05c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800b05e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d1e6      	bne.n	800b032 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	3308      	adds	r3, #8
 800b06a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	e853 3f00 	ldrex	r3, [r3]
 800b072:	613b      	str	r3, [r7, #16]
   return(result);
 800b074:	693b      	ldr	r3, [r7, #16]
 800b076:	f023 0301 	bic.w	r3, r3, #1
 800b07a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	3308      	adds	r3, #8
 800b082:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b084:	623a      	str	r2, [r7, #32]
 800b086:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b088:	69f9      	ldr	r1, [r7, #28]
 800b08a:	6a3a      	ldr	r2, [r7, #32]
 800b08c:	e841 2300 	strex	r3, r2, [r1]
 800b090:	61bb      	str	r3, [r7, #24]
   return(result);
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d1e5      	bne.n	800b064 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2220      	movs	r2, #32
 800b09c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	2220      	movs	r2, #32
 800b0a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	2200      	movs	r2, #0
 800b0b0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	e010      	b.n	800b0da <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	69da      	ldr	r2, [r3, #28]
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	4013      	ands	r3, r2
 800b0c2:	68ba      	ldr	r2, [r7, #8]
 800b0c4:	429a      	cmp	r2, r3
 800b0c6:	bf0c      	ite	eq
 800b0c8:	2301      	moveq	r3, #1
 800b0ca:	2300      	movne	r3, #0
 800b0cc:	b2db      	uxtb	r3, r3
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	79fb      	ldrb	r3, [r7, #7]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	f43f af4a 	beq.w	800af6c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0d8:	2300      	movs	r3, #0
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3770      	adds	r7, #112	; 0x70
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0e2:	b084      	sub	sp, #16
 800b0e4:	b580      	push	{r7, lr}
 800b0e6:	b084      	sub	sp, #16
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	f107 001c 	add.w	r0, r7, #28
 800b0f0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	68db      	ldr	r3, [r3, #12]
 800b0f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fa6f 	bl	800b5e4 <USB_CoreReset>
 800b106:	4603      	mov	r3, r0
 800b108:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 800b10a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d106      	bne.n	800b11e <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b114:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	639a      	str	r2, [r3, #56]	; 0x38
 800b11c:	e005      	b.n	800b12a <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b122:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800b12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12c:	4618      	mov	r0, r3
 800b12e:	3710      	adds	r7, #16
 800b130:	46bd      	mov	sp, r7
 800b132:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b136:	b004      	add	sp, #16
 800b138:	4770      	bx	lr

0800b13a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b13a:	b480      	push	{r7}
 800b13c:	b083      	sub	sp, #12
 800b13e:	af00      	add	r7, sp, #0
 800b140:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	689b      	ldr	r3, [r3, #8]
 800b146:	f023 0201 	bic.w	r2, r3, #1
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	370c      	adds	r7, #12
 800b154:	46bd      	mov	sp, r7
 800b156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15a:	4770      	bx	lr

0800b15c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800b15c:	b580      	push	{r7, lr}
 800b15e:	b084      	sub	sp, #16
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
 800b164:	460b      	mov	r3, r1
 800b166:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b168:	2300      	movs	r3, #0
 800b16a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	68db      	ldr	r3, [r3, #12]
 800b170:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b178:	78fb      	ldrb	r3, [r7, #3]
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d115      	bne.n	800b1aa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b18a:	2001      	movs	r0, #1
 800b18c:	f7fa f964 	bl	8005458 <HAL_Delay>
      ms++;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	3301      	adds	r3, #1
 800b194:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b196:	6878      	ldr	r0, [r7, #4]
 800b198:	f000 fa16 	bl	800b5c8 <USB_GetMode>
 800b19c:	4603      	mov	r3, r0
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d01e      	beq.n	800b1e0 <USB_SetCurrentMode+0x84>
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2b31      	cmp	r3, #49	; 0x31
 800b1a6:	d9f0      	bls.n	800b18a <USB_SetCurrentMode+0x2e>
 800b1a8:	e01a      	b.n	800b1e0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b1aa:	78fb      	ldrb	r3, [r7, #3]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d115      	bne.n	800b1dc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68db      	ldr	r3, [r3, #12]
 800b1b4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1bc:	2001      	movs	r0, #1
 800b1be:	f7fa f94b 	bl	8005458 <HAL_Delay>
      ms++;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f000 f9fd 	bl	800b5c8 <USB_GetMode>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d005      	beq.n	800b1e0 <USB_SetCurrentMode+0x84>
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2b31      	cmp	r3, #49	; 0x31
 800b1d8:	d9f0      	bls.n	800b1bc <USB_SetCurrentMode+0x60>
 800b1da:	e001      	b.n	800b1e0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e005      	b.n	800b1ec <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	2b32      	cmp	r3, #50	; 0x32
 800b1e4:	d101      	bne.n	800b1ea <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e000      	b.n	800b1ec <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b1ea:	2300      	movs	r3, #0
}
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b1f4:	b084      	sub	sp, #16
 800b1f6:	b580      	push	{r7, lr}
 800b1f8:	b086      	sub	sp, #24
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b202:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b206:	2300      	movs	r3, #0
 800b208:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b20e:	2300      	movs	r3, #0
 800b210:	613b      	str	r3, [r7, #16]
 800b212:	e009      	b.n	800b228 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b214:	687a      	ldr	r2, [r7, #4]
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	3340      	adds	r3, #64	; 0x40
 800b21a:	009b      	lsls	r3, r3, #2
 800b21c:	4413      	add	r3, r2
 800b21e:	2200      	movs	r2, #0
 800b220:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	3301      	adds	r3, #1
 800b226:	613b      	str	r3, [r7, #16]
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	2b0e      	cmp	r3, #14
 800b22c:	d9f2      	bls.n	800b214 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b22e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b230:	2b00      	cmp	r3, #0
 800b232:	d11c      	bne.n	800b26e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23a:	685b      	ldr	r3, [r3, #4]
 800b23c:	68fa      	ldr	r2, [r7, #12]
 800b23e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b242:	f043 0302 	orr.w	r3, r3, #2
 800b246:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b24c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	601a      	str	r2, [r3, #0]
 800b26c:	e005      	b.n	800b27a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b272:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b280:	461a      	mov	r2, r3
 800b282:	2300      	movs	r3, #0
 800b284:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b28c:	4619      	mov	r1, r3
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b294:	461a      	mov	r2, r3
 800b296:	680b      	ldr	r3, [r1, #0]
 800b298:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b29a:	2103      	movs	r1, #3
 800b29c:	6878      	ldr	r0, [r7, #4]
 800b29e:	f000 f959 	bl	800b554 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b2a2:	2110      	movs	r1, #16
 800b2a4:	6878      	ldr	r0, [r7, #4]
 800b2a6:	f000 f8f1 	bl	800b48c <USB_FlushTxFifo>
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d001      	beq.n	800b2b4 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800b2b0:	2301      	movs	r3, #1
 800b2b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b2b4:	6878      	ldr	r0, [r7, #4]
 800b2b6:	f000 f91d 	bl	800b4f4 <USB_FlushRxFifo>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d001      	beq.n	800b2c4 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800b2c0:	2301      	movs	r3, #1
 800b2c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2d6:	461a      	mov	r2, r3
 800b2d8:	2300      	movs	r3, #0
 800b2da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b2e8:	2300      	movs	r3, #0
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	e043      	b.n	800b376 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b2ee:	693b      	ldr	r3, [r7, #16]
 800b2f0:	015a      	lsls	r2, r3, #5
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b300:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b304:	d118      	bne.n	800b338 <USB_DevInit+0x144>
    {
      if (i == 0U)
 800b306:	693b      	ldr	r3, [r7, #16]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d10a      	bne.n	800b322 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b30c:	693b      	ldr	r3, [r7, #16]
 800b30e:	015a      	lsls	r2, r3, #5
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	4413      	add	r3, r2
 800b314:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b318:	461a      	mov	r2, r3
 800b31a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b31e:	6013      	str	r3, [r2, #0]
 800b320:	e013      	b.n	800b34a <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b322:	693b      	ldr	r3, [r7, #16]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b32e:	461a      	mov	r2, r3
 800b330:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b334:	6013      	str	r3, [r2, #0]
 800b336:	e008      	b.n	800b34a <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	015a      	lsls	r2, r3, #5
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	4413      	add	r3, r2
 800b340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b344:	461a      	mov	r2, r3
 800b346:	2300      	movs	r3, #0
 800b348:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b34a:	693b      	ldr	r3, [r7, #16]
 800b34c:	015a      	lsls	r2, r3, #5
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	4413      	add	r3, r2
 800b352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b356:	461a      	mov	r2, r3
 800b358:	2300      	movs	r3, #0
 800b35a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	015a      	lsls	r2, r3, #5
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	4413      	add	r3, r2
 800b364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b368:	461a      	mov	r2, r3
 800b36a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b36e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	3301      	adds	r3, #1
 800b374:	613b      	str	r3, [r7, #16]
 800b376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	429a      	cmp	r2, r3
 800b37c:	d3b7      	bcc.n	800b2ee <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b37e:	2300      	movs	r3, #0
 800b380:	613b      	str	r3, [r7, #16]
 800b382:	e043      	b.n	800b40c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b39a:	d118      	bne.n	800b3ce <USB_DevInit+0x1da>
    {
      if (i == 0U)
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d10a      	bne.n	800b3b8 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	e013      	b.n	800b3e0 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3ca:	6013      	str	r3, [r2, #0]
 800b3cc:	e008      	b.n	800b3e0 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b3ce:	693b      	ldr	r3, [r7, #16]
 800b3d0:	015a      	lsls	r2, r3, #5
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	4413      	add	r3, r2
 800b3d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3da:	461a      	mov	r2, r3
 800b3dc:	2300      	movs	r3, #0
 800b3de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	015a      	lsls	r2, r3, #5
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	4413      	add	r3, r2
 800b3e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b3f2:	693b      	ldr	r3, [r7, #16]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fe:	461a      	mov	r2, r3
 800b400:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b404:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b406:	693b      	ldr	r3, [r7, #16]
 800b408:	3301      	adds	r3, #1
 800b40a:	613b      	str	r3, [r7, #16]
 800b40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b40e:	693a      	ldr	r2, [r7, #16]
 800b410:	429a      	cmp	r2, r3
 800b412:	d3b7      	bcc.n	800b384 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b41a:	691b      	ldr	r3, [r3, #16]
 800b41c:	68fa      	ldr	r2, [r7, #12]
 800b41e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b422:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b426:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b434:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	699b      	ldr	r3, [r3, #24]
 800b43a:	f043 0210 	orr.w	r2, r3, #16
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	699a      	ldr	r2, [r3, #24]
 800b446:	4b10      	ldr	r3, [pc, #64]	; (800b488 <USB_DevInit+0x294>)
 800b448:	4313      	orrs	r3, r2
 800b44a:	687a      	ldr	r2, [r7, #4]
 800b44c:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b44e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b450:	2b00      	cmp	r3, #0
 800b452:	d005      	beq.n	800b460 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	699b      	ldr	r3, [r3, #24]
 800b458:	f043 0208 	orr.w	r2, r3, #8
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b462:	2b01      	cmp	r3, #1
 800b464:	d107      	bne.n	800b476 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b46e:	f043 0304 	orr.w	r3, r3, #4
 800b472:	687a      	ldr	r2, [r7, #4]
 800b474:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b476:	7dfb      	ldrb	r3, [r7, #23]
}
 800b478:	4618      	mov	r0, r3
 800b47a:	3718      	adds	r7, #24
 800b47c:	46bd      	mov	sp, r7
 800b47e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b482:	b004      	add	sp, #16
 800b484:	4770      	bx	lr
 800b486:	bf00      	nop
 800b488:	803c3800 	.word	0x803c3800

0800b48c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
 800b494:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b496:	2300      	movs	r3, #0
 800b498:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	3301      	adds	r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	4a13      	ldr	r2, [pc, #76]	; (800b4f0 <USB_FlushTxFifo+0x64>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d901      	bls.n	800b4ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b4a8:	2303      	movs	r3, #3
 800b4aa:	e01b      	b.n	800b4e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	daf2      	bge.n	800b49a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	019b      	lsls	r3, r3, #6
 800b4bc:	f043 0220 	orr.w	r2, r3, #32
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	3301      	adds	r3, #1
 800b4c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	4a08      	ldr	r2, [pc, #32]	; (800b4f0 <USB_FlushTxFifo+0x64>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d901      	bls.n	800b4d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b4d2:	2303      	movs	r3, #3
 800b4d4:	e006      	b.n	800b4e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	691b      	ldr	r3, [r3, #16]
 800b4da:	f003 0320 	and.w	r3, r3, #32
 800b4de:	2b20      	cmp	r3, #32
 800b4e0:	d0f0      	beq.n	800b4c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b4e2:	2300      	movs	r3, #0
}
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	3714      	adds	r7, #20
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ee:	4770      	bx	lr
 800b4f0:	00030d40 	.word	0x00030d40

0800b4f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b4f4:	b480      	push	{r7}
 800b4f6:	b085      	sub	sp, #20
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	3301      	adds	r3, #1
 800b504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	4a11      	ldr	r2, [pc, #68]	; (800b550 <USB_FlushRxFifo+0x5c>)
 800b50a:	4293      	cmp	r3, r2
 800b50c:	d901      	bls.n	800b512 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e018      	b.n	800b544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	2b00      	cmp	r3, #0
 800b518:	daf2      	bge.n	800b500 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	2210      	movs	r2, #16
 800b522:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3301      	adds	r3, #1
 800b528:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	4a08      	ldr	r2, [pc, #32]	; (800b550 <USB_FlushRxFifo+0x5c>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d901      	bls.n	800b536 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e006      	b.n	800b544 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	f003 0310 	and.w	r3, r3, #16
 800b53e:	2b10      	cmp	r3, #16
 800b540:	d0f0      	beq.n	800b524 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b542:	2300      	movs	r3, #0
}
 800b544:	4618      	mov	r0, r3
 800b546:	3714      	adds	r7, #20
 800b548:	46bd      	mov	sp, r7
 800b54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54e:	4770      	bx	lr
 800b550:	00030d40 	.word	0x00030d40

0800b554 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b554:	b480      	push	{r7}
 800b556:	b085      	sub	sp, #20
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
 800b55c:	460b      	mov	r3, r1
 800b55e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b56a:	681a      	ldr	r2, [r3, #0]
 800b56c:	78fb      	ldrb	r3, [r7, #3]
 800b56e:	68f9      	ldr	r1, [r7, #12]
 800b570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b574:	4313      	orrs	r3, r2
 800b576:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3714      	adds	r7, #20
 800b57e:	46bd      	mov	sp, r7
 800b580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b584:	4770      	bx	lr

0800b586 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b586:	b480      	push	{r7}
 800b588:	b085      	sub	sp, #20
 800b58a:	af00      	add	r7, sp, #0
 800b58c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5a0:	f023 0303 	bic.w	r3, r3, #3
 800b5a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ac:	685b      	ldr	r3, [r3, #4]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5b4:	f043 0302 	orr.w	r3, r3, #2
 800b5b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5ba:	2300      	movs	r3, #0
}
 800b5bc:	4618      	mov	r0, r3
 800b5be:	3714      	adds	r7, #20
 800b5c0:	46bd      	mov	sp, r7
 800b5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c6:	4770      	bx	lr

0800b5c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	b083      	sub	sp, #12
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	695b      	ldr	r3, [r3, #20]
 800b5d4:	f003 0301 	and.w	r3, r3, #1
}
 800b5d8:	4618      	mov	r0, r3
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b085      	sub	sp, #20
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	3301      	adds	r3, #1
 800b5f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	4a13      	ldr	r2, [pc, #76]	; (800b648 <USB_CoreReset+0x64>)
 800b5fa:	4293      	cmp	r3, r2
 800b5fc:	d901      	bls.n	800b602 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b5fe:	2303      	movs	r3, #3
 800b600:	e01b      	b.n	800b63a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	2b00      	cmp	r3, #0
 800b608:	daf2      	bge.n	800b5f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	691b      	ldr	r3, [r3, #16]
 800b612:	f043 0201 	orr.w	r2, r3, #1
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	3301      	adds	r3, #1
 800b61e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	4a09      	ldr	r2, [pc, #36]	; (800b648 <USB_CoreReset+0x64>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d901      	bls.n	800b62c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b628:	2303      	movs	r3, #3
 800b62a:	e006      	b.n	800b63a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 0301 	and.w	r3, r3, #1
 800b634:	2b01      	cmp	r3, #1
 800b636:	d0f0      	beq.n	800b61a <USB_CoreReset+0x36>

  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	3714      	adds	r7, #20
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr
 800b646:	bf00      	nop
 800b648:	00030d40 	.word	0x00030d40

0800b64c <NewMessageData>:
static int waitfor(MQTTClient* c, int packet_type, Timer* timer);
void MQTTRun(void* parm);



static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800b64c:	b480      	push	{r7}
 800b64e:	b085      	sub	sp, #20
 800b650:	af00      	add	r7, sp, #0
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	68ba      	ldr	r2, [r7, #8]
 800b65c:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	601a      	str	r2, [r3, #0]
}
 800b664:	bf00      	nop
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66e:	4770      	bx	lr

0800b670 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800b670:	b480      	push	{r7}
 800b672:	b083      	sub	sp, #12
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b680:	4293      	cmp	r3, r2
 800b682:	d003      	beq.n	800b68c <getNextPacketId+0x1c>
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	3301      	adds	r3, #1
 800b68a:	e000      	b.n	800b68e <getNextPacketId+0x1e>
 800b68c:	2301      	movs	r3, #1
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6013      	str	r3, [r2, #0]
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
}
 800b696:	4618      	mov	r0, r3
 800b698:	370c      	adds	r7, #12
 800b69a:	46bd      	mov	sp, r7
 800b69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a0:	4770      	bx	lr

0800b6a2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800b6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
    int rc = FAILURE,
 800b6b0:	f04f 33ff 	mov.w	r3, #4294967295
 800b6b4:	617b      	str	r3, [r7, #20]
        sent = 0;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	613b      	str	r3, [r7, #16]

    while (sent < length && !TimerIsExpired(timer))
 800b6ba:	e01c      	b.n	800b6f6 <sendPacket+0x54>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length - sent, TimerLeftMS(timer)); // length changed by length - sent for long packets and non blocking sockets
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6c0:	689c      	ldr	r4, [r3, #8]
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	691a      	ldr	r2, [r3, #16]
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	18d6      	adds	r6, r2, r3
 800b6ce:	68ba      	ldr	r2, [r7, #8]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	eba2 0803 	sub.w	r8, r2, r3
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f7f6 fa6a 	bl	8001bb0 <TimerLeftMS>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	4642      	mov	r2, r8
 800b6e0:	4631      	mov	r1, r6
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	47a0      	blx	r4
 800b6e6:	6178      	str	r0, [r7, #20]
        if (rc < 0)  // there was an error writing the data
 800b6e8:	697b      	ldr	r3, [r7, #20]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	db0e      	blt.n	800b70c <sendPacket+0x6a>
            break;
        sent += rc;
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	4413      	add	r3, r2
 800b6f4:	613b      	str	r3, [r7, #16]
    while (sent < length && !TimerIsExpired(timer))
 800b6f6:	693a      	ldr	r2, [r7, #16]
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	da07      	bge.n	800b70e <sendPacket+0x6c>
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f7f6 fa7e 	bl	8001c00 <TimerIsExpired>
 800b704:	4603      	mov	r3, r0
 800b706:	2b00      	cmp	r3, #0
 800b708:	d0d8      	beq.n	800b6bc <sendPacket+0x1a>
 800b70a:	e000      	b.n	800b70e <sendPacket+0x6c>
            break;
 800b70c:	bf00      	nop
    }
    if (sent == length)
 800b70e:	693a      	ldr	r2, [r7, #16]
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	429a      	cmp	r2, r3
 800b714:	d10b      	bne.n	800b72e <sendPacket+0x8c>
    {
        TimerCountdown(&c->last_sent, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	4619      	mov	r1, r3
 800b722:	4610      	mov	r0, r2
 800b724:	f7f6 fa32 	bl	8001b8c <TimerCountdown>
        rc = MQSUCCESS;
 800b728:	2300      	movs	r3, #0
 800b72a:	617b      	str	r3, [r7, #20]
 800b72c:	e002      	b.n	800b734 <sendPacket+0x92>
    }
    else
        rc = FAILURE;
 800b72e:	f04f 33ff 	mov.w	r3, #4294967295
 800b732:	617b      	str	r3, [r7, #20]
    return rc;
 800b734:	697b      	ldr	r3, [r7, #20]
}
 800b736:	4618      	mov	r0, r3
 800b738:	3718      	adds	r7, #24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b740 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b086      	sub	sp, #24
 800b744:	af00      	add	r7, sp, #0
 800b746:	60f8      	str	r0, [r7, #12]
 800b748:	60b9      	str	r1, [r7, #8]
 800b74a:	607a      	str	r2, [r7, #4]
 800b74c:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	655a      	str	r2, [r3, #84]	; 0x54

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800b754:	2300      	movs	r3, #0
 800b756:	617b      	str	r3, [r7, #20]
 800b758:	e008      	b.n	800b76c <MQTTClientInit+0x2c>
        c->messageHandlers[i].topicFilter = 0;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	697a      	ldr	r2, [r7, #20]
 800b75e:	3205      	adds	r2, #5
 800b760:	2100      	movs	r1, #0
 800b762:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	3301      	adds	r3, #1
 800b76a:	617b      	str	r3, [r7, #20]
 800b76c:	697b      	ldr	r3, [r7, #20]
 800b76e:	2b04      	cmp	r3, #4
 800b770:	ddf3      	ble.n	800b75a <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	687a      	ldr	r2, [r7, #4]
 800b776:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	6a3a      	ldr	r2, [r7, #32]
 800b782:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b788:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b78e:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2200      	movs	r2, #0
 800b794:	621a      	str	r2, [r3, #32]
    c->cleansession = 0;
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	2200      	movs	r2, #0
 800b79a:	625a      	str	r2, [r3, #36]	; 0x24
    c->ping_outstanding = 0;
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	651a      	str	r2, [r3, #80]	; 0x50
	  c->next_packetid = 1;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	2201      	movs	r2, #1
 800b7ac:	601a      	str	r2, [r3, #0]
    TimerInit(&c->last_sent);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	3358      	adds	r3, #88	; 0x58
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7f6 fa35 	bl	8001c22 <TimerInit>
    TimerInit(&c->last_received);
 800b7b8:	68fb      	ldr	r3, [r7, #12]
 800b7ba:	3360      	adds	r3, #96	; 0x60
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7f6 fa30 	bl	8001c22 <TimerInit>
#if defined(MQTT_TASK)
	  MutexInit(&c->mutex);
#endif
}
 800b7c2:	bf00      	nop
 800b7c4:	3718      	adds	r7, #24
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	bd80      	pop	{r7, pc}

0800b7ca <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800b7ca:	b590      	push	{r4, r7, lr}
 800b7cc:	b08b      	sub	sp, #44	; 0x2c
 800b7ce:	af00      	add	r7, sp, #0
 800b7d0:	60f8      	str	r0, [r7, #12]
 800b7d2:	60b9      	str	r1, [r7, #8]
 800b7d4:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800b7de:	2304      	movs	r3, #4
 800b7e0:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800b7e8:	f04f 33ff 	mov.w	r3, #4294967295
 800b7ec:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800b7ee:	6a3b      	ldr	r3, [r7, #32]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	623b      	str	r3, [r7, #32]
 800b7f4:	6a3a      	ldr	r2, [r7, #32]
 800b7f6:	69fb      	ldr	r3, [r7, #28]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	dd03      	ble.n	800b804 <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800b7fc:	f04f 33ff 	mov.w	r3, #4294967295
 800b800:	61bb      	str	r3, [r7, #24]
            goto exit;
 800b802:	e021      	b.n	800b848 <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b808:	685c      	ldr	r4, [r3, #4]
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800b80e:	f107 0117 	add.w	r1, r7, #23
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	2201      	movs	r2, #1
 800b816:	47a0      	blx	r4
 800b818:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800b81a:	69bb      	ldr	r3, [r7, #24]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d112      	bne.n	800b846 <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	7dfb      	ldrb	r3, [r7, #23]
 800b826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b82a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b82c:	fb01 f303 	mul.w	r3, r1, r3
 800b830:	441a      	add	r2, r3
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800b836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b838:	01db      	lsls	r3, r3, #7
 800b83a:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800b83c:	7dfb      	ldrb	r3, [r7, #23]
 800b83e:	b25b      	sxtb	r3, r3
 800b840:	2b00      	cmp	r3, #0
 800b842:	dbd1      	blt.n	800b7e8 <decodePacket+0x1e>
exit:
 800b844:	e000      	b.n	800b848 <decodePacket+0x7e>
            goto exit;
 800b846:	bf00      	nop
    return len;
 800b848:	6a3b      	ldr	r3, [r7, #32]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	372c      	adds	r7, #44	; 0x2c
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd90      	pop	{r4, r7, pc}

0800b852 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800b852:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b854:	b089      	sub	sp, #36	; 0x24
 800b856:	af00      	add	r7, sp, #0
 800b858:	60f8      	str	r0, [r7, #12]
 800b85a:	60b9      	str	r1, [r7, #8]
    MQTTHeader header = {0};
 800b85c:	2300      	movs	r3, #0
 800b85e:	617b      	str	r3, [r7, #20]
    int len = 0;
 800b860:	2300      	movs	r3, #0
 800b862:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800b864:	2300      	movs	r3, #0
 800b866:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    int rc = c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer));
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b86c:	685c      	ldr	r4, [r3, #4]
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	695e      	ldr	r6, [r3, #20]
 800b876:	68b8      	ldr	r0, [r7, #8]
 800b878:	f7f6 f99a 	bl	8001bb0 <TimerLeftMS>
 800b87c:	4603      	mov	r3, r0
 800b87e:	2201      	movs	r2, #1
 800b880:	4631      	mov	r1, r6
 800b882:	4628      	mov	r0, r5
 800b884:	47a0      	blx	r4
 800b886:	61f8      	str	r0, [r7, #28]
    if (rc != 1)
 800b888:	69fb      	ldr	r3, [r7, #28]
 800b88a:	2b01      	cmp	r3, #1
 800b88c:	d157      	bne.n	800b93e <readPacket+0xec>
        goto exit;

    len = 1;
 800b88e:	2301      	movs	r3, #1
 800b890:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800b892:	68b8      	ldr	r0, [r7, #8]
 800b894:	f7f6 f98c 	bl	8001bb0 <TimerLeftMS>
 800b898:	4602      	mov	r2, r0
 800b89a:	f107 0310 	add.w	r3, r7, #16
 800b89e:	4619      	mov	r1, r3
 800b8a0:	68f8      	ldr	r0, [r7, #12]
 800b8a2:	f7ff ff92 	bl	800b7ca <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	3301      	adds	r3, #1
 800b8ac:	693a      	ldr	r2, [r7, #16]
 800b8ae:	4611      	mov	r1, r2
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f001 f814 	bl	800c8de <MQTTPacket_encode>
 800b8b6:	4602      	mov	r2, r0
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	61bb      	str	r3, [r7, #24]

    if (rem_len > (c->readbuf_size - len))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	68da      	ldr	r2, [r3, #12]
 800b8c2:	69bb      	ldr	r3, [r7, #24]
 800b8c4:	1ad3      	subs	r3, r2, r3
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d203      	bcs.n	800b8d4 <readPacket+0x82>
    {
        rc = BUFFER_OVERFLOW;
 800b8cc:	f06f 0301 	mvn.w	r3, #1
 800b8d0:	61fb      	str	r3, [r7, #28]
        goto exit;
 800b8d2:	e037      	b.n	800b944 <readPacket+0xf2>
    }

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0)
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	dd1a      	ble.n	800b910 <readPacket+0xbe>
    {
      rc = c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer));
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8de:	685c      	ldr	r4, [r3, #4]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	695a      	ldr	r2, [r3, #20]
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	18d6      	adds	r6, r2, r3
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	607b      	str	r3, [r7, #4]
 800b8f0:	68b8      	ldr	r0, [r7, #8]
 800b8f2:	f7f6 f95d 	bl	8001bb0 <TimerLeftMS>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	687a      	ldr	r2, [r7, #4]
 800b8fa:	4631      	mov	r1, r6
 800b8fc:	4628      	mov	r0, r5
 800b8fe:	47a0      	blx	r4
 800b900:	61f8      	str	r0, [r7, #28]
      if (rc != rem_len)
 800b902:	693b      	ldr	r3, [r7, #16]
 800b904:	69fa      	ldr	r2, [r7, #28]
 800b906:	429a      	cmp	r2, r3
 800b908:	d002      	beq.n	800b910 <readPacket+0xbe>
      {
        rc = 0;
 800b90a:	2300      	movs	r3, #0
 800b90c:	61fb      	str	r3, [r7, #28]
        goto exit;
 800b90e:	e019      	b.n	800b944 <readPacket+0xf2>
      }
    }

    header.byte = c->readbuf[0];
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	695b      	ldr	r3, [r3, #20]
 800b914:	781b      	ldrb	r3, [r3, #0]
 800b916:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800b918:	7d3b      	ldrb	r3, [r7, #20]
 800b91a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b91e:	b2db      	uxtb	r3, r3
 800b920:	61fb      	str	r3, [r7, #28]
    if (c->keepAliveInterval > 0)
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	699b      	ldr	r3, [r3, #24]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d00b      	beq.n	800b942 <readPacket+0xf0>
        TimerCountdown(&c->last_received, c->keepAliveInterval); // record the fact that we have successfully received a packet
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	699b      	ldr	r3, [r3, #24]
 800b934:	4619      	mov	r1, r3
 800b936:	4610      	mov	r0, r2
 800b938:	f7f6 f928 	bl	8001b8c <TimerCountdown>
 800b93c:	e002      	b.n	800b944 <readPacket+0xf2>
        goto exit;
 800b93e:	bf00      	nop
 800b940:	e000      	b.n	800b944 <readPacket+0xf2>
exit:
 800b942:	bf00      	nop
    return rc;
 800b944:	69fb      	ldr	r3, [r7, #28]
}
 800b946:	4618      	mov	r0, r3
 800b948:	3724      	adds	r7, #36	; 0x24
 800b94a:	46bd      	mov	sp, r7
 800b94c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b94e <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800b94e:	b480      	push	{r7}
 800b950:	b087      	sub	sp, #28
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	689b      	ldr	r3, [r3, #8]
 800b960:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	685b      	ldr	r3, [r3, #4]
 800b966:	461a      	mov	r2, r3
 800b968:	693b      	ldr	r3, [r7, #16]
 800b96a:	4413      	add	r3, r2
 800b96c:	60bb      	str	r3, [r7, #8]

    while (*curf && curn < curn_end)
 800b96e:	e039      	b.n	800b9e4 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800b970:	693b      	ldr	r3, [r7, #16]
 800b972:	781b      	ldrb	r3, [r3, #0]
 800b974:	2b2f      	cmp	r3, #47	; 0x2f
 800b976:	d103      	bne.n	800b980 <isTopicMatched+0x32>
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b2f      	cmp	r3, #47	; 0x2f
 800b97e:	d13a      	bne.n	800b9f6 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	781b      	ldrb	r3, [r3, #0]
 800b984:	2b2b      	cmp	r3, #43	; 0x2b
 800b986:	d009      	beq.n	800b99c <isTopicMatched+0x4e>
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	2b23      	cmp	r3, #35	; 0x23
 800b98e:	d005      	beq.n	800b99c <isTopicMatched+0x4e>
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	781a      	ldrb	r2, [r3, #0]
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	781b      	ldrb	r3, [r3, #0]
 800b998:	429a      	cmp	r2, r3
 800b99a:	d12e      	bne.n	800b9fa <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	2b2b      	cmp	r3, #43	; 0x2b
 800b9a2:	d112      	bne.n	800b9ca <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800b9aa:	e005      	b.n	800b9b8 <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800b9ac:	693b      	ldr	r3, [r7, #16]
 800b9ae:	3301      	adds	r3, #1
 800b9b0:	613b      	str	r3, [r7, #16]
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	3301      	adds	r3, #1
 800b9b6:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	429a      	cmp	r2, r3
 800b9be:	d20b      	bcs.n	800b9d8 <isTopicMatched+0x8a>
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	781b      	ldrb	r3, [r3, #0]
 800b9c4:	2b2f      	cmp	r3, #47	; 0x2f
 800b9c6:	d1f1      	bne.n	800b9ac <isTopicMatched+0x5e>
 800b9c8:	e006      	b.n	800b9d8 <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	781b      	ldrb	r3, [r3, #0]
 800b9ce:	2b23      	cmp	r3, #35	; 0x23
 800b9d0:	d102      	bne.n	800b9d8 <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	613b      	str	r3, [r7, #16]
        curf++;
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	3301      	adds	r3, #1
 800b9dc:	617b      	str	r3, [r7, #20]
        curn++;
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	3301      	adds	r3, #1
 800b9e2:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d007      	beq.n	800b9fc <isTopicMatched+0xae>
 800b9ec:	693a      	ldr	r2, [r7, #16]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d3bd      	bcc.n	800b970 <isTopicMatched+0x22>
 800b9f4:	e002      	b.n	800b9fc <isTopicMatched+0xae>
            break;
 800b9f6:	bf00      	nop
 800b9f8:	e000      	b.n	800b9fc <isTopicMatched+0xae>
            break;
 800b9fa:	bf00      	nop
    };

    return (curn == curn_end) && (*curf == '\0');
 800b9fc:	693a      	ldr	r2, [r7, #16]
 800b9fe:	68bb      	ldr	r3, [r7, #8]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d105      	bne.n	800ba10 <isTopicMatched+0xc2>
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	781b      	ldrb	r3, [r3, #0]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d101      	bne.n	800ba10 <isTopicMatched+0xc2>
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e000      	b.n	800ba12 <isTopicMatched+0xc4>
 800ba10:	2300      	movs	r3, #0
 800ba12:	b2db      	uxtb	r3, r3
}
 800ba14:	4618      	mov	r0, r3
 800ba16:	371c      	adds	r7, #28
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b08a      	sub	sp, #40	; 0x28
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800ba2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ba30:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ba32:	2300      	movs	r3, #0
 800ba34:	627b      	str	r3, [r7, #36]	; 0x24
 800ba36:	e03c      	b.n	800bab2 <deliverMessage+0x92>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba3c:	3205      	adds	r2, #5
 800ba3e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d032      	beq.n	800baac <deliverMessage+0x8c>
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba4a:	3205      	adds	r2, #5
 800ba4c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ba50:	4619      	mov	r1, r3
 800ba52:	68b8      	ldr	r0, [r7, #8]
 800ba54:	f001 f912 	bl	800cc7c <MQTTPacket_equals>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d10b      	bne.n	800ba76 <deliverMessage+0x56>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba62:	3205      	adds	r2, #5
 800ba64:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800ba68:	68b9      	ldr	r1, [r7, #8]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f7ff ff6f 	bl	800b94e <isTopicMatched>
 800ba70:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d01a      	beq.n	800baac <deliverMessage+0x8c>
        {
            if (c->messageHandlers[i].fp != NULL)
 800ba76:	68fa      	ldr	r2, [r7, #12]
 800ba78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba7a:	3305      	adds	r3, #5
 800ba7c:	00db      	lsls	r3, r3, #3
 800ba7e:	4413      	add	r3, r2
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d012      	beq.n	800baac <deliverMessage+0x8c>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800ba86:	f107 0318 	add.w	r3, r7, #24
 800ba8a:	687a      	ldr	r2, [r7, #4]
 800ba8c:	68b9      	ldr	r1, [r7, #8]
 800ba8e:	4618      	mov	r0, r3
 800ba90:	f7ff fddc 	bl	800b64c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800ba94:	68fa      	ldr	r2, [r7, #12]
 800ba96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba98:	3305      	adds	r3, #5
 800ba9a:	00db      	lsls	r3, r3, #3
 800ba9c:	4413      	add	r3, r2
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	f107 0218 	add.w	r2, r7, #24
 800baa4:	4610      	mov	r0, r2
 800baa6:	4798      	blx	r3
                rc = MQSUCCESS;
 800baa8:	2300      	movs	r3, #0
 800baaa:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800baac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baae:	3301      	adds	r3, #1
 800bab0:	627b      	str	r3, [r7, #36]	; 0x24
 800bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab4:	2b04      	cmp	r3, #4
 800bab6:	ddbf      	ble.n	800ba38 <deliverMessage+0x18>
            }
        }
    }

    if (rc == FAILURE && c->defaultMessageHandler != NULL)
 800bab8:	6a3b      	ldr	r3, [r7, #32]
 800baba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800babe:	d112      	bne.n	800bae6 <deliverMessage+0xc6>
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d00e      	beq.n	800bae6 <deliverMessage+0xc6>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800bac8:	f107 0310 	add.w	r3, r7, #16
 800bacc:	687a      	ldr	r2, [r7, #4]
 800bace:	68b9      	ldr	r1, [r7, #8]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f7ff fdbb 	bl	800b64c <NewMessageData>
        c->defaultMessageHandler(&md);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bada:	f107 0210 	add.w	r2, r7, #16
 800bade:	4610      	mov	r0, r2
 800bae0:	4798      	blx	r3
        rc = MQSUCCESS;
 800bae2:	2300      	movs	r3, #0
 800bae4:	623b      	str	r3, [r7, #32]
    }

    return rc;
 800bae6:	6a3b      	ldr	r3, [r7, #32]
}
 800bae8:	4618      	mov	r0, r3
 800baea:	3728      	adds	r7, #40	; 0x28
 800baec:	46bd      	mov	sp, r7
 800baee:	bd80      	pop	{r7, pc}

0800baf0 <keepalive>:


int keepalive(MQTTClient* c)
{
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b086      	sub	sp, #24
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
    int rc = MQSUCCESS;
 800baf8:	2300      	movs	r3, #0
 800bafa:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	699b      	ldr	r3, [r3, #24]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d045      	beq.n	800bb90 <keepalive+0xa0>
        goto exit;

    if (TimerIsExpired(&c->last_sent) || TimerIsExpired(&c->last_received))
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	3358      	adds	r3, #88	; 0x58
 800bb08:	4618      	mov	r0, r3
 800bb0a:	f7f6 f879 	bl	8001c00 <TimerIsExpired>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	d107      	bne.n	800bb24 <keepalive+0x34>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	3360      	adds	r3, #96	; 0x60
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7f6 f871 	bl	8001c00 <TimerIsExpired>
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d037      	beq.n	800bb94 <keepalive+0xa4>
    {
        if (c->ping_outstanding)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	7f1b      	ldrb	r3, [r3, #28]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <keepalive+0x44>
            rc = FAILURE; /* PINGRESP not received in keepalive interval */
 800bb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800bb30:	617b      	str	r3, [r7, #20]
 800bb32:	e030      	b.n	800bb96 <keepalive+0xa6>
        else
        {
            Timer timer;
            TimerInit(&timer);
 800bb34:	f107 0308 	add.w	r3, r7, #8
 800bb38:	4618      	mov	r0, r3
 800bb3a:	f7f6 f872 	bl	8001c22 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800bb3e:	f107 0308 	add.w	r3, r7, #8
 800bb42:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800bb46:	4618      	mov	r0, r3
 800bb48:	f7f6 f80f 	bl	8001b6a <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	691a      	ldr	r2, [r3, #16]
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	689b      	ldr	r3, [r3, #8]
 800bb54:	4619      	mov	r1, r3
 800bb56:	4610      	mov	r0, r2
 800bb58:	f000 fdf5 	bl	800c746 <MQTTSerialize_pingreq>
 800bb5c:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == MQSUCCESS) // send the ping packet
 800bb5e:	693b      	ldr	r3, [r7, #16]
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	dd18      	ble.n	800bb96 <keepalive+0xa6>
 800bb64:	f107 0308 	add.w	r3, r7, #8
 800bb68:	461a      	mov	r2, r3
 800bb6a:	6939      	ldr	r1, [r7, #16]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7ff fd98 	bl	800b6a2 <sendPacket>
 800bb72:	6178      	str	r0, [r7, #20]
 800bb74:	697b      	ldr	r3, [r7, #20]
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10d      	bne.n	800bb96 <keepalive+0xa6>
            {
                c->ping_outstanding = 1;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	771a      	strb	r2, [r3, #28]
                TimerCountdownMS(&c->last_received, 5000);  // allow for a few seconds to receive the ping response
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	3360      	adds	r3, #96	; 0x60
 800bb84:	f241 3188 	movw	r1, #5000	; 0x1388
 800bb88:	4618      	mov	r0, r3
 800bb8a:	f7f5 ffee 	bl	8001b6a <TimerCountdownMS>
 800bb8e:	e002      	b.n	800bb96 <keepalive+0xa6>
        goto exit;
 800bb90:	bf00      	nop
 800bb92:	e000      	b.n	800bb96 <keepalive+0xa6>
            }
        }
    }

exit:
 800bb94:	bf00      	nop
    return rc;
 800bb96:	697b      	ldr	r3, [r7, #20]
}
 800bb98:	4618      	mov	r0, r3
 800bb9a:	3718      	adds	r7, #24
 800bb9c:	46bd      	mov	sp, r7
 800bb9e:	bd80      	pop	{r7, pc}

0800bba0 <MQTTCleanSession>:


void MQTTCleanSession(MQTTClient* c)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b085      	sub	sp, #20
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
    int i = 0;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	60fb      	str	r3, [r7, #12]

    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bbac:	2300      	movs	r3, #0
 800bbae:	60fb      	str	r3, [r7, #12]
 800bbb0:	e008      	b.n	800bbc4 <MQTTCleanSession+0x24>
        c->messageHandlers[i].topicFilter = NULL;
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	68fa      	ldr	r2, [r7, #12]
 800bbb6:	3205      	adds	r2, #5
 800bbb8:	2100      	movs	r1, #0
 800bbba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	3301      	adds	r3, #1
 800bbc2:	60fb      	str	r3, [r7, #12]
 800bbc4:	68fb      	ldr	r3, [r7, #12]
 800bbc6:	2b04      	cmp	r3, #4
 800bbc8:	ddf3      	ble.n	800bbb2 <MQTTCleanSession+0x12>
}
 800bbca:	bf00      	nop
 800bbcc:	bf00      	nop
 800bbce:	3714      	adds	r7, #20
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr

0800bbd8 <MQTTCloseSession>:


void MQTTCloseSession(MQTTClient* c)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
    c->ping_outstanding = 0;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	771a      	strb	r2, [r3, #28]
    c->isconnected = 0;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	621a      	str	r2, [r3, #32]
    if (c->cleansession)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <MQTTCloseSession+0x22>
        MQTTCleanSession(c);
 800bbf4:	6878      	ldr	r0, [r7, #4]
 800bbf6:	f7ff ffd3 	bl	800bba0 <MQTTCleanSession>
}
 800bbfa:	bf00      	nop
 800bbfc:	3708      	adds	r7, #8
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bd80      	pop	{r7, pc}
	...

0800bc04 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800bc04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc06:	b095      	sub	sp, #84	; 0x54
 800bc08:	af06      	add	r7, sp, #24
 800bc0a:	6078      	str	r0, [r7, #4]
 800bc0c:	6039      	str	r1, [r7, #0]
    int len = 0,
 800bc0e:	2300      	movs	r3, #0
 800bc10:	637b      	str	r3, [r7, #52]	; 0x34
        rc = MQSUCCESS;
 800bc12:	2300      	movs	r3, #0
 800bc14:	633b      	str	r3, [r7, #48]	; 0x30

    int packet_type = readPacket(c, timer);     /* read the socket, see what work is due */
 800bc16:	6839      	ldr	r1, [r7, #0]
 800bc18:	6878      	ldr	r0, [r7, #4]
 800bc1a:	f7ff fe1a 	bl	800b852 <readPacket>
 800bc1e:	62f8      	str	r0, [r7, #44]	; 0x2c

    switch (packet_type)
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	2b0d      	cmp	r3, #13
 800bc24:	d81e      	bhi.n	800bc64 <cycle+0x60>
 800bc26:	a201      	add	r2, pc, #4	; (adr r2, 800bc2c <cycle+0x28>)
 800bc28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc2c:	0800bdbb 	.word	0x0800bdbb
 800bc30:	0800bc65 	.word	0x0800bc65
 800bc34:	0800bdbb 	.word	0x0800bdbb
 800bc38:	0800bc6b 	.word	0x0800bc6b
 800bc3c:	0800bdbb 	.word	0x0800bdbb
 800bc40:	0800bd37 	.word	0x0800bd37
 800bc44:	0800bd37 	.word	0x0800bd37
 800bc48:	0800bdbb 	.word	0x0800bdbb
 800bc4c:	0800bc65 	.word	0x0800bc65
 800bc50:	0800bdbb 	.word	0x0800bdbb
 800bc54:	0800bc65 	.word	0x0800bc65
 800bc58:	0800bc65 	.word	0x0800bc65
 800bc5c:	0800bc65 	.word	0x0800bc65
 800bc60:	0800bdb3 	.word	0x0800bdb3
    {
        default:
            /* no more data to read, unrecoverable. Or read packet fails due to unexpected network error */
            rc = packet_type;
 800bc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc66:	633b      	str	r3, [r7, #48]	; 0x30
            goto exit;
 800bc68:	e0b9      	b.n	800bdde <cycle+0x1da>
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            msg.payloadlen = 0; /* this is a size_t, but deserialize publish sets this as int */
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	61fb      	str	r3, [r7, #28]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800bc76:	4616      	mov	r6, r2
 800bc78:	f107 0210 	add.w	r2, r7, #16
 800bc7c:	1d15      	adds	r5, r2, #4
 800bc7e:	f107 0210 	add.w	r2, r7, #16
 800bc82:	1c54      	adds	r4, r2, #1
 800bc84:	f107 010c 	add.w	r1, r7, #12
 800bc88:	f107 0210 	add.w	r2, r7, #16
 800bc8c:	1c90      	adds	r0, r2, #2
 800bc8e:	9604      	str	r6, [sp, #16]
 800bc90:	9303      	str	r3, [sp, #12]
 800bc92:	f107 0310 	add.w	r3, r7, #16
 800bc96:	330c      	adds	r3, #12
 800bc98:	9302      	str	r3, [sp, #8]
 800bc9a:	f107 0310 	add.w	r3, r7, #16
 800bc9e:	3308      	adds	r3, #8
 800bca0:	9301      	str	r3, [sp, #4]
 800bca2:	f107 0320 	add.w	r3, r7, #32
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	462b      	mov	r3, r5
 800bcaa:	4622      	mov	r2, r4
 800bcac:	f000 fd5a 	bl	800c764 <MQTTDeserialize_publish>
 800bcb0:	4603      	mov	r3, r0
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	f040 8090 	bne.w	800bdd8 <cycle+0x1d4>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	b2db      	uxtb	r3, r3
 800bcbc:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800bcbe:	f107 0210 	add.w	r2, r7, #16
 800bcc2:	f107 0320 	add.w	r3, r7, #32
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	6878      	ldr	r0, [r7, #4]
 800bcca:	f7ff fea9 	bl	800ba20 <deliverMessage>
            if (msg.qos != QOS0)
 800bcce:	7c3b      	ldrb	r3, [r7, #16]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d074      	beq.n	800bdbe <cycle+0x1ba>
            {
                if (msg.qos == QOS1)
 800bcd4:	7c3b      	ldrb	r3, [r7, #16]
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d10c      	bne.n	800bcf4 <cycle+0xf0>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	6918      	ldr	r0, [r3, #16]
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	689b      	ldr	r3, [r3, #8]
 800bce2:	4619      	mov	r1, r3
 800bce4:	8abb      	ldrh	r3, [r7, #20]
 800bce6:	9300      	str	r3, [sp, #0]
 800bce8:	2300      	movs	r3, #0
 800bcea:	2204      	movs	r2, #4
 800bcec:	f001 f893 	bl	800ce16 <MQTTSerialize_ack>
 800bcf0:	6378      	str	r0, [r7, #52]	; 0x34
 800bcf2:	e00e      	b.n	800bd12 <cycle+0x10e>
                else if (msg.qos == QOS2)
 800bcf4:	7c3b      	ldrb	r3, [r7, #16]
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d10b      	bne.n	800bd12 <cycle+0x10e>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6918      	ldr	r0, [r3, #16]
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	4619      	mov	r1, r3
 800bd04:	8abb      	ldrh	r3, [r7, #20]
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	2300      	movs	r3, #0
 800bd0a:	2205      	movs	r2, #5
 800bd0c:	f001 f883 	bl	800ce16 <MQTTSerialize_ack>
 800bd10:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 800bd12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	dc03      	bgt.n	800bd20 <cycle+0x11c>
                    rc = FAILURE;
 800bd18:	f04f 33ff 	mov.w	r3, #4294967295
 800bd1c:	633b      	str	r3, [r7, #48]	; 0x30
 800bd1e:	e005      	b.n	800bd2c <cycle+0x128>
                else
                    rc = sendPacket(c, len, timer);
 800bd20:	683a      	ldr	r2, [r7, #0]
 800bd22:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f7ff fcbc 	bl	800b6a2 <sendPacket>
 800bd2a:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800bd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd32:	d144      	bne.n	800bdbe <cycle+0x1ba>
                    goto exit; // there was a problem
 800bd34:	e053      	b.n	800bdde <cycle+0x1da>
        case PUBREC:
        case PUBREL:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	695c      	ldr	r4, [r3, #20]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	f107 020a 	add.w	r2, r7, #10
 800bd42:	f107 0109 	add.w	r1, r7, #9
 800bd46:	f107 0008 	add.w	r0, r7, #8
 800bd4a:	9300      	str	r3, [sp, #0]
 800bd4c:	4623      	mov	r3, r4
 800bd4e:	f000 fd7b 	bl	800c848 <MQTTDeserialize_ack>
 800bd52:	4603      	mov	r3, r0
 800bd54:	2b01      	cmp	r3, #1
 800bd56:	d003      	beq.n	800bd60 <cycle+0x15c>
                rc = FAILURE;
 800bd58:	f04f 33ff 	mov.w	r3, #4294967295
 800bd5c:	633b      	str	r3, [r7, #48]	; 0x30
 800bd5e:	e023      	b.n	800bda8 <cycle+0x1a4>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size,
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6918      	ldr	r0, [r3, #16]
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	4619      	mov	r1, r3
 800bd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd6c:	2b05      	cmp	r3, #5
 800bd6e:	d101      	bne.n	800bd74 <cycle+0x170>
 800bd70:	2206      	movs	r2, #6
 800bd72:	e000      	b.n	800bd76 <cycle+0x172>
 800bd74:	2207      	movs	r2, #7
 800bd76:	897b      	ldrh	r3, [r7, #10]
 800bd78:	9300      	str	r3, [sp, #0]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	f001 f84b 	bl	800ce16 <MQTTSerialize_ack>
 800bd80:	6378      	str	r0, [r7, #52]	; 0x34
 800bd82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	dc03      	bgt.n	800bd90 <cycle+0x18c>
                (packet_type == PUBREC) ? PUBREL : PUBCOMP, 0, mypacketid)) <= 0)
                rc = FAILURE;
 800bd88:	f04f 33ff 	mov.w	r3, #4294967295
 800bd8c:	633b      	str	r3, [r7, #48]	; 0x30
 800bd8e:	e00b      	b.n	800bda8 <cycle+0x1a4>
            else if ((rc = sendPacket(c, len, timer)) != MQSUCCESS) // send the PUBREL packet
 800bd90:	683a      	ldr	r2, [r7, #0]
 800bd92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800bd94:	6878      	ldr	r0, [r7, #4]
 800bd96:	f7ff fc84 	bl	800b6a2 <sendPacket>
 800bd9a:	6338      	str	r0, [r7, #48]	; 0x30
 800bd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d002      	beq.n	800bda8 <cycle+0x1a4>
                rc = FAILURE; // there was a problem
 800bda2:	f04f 33ff 	mov.w	r3, #4294967295
 800bda6:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bdae:	d108      	bne.n	800bdc2 <cycle+0x1be>
                goto exit; // there was a problem
 800bdb0:	e015      	b.n	800bdde <cycle+0x1da>
        }

        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	771a      	strb	r2, [r3, #28]
            break;
 800bdb8:	e004      	b.n	800bdc4 <cycle+0x1c0>
            break;
 800bdba:	bf00      	nop
 800bdbc:	e002      	b.n	800bdc4 <cycle+0x1c0>
            break;
 800bdbe:	bf00      	nop
 800bdc0:	e000      	b.n	800bdc4 <cycle+0x1c0>
            break;
 800bdc2:	bf00      	nop
    }

    if (keepalive(c) != MQSUCCESS) {
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f7ff fe93 	bl	800baf0 <keepalive>
 800bdca:	4603      	mov	r3, r0
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d005      	beq.n	800bddc <cycle+0x1d8>
        //check only keepalive FAILURE status so that previous FAILURE status can be considered as FAULT
        rc = FAILURE;
 800bdd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bdd4:	633b      	str	r3, [r7, #48]	; 0x30
 800bdd6:	e002      	b.n	800bdde <cycle+0x1da>
                goto exit;
 800bdd8:	bf00      	nop
 800bdda:	e000      	b.n	800bdde <cycle+0x1da>
    }

exit:
 800bddc:	bf00      	nop
    if (rc == MQSUCCESS)
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d102      	bne.n	800bdea <cycle+0x1e6>
        rc = packet_type;
 800bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bde6:	633b      	str	r3, [r7, #48]	; 0x30
 800bde8:	e006      	b.n	800bdf8 <cycle+0x1f4>
    else if (c->isconnected)
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	6a1b      	ldr	r3, [r3, #32]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <cycle+0x1f4>
        MQTTCloseSession(c);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f7ff fef0 	bl	800bbd8 <MQTTCloseSession>
    return rc;
 800bdf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800bdfa:	4618      	mov	r0, r3
 800bdfc:	373c      	adds	r7, #60	; 0x3c
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be02:	bf00      	nop

0800be04 <MQTTYield>:


int MQTTYield(MQTTClient* c, int timeout_ms)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
 800be0c:	6039      	str	r1, [r7, #0]
    int rc = MQSUCCESS;
 800be0e:	2300      	movs	r3, #0
 800be10:	617b      	str	r3, [r7, #20]
    Timer timer;

    TimerInit(&timer);
 800be12:	f107 030c 	add.w	r3, r7, #12
 800be16:	4618      	mov	r0, r3
 800be18:	f7f5 ff03 	bl	8001c22 <TimerInit>
    TimerCountdownMS(&timer, timeout_ms);
 800be1c:	683a      	ldr	r2, [r7, #0]
 800be1e:	f107 030c 	add.w	r3, r7, #12
 800be22:	4611      	mov	r1, r2
 800be24:	4618      	mov	r0, r3
 800be26:	f7f5 fea0 	bl	8001b6a <TimerCountdownMS>

	  do
    {
        if (cycle(c, &timer) < 0)
 800be2a:	f107 030c 	add.w	r3, r7, #12
 800be2e:	4619      	mov	r1, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff fee7 	bl	800bc04 <cycle>
 800be36:	4603      	mov	r3, r0
 800be38:	2b00      	cmp	r3, #0
 800be3a:	da03      	bge.n	800be44 <MQTTYield+0x40>
        {
            rc = FAILURE;
 800be3c:	f04f 33ff 	mov.w	r3, #4294967295
 800be40:	617b      	str	r3, [r7, #20]
            break;
 800be42:	e007      	b.n	800be54 <MQTTYield+0x50>
        }
  	} while (!TimerIsExpired(&timer));
 800be44:	f107 030c 	add.w	r3, r7, #12
 800be48:	4618      	mov	r0, r3
 800be4a:	f7f5 fed9 	bl	8001c00 <TimerIsExpired>
 800be4e:	4603      	mov	r3, r0
 800be50:	2b00      	cmp	r3, #0
 800be52:	d0ea      	beq.n	800be2a <MQTTYield+0x26>

    return rc;
 800be54:	697b      	ldr	r3, [r7, #20]
}
 800be56:	4618      	mov	r0, r3
 800be58:	3718      	adds	r7, #24
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}

0800be5e <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800be5e:	b580      	push	{r7, lr}
 800be60:	b086      	sub	sp, #24
 800be62:	af00      	add	r7, sp, #0
 800be64:	60f8      	str	r0, [r7, #12]
 800be66:	60b9      	str	r1, [r7, #8]
 800be68:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800be6a:	f04f 33ff 	mov.w	r3, #4294967295
 800be6e:	617b      	str	r3, [r7, #20]

    do
    {
        if (TimerIsExpired(timer))
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f7f5 fec5 	bl	8001c00 <TimerIsExpired>
 800be76:	4603      	mov	r3, r0
 800be78:	2b00      	cmp	r3, #0
 800be7a:	d10c      	bne.n	800be96 <waitfor+0x38>
            break; // we timed out
        rc = cycle(c, timer);
 800be7c:	6879      	ldr	r1, [r7, #4]
 800be7e:	68f8      	ldr	r0, [r7, #12]
 800be80:	f7ff fec0 	bl	800bc04 <cycle>
 800be84:	6178      	str	r0, [r7, #20]
    }
    while (rc != packet_type && rc >= 0);
 800be86:	697a      	ldr	r2, [r7, #20]
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d004      	beq.n	800be98 <waitfor+0x3a>
 800be8e:	697b      	ldr	r3, [r7, #20]
 800be90:	2b00      	cmp	r3, #0
 800be92:	daed      	bge.n	800be70 <waitfor+0x12>
 800be94:	e000      	b.n	800be98 <waitfor+0x3a>
            break; // we timed out
 800be96:	bf00      	nop

    return rc;
 800be98:	697b      	ldr	r3, [r7, #20]
}
 800be9a:	4618      	mov	r0, r3
 800be9c:	3718      	adds	r7, #24
 800be9e:	46bd      	mov	sp, r7
 800bea0:	bd80      	pop	{r7, pc}
	...

0800bea4 <MQTTConnectWithResults>:




int MQTTConnectWithResults(MQTTClient* c, MQTTPacket_connectData* options, MQTTConnackData* data)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b09e      	sub	sp, #120	; 0x78
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
    Timer connect_timer;
    int rc = FAILURE;
 800beb0:	f04f 33ff 	mov.w	r3, #4294967295
 800beb4:	677b      	str	r3, [r7, #116]	; 0x74
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800beb6:	4a43      	ldr	r2, [pc, #268]	; (800bfc4 <MQTTConnectWithResults+0x120>)
 800beb8:	f107 0310 	add.w	r3, r7, #16
 800bebc:	4611      	mov	r1, r2
 800bebe:	2258      	movs	r2, #88	; 0x58
 800bec0:	4618      	mov	r0, r3
 800bec2:	f001 fea1 	bl	800dc08 <memcpy>
    int len = 0;
 800bec6:	2300      	movs	r3, #0
 800bec8:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (c->isconnected) /* don't send connect packet again if we are already connected */
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	6a1b      	ldr	r3, [r3, #32]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d164      	bne.n	800bf9c <MQTTConnectWithResults+0xf8>
		  goto exit;

    TimerInit(&connect_timer);
 800bed2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bed6:	4618      	mov	r0, r3
 800bed8:	f7f5 fea3 	bl	8001c22 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	685a      	ldr	r2, [r3, #4]
 800bee0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bee4:	4611      	mov	r1, r2
 800bee6:	4618      	mov	r0, r3
 800bee8:	f7f5 fe3f 	bl	8001b6a <TimerCountdownMS>

    if (options == 0)
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d102      	bne.n	800bef8 <MQTTConnectWithResults+0x54>
        options = &default_options; /* set default options if none were supplied */
 800bef2:	f107 0310 	add.w	r3, r7, #16
 800bef6:	60bb      	str	r3, [r7, #8]

    c->keepAliveInterval = options->keepAliveInterval;
 800bef8:	68bb      	ldr	r3, [r7, #8]
 800befa:	8b1b      	ldrh	r3, [r3, #24]
 800befc:	461a      	mov	r2, r3
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	619a      	str	r2, [r3, #24]
    c->cleansession = options->cleansession;
 800bf02:	68bb      	ldr	r3, [r7, #8]
 800bf04:	7e9b      	ldrb	r3, [r3, #26]
 800bf06:	461a      	mov	r2, r3
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	625a      	str	r2, [r3, #36]	; 0x24
    TimerCountdown(&c->last_received, c->keepAliveInterval);
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	4619      	mov	r1, r3
 800bf18:	4610      	mov	r0, r2
 800bf1a:	f7f5 fe37 	bl	8001b8c <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	6918      	ldr	r0, [r3, #16]
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	68ba      	ldr	r2, [r7, #8]
 800bf28:	4619      	mov	r1, r3
 800bf2a:	f000 fa93 	bl	800c454 <MQTTSerialize_connect>
 800bf2e:	6738      	str	r0, [r7, #112]	; 0x70
 800bf30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	dd34      	ble.n	800bfa0 <MQTTConnectWithResults+0xfc>
        goto exit;
    if ((rc = sendPacket(c, len, &connect_timer)) != MQSUCCESS)  // send the connect packet
 800bf36:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f7ff fbaf 	bl	800b6a2 <sendPacket>
 800bf44:	6778      	str	r0, [r7, #116]	; 0x74
 800bf46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d12b      	bne.n	800bfa4 <MQTTConnectWithResults+0x100>
        goto exit; // there was a problem

    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800bf4c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800bf50:	461a      	mov	r2, r3
 800bf52:	2102      	movs	r1, #2
 800bf54:	68f8      	ldr	r0, [r7, #12]
 800bf56:	f7ff ff82 	bl	800be5e <waitfor>
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2b02      	cmp	r3, #2
 800bf5e:	d119      	bne.n	800bf94 <MQTTConnectWithResults+0xf0>
    {
        data->rc = 0;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	701a      	strb	r2, [r3, #0]
        data->sessionPresent = 0;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2200      	movs	r2, #0
 800bf6a:	705a      	strb	r2, [r3, #1]
        if (MQTTDeserialize_connack(&data->sessionPresent, &data->rc, c->readbuf, c->readbuf_size) == 1)
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	1c58      	adds	r0, r3, #1
 800bf70:	6879      	ldr	r1, [r7, #4]
 800bf72:	68fb      	ldr	r3, [r7, #12]
 800bf74:	695a      	ldr	r2, [r3, #20]
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	68db      	ldr	r3, [r3, #12]
 800bf7a:	f000 fb57 	bl	800c62c <MQTTDeserialize_connack>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b01      	cmp	r3, #1
 800bf82:	d103      	bne.n	800bf8c <MQTTConnectWithResults+0xe8>
            rc = data->rc;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	781b      	ldrb	r3, [r3, #0]
 800bf88:	677b      	str	r3, [r7, #116]	; 0x74
 800bf8a:	e00c      	b.n	800bfa6 <MQTTConnectWithResults+0x102>
        else
            rc = FAILURE;
 800bf8c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf90:	677b      	str	r3, [r7, #116]	; 0x74
 800bf92:	e008      	b.n	800bfa6 <MQTTConnectWithResults+0x102>
    }
    else
        rc = FAILURE;
 800bf94:	f04f 33ff 	mov.w	r3, #4294967295
 800bf98:	677b      	str	r3, [r7, #116]	; 0x74
 800bf9a:	e004      	b.n	800bfa6 <MQTTConnectWithResults+0x102>
		  goto exit;
 800bf9c:	bf00      	nop
 800bf9e:	e002      	b.n	800bfa6 <MQTTConnectWithResults+0x102>
        goto exit;
 800bfa0:	bf00      	nop
 800bfa2:	e000      	b.n	800bfa6 <MQTTConnectWithResults+0x102>
        goto exit; // there was a problem
 800bfa4:	bf00      	nop

exit:
    if (rc == MQSUCCESS)
 800bfa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d105      	bne.n	800bfb8 <MQTTConnectWithResults+0x114>
    {
        c->isconnected = 1;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	2201      	movs	r2, #1
 800bfb0:	621a      	str	r2, [r3, #32]
        c->ping_outstanding = 0;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	771a      	strb	r2, [r3, #28]

#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif

    return rc;
 800bfb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800bfba:	4618      	mov	r0, r3
 800bfbc:	3778      	adds	r7, #120	; 0x78
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bd80      	pop	{r7, pc}
 800bfc2:	bf00      	nop
 800bfc4:	080127f8 	.word	0x080127f8

0800bfc8 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800bfc8:	b580      	push	{r7, lr}
 800bfca:	b084      	sub	sp, #16
 800bfcc:	af00      	add	r7, sp, #0
 800bfce:	6078      	str	r0, [r7, #4]
 800bfd0:	6039      	str	r1, [r7, #0]
    MQTTConnackData data;
    return MQTTConnectWithResults(c, options, &data);
 800bfd2:	f107 030c 	add.w	r3, r7, #12
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	6839      	ldr	r1, [r7, #0]
 800bfda:	6878      	ldr	r0, [r7, #4]
 800bfdc:	f7ff ff62 	bl	800bea4 <MQTTConnectWithResults>
 800bfe0:	4603      	mov	r3, r0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <MQTTSetMessageHandler>:


int MQTTSetMessageHandler(MQTTClient* c, const char* topicFilter, messageHandler messageHandler)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b086      	sub	sp, #24
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	60f8      	str	r0, [r7, #12]
 800bff2:	60b9      	str	r1, [r7, #8]
 800bff4:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800bff6:	f04f 33ff 	mov.w	r3, #4294967295
 800bffa:	617b      	str	r3, [r7, #20]
    int i = -1;
 800bffc:	f04f 33ff 	mov.w	r3, #4294967295
 800c000:	613b      	str	r3, [r7, #16]

    /* first check for an existing matching slot */
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c002:	2300      	movs	r3, #0
 800c004:	613b      	str	r3, [r7, #16]
 800c006:	e028      	b.n	800c05a <MQTTSetMessageHandler+0x70>
    {
        if (c->messageHandlers[i].topicFilter != NULL && strcmp(c->messageHandlers[i].topicFilter, topicFilter) == 0)
 800c008:	68fb      	ldr	r3, [r7, #12]
 800c00a:	693a      	ldr	r2, [r7, #16]
 800c00c:	3205      	adds	r2, #5
 800c00e:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d01e      	beq.n	800c054 <MQTTSetMessageHandler+0x6a>
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	693a      	ldr	r2, [r7, #16]
 800c01a:	3205      	adds	r2, #5
 800c01c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800c020:	68b9      	ldr	r1, [r7, #8]
 800c022:	4618      	mov	r0, r3
 800c024:	f7f4 f8d4 	bl	80001d0 <strcmp>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d112      	bne.n	800c054 <MQTTSetMessageHandler+0x6a>
        {
            if (messageHandler == NULL) /* remove existing */
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d10c      	bne.n	800c04e <MQTTSetMessageHandler+0x64>
            {
                c->messageHandlers[i].topicFilter = NULL;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	693a      	ldr	r2, [r7, #16]
 800c038:	3205      	adds	r2, #5
 800c03a:	2100      	movs	r1, #0
 800c03c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                c->messageHandlers[i].fp = NULL;
 800c040:	68fa      	ldr	r2, [r7, #12]
 800c042:	693b      	ldr	r3, [r7, #16]
 800c044:	3305      	adds	r3, #5
 800c046:	00db      	lsls	r3, r3, #3
 800c048:	4413      	add	r3, r2
 800c04a:	2200      	movs	r2, #0
 800c04c:	605a      	str	r2, [r3, #4]
            }
            rc = MQSUCCESS; /* return i when adding new subscription */
 800c04e:	2300      	movs	r3, #0
 800c050:	617b      	str	r3, [r7, #20]
            break;
 800c052:	e005      	b.n	800c060 <MQTTSetMessageHandler+0x76>
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	3301      	adds	r3, #1
 800c058:	613b      	str	r3, [r7, #16]
 800c05a:	693b      	ldr	r3, [r7, #16]
 800c05c:	2b04      	cmp	r3, #4
 800c05e:	ddd3      	ble.n	800c008 <MQTTSetMessageHandler+0x1e>
        }
    }
    /* if no existing, look for empty slot (unless we are removing) */
    if (messageHandler != NULL) {
 800c060:	687b      	ldr	r3, [r7, #4]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d026      	beq.n	800c0b4 <MQTTSetMessageHandler+0xca>
        if (rc == FAILURE)
 800c066:	697b      	ldr	r3, [r7, #20]
 800c068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c06c:	d112      	bne.n	800c094 <MQTTSetMessageHandler+0xaa>
        {
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c06e:	2300      	movs	r3, #0
 800c070:	613b      	str	r3, [r7, #16]
 800c072:	e00c      	b.n	800c08e <MQTTSetMessageHandler+0xa4>
            {
                if (c->messageHandlers[i].topicFilter == NULL)
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	693a      	ldr	r2, [r7, #16]
 800c078:	3205      	adds	r2, #5
 800c07a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d102      	bne.n	800c088 <MQTTSetMessageHandler+0x9e>
                {
                    rc = MQSUCCESS;
 800c082:	2300      	movs	r3, #0
 800c084:	617b      	str	r3, [r7, #20]
                    break;
 800c086:	e005      	b.n	800c094 <MQTTSetMessageHandler+0xaa>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	3301      	adds	r3, #1
 800c08c:	613b      	str	r3, [r7, #16]
 800c08e:	693b      	ldr	r3, [r7, #16]
 800c090:	2b04      	cmp	r3, #4
 800c092:	ddef      	ble.n	800c074 <MQTTSetMessageHandler+0x8a>
                }
            }
        }
        if (i < MAX_MESSAGE_HANDLERS)
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	2b04      	cmp	r3, #4
 800c098:	dc0c      	bgt.n	800c0b4 <MQTTSetMessageHandler+0xca>
        {
            c->messageHandlers[i].topicFilter = topicFilter;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	693a      	ldr	r2, [r7, #16]
 800c09e:	3205      	adds	r2, #5
 800c0a0:	68b9      	ldr	r1, [r7, #8]
 800c0a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            c->messageHandlers[i].fp = messageHandler;
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	3305      	adds	r3, #5
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	4413      	add	r3, r2
 800c0b0:	687a      	ldr	r2, [r7, #4]
 800c0b2:	605a      	str	r2, [r3, #4]
        }
    }
    return rc;
 800c0b4:	697b      	ldr	r3, [r7, #20]
}
 800c0b6:	4618      	mov	r0, r3
 800c0b8:	3718      	adds	r7, #24
 800c0ba:	46bd      	mov	sp, r7
 800c0bc:	bd80      	pop	{r7, pc}

0800c0be <MQTTSubscribeWithResults>:


int MQTTSubscribeWithResults(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler, MQTTSubackData* data)
{
 800c0be:	b5b0      	push	{r4, r5, r7, lr}
 800c0c0:	b092      	sub	sp, #72	; 0x48
 800c0c2:	af04      	add	r7, sp, #16
 800c0c4:	60f8      	str	r0, [r7, #12]
 800c0c6:	60b9      	str	r1, [r7, #8]
 800c0c8:	603b      	str	r3, [r7, #0]
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;
 800c0ce:	f04f 33ff 	mov.w	r3, #4294967295
 800c0d2:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    int len = 0;
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	633b      	str	r3, [r7, #48]	; 0x30
    MQTTString topic = MQTTString_initializer;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	61fb      	str	r3, [r7, #28]
 800c0dc:	2300      	movs	r3, #0
 800c0de:	623b      	str	r3, [r7, #32]
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	61fb      	str	r3, [r7, #28]

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6a1b      	ldr	r3, [r3, #32]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d063      	beq.n	800c1b8 <MQTTSubscribeWithResults+0xfa>
		    goto exit;

    TimerInit(&timer);
 800c0f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	f7f5 fd94 	bl	8001c22 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	685a      	ldr	r2, [r3, #4]
 800c0fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c102:	4611      	mov	r1, r2
 800c104:	4618      	mov	r0, r3
 800c106:	f7f5 fd30 	bl	8001b6a <TimerCountdownMS>

    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	691c      	ldr	r4, [r3, #16]
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	461d      	mov	r5, r3
 800c114:	68f8      	ldr	r0, [r7, #12]
 800c116:	f7ff faab 	bl	800b670 <getNextPacketId>
 800c11a:	4603      	mov	r3, r0
 800c11c:	b29a      	uxth	r2, r3
 800c11e:	1dfb      	adds	r3, r7, #7
 800c120:	9302      	str	r3, [sp, #8]
 800c122:	f107 031c 	add.w	r3, r7, #28
 800c126:	9301      	str	r3, [sp, #4]
 800c128:	2301      	movs	r3, #1
 800c12a:	9300      	str	r3, [sp, #0]
 800c12c:	4613      	mov	r3, r2
 800c12e:	2200      	movs	r2, #0
 800c130:	4629      	mov	r1, r5
 800c132:	4620      	mov	r0, r4
 800c134:	f000 feeb 	bl	800cf0e <MQTTSerialize_subscribe>
 800c138:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	dd3d      	ble.n	800c1bc <MQTTSubscribeWithResults+0xfe>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800c140:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c144:	461a      	mov	r2, r3
 800c146:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c148:	68f8      	ldr	r0, [r7, #12]
 800c14a:	f7ff faaa 	bl	800b6a2 <sendPacket>
 800c14e:	6378      	str	r0, [r7, #52]	; 0x34
 800c150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c152:	2b00      	cmp	r3, #0
 800c154:	d134      	bne.n	800c1c0 <MQTTSubscribeWithResults+0x102>
        goto exit;             // there was a problem

    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback
 800c156:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c15a:	461a      	mov	r2, r3
 800c15c:	2109      	movs	r1, #9
 800c15e:	68f8      	ldr	r0, [r7, #12]
 800c160:	f7ff fe7d 	bl	800be5e <waitfor>
 800c164:	4603      	mov	r3, r0
 800c166:	2b09      	cmp	r3, #9
 800c168:	d122      	bne.n	800c1b0 <MQTTSubscribeWithResults+0xf2>
    {
        int count = 0;
 800c16a:	2300      	movs	r3, #0
 800c16c:	61bb      	str	r3, [r7, #24]
        unsigned short mypacketid;
        data->grantedQoS = QOS0;
 800c16e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c170:	2200      	movs	r2, #0
 800c172:	701a      	strb	r2, [r3, #0]
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, (int*)&data->grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800c174:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	695b      	ldr	r3, [r3, #20]
 800c17a:	68fa      	ldr	r2, [r7, #12]
 800c17c:	68d2      	ldr	r2, [r2, #12]
 800c17e:	4614      	mov	r4, r2
 800c180:	f107 0218 	add.w	r2, r7, #24
 800c184:	f107 0016 	add.w	r0, r7, #22
 800c188:	9401      	str	r4, [sp, #4]
 800c18a:	9300      	str	r3, [sp, #0]
 800c18c:	460b      	mov	r3, r1
 800c18e:	2101      	movs	r1, #1
 800c190:	f000 ff39 	bl	800d006 <MQTTDeserialize_suback>
 800c194:	4603      	mov	r3, r0
 800c196:	2b01      	cmp	r3, #1
 800c198:	d113      	bne.n	800c1c2 <MQTTSubscribeWithResults+0x104>
        {
            if (data->grantedQoS != 0x80)
 800c19a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c19c:	781b      	ldrb	r3, [r3, #0]
 800c19e:	2b80      	cmp	r3, #128	; 0x80
 800c1a0:	d00f      	beq.n	800c1c2 <MQTTSubscribeWithResults+0x104>
                rc = MQTTSetMessageHandler(c, topicFilter, messageHandler);
 800c1a2:	683a      	ldr	r2, [r7, #0]
 800c1a4:	68b9      	ldr	r1, [r7, #8]
 800c1a6:	68f8      	ldr	r0, [r7, #12]
 800c1a8:	f7ff ff1f 	bl	800bfea <MQTTSetMessageHandler>
 800c1ac:	6378      	str	r0, [r7, #52]	; 0x34
 800c1ae:	e008      	b.n	800c1c2 <MQTTSubscribeWithResults+0x104>
        }
    }
    else
        rc = FAILURE;
 800c1b0:	f04f 33ff 	mov.w	r3, #4294967295
 800c1b4:	637b      	str	r3, [r7, #52]	; 0x34
 800c1b6:	e004      	b.n	800c1c2 <MQTTSubscribeWithResults+0x104>
		    goto exit;
 800c1b8:	bf00      	nop
 800c1ba:	e002      	b.n	800c1c2 <MQTTSubscribeWithResults+0x104>
        goto exit;
 800c1bc:	bf00      	nop
 800c1be:	e000      	b.n	800c1c2 <MQTTSubscribeWithResults+0x104>
        goto exit;             // there was a problem
 800c1c0:	bf00      	nop

exit:
    if (rc == FAILURE)
 800c1c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1c8:	d102      	bne.n	800c1d0 <MQTTSubscribeWithResults+0x112>
        MQTTCloseSession(c);
 800c1ca:	68f8      	ldr	r0, [r7, #12]
 800c1cc:	f7ff fd04 	bl	800bbd8 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 800c1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3738      	adds	r7, #56	; 0x38
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bdb0      	pop	{r4, r5, r7, pc}

0800c1da <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos,
       messageHandler messageHandler)
{
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b088      	sub	sp, #32
 800c1de:	af02      	add	r7, sp, #8
 800c1e0:	60f8      	str	r0, [r7, #12]
 800c1e2:	60b9      	str	r1, [r7, #8]
 800c1e4:	603b      	str	r3, [r7, #0]
 800c1e6:	4613      	mov	r3, r2
 800c1e8:	71fb      	strb	r3, [r7, #7]
    MQTTSubackData data;
    return MQTTSubscribeWithResults(c, topicFilter, qos, messageHandler, &data);
 800c1ea:	79fa      	ldrb	r2, [r7, #7]
 800c1ec:	f107 0314 	add.w	r3, r7, #20
 800c1f0:	9300      	str	r3, [sp, #0]
 800c1f2:	683b      	ldr	r3, [r7, #0]
 800c1f4:	68b9      	ldr	r1, [r7, #8]
 800c1f6:	68f8      	ldr	r0, [r7, #12]
 800c1f8:	f7ff ff61 	bl	800c0be <MQTTSubscribeWithResults>
 800c1fc:	4603      	mov	r3, r0
}
 800c1fe:	4618      	mov	r0, r3
 800c200:	3718      	adds	r7, #24
 800c202:	46bd      	mov	sp, r7
 800c204:	bd80      	pop	{r7, pc}

0800c206 <MQTTPublish>:
    return rc;
}


int MQTTPublish(MQTTClient* c, const char* topicName, MQTTMessage* message)
{
 800c206:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c208:	b097      	sub	sp, #92	; 0x5c
 800c20a:	af08      	add	r7, sp, #32
 800c20c:	60f8      	str	r0, [r7, #12]
 800c20e:	60b9      	str	r1, [r7, #8]
 800c210:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800c212:	f04f 33ff 	mov.w	r3, #4294967295
 800c216:	637b      	str	r3, [r7, #52]	; 0x34
    Timer timer;
    MQTTString topic = MQTTString_initializer;
 800c218:	2300      	movs	r3, #0
 800c21a:	61fb      	str	r3, [r7, #28]
 800c21c:	2300      	movs	r3, #0
 800c21e:	623b      	str	r3, [r7, #32]
 800c220:	2300      	movs	r3, #0
 800c222:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicName;
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	61fb      	str	r3, [r7, #28]
    int len = 0;
 800c228:	2300      	movs	r3, #0
 800c22a:	633b      	str	r3, [r7, #48]	; 0x30

#if defined(MQTT_TASK)
	  MutexLock(&c->mutex);
#endif
	  if (!c->isconnected)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	6a1b      	ldr	r3, [r3, #32]
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 809b 	beq.w	800c36c <MQTTPublish+0x166>
		    goto exit;

    TimerInit(&timer);
 800c236:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7f5 fcf1 	bl	8001c22 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	685a      	ldr	r2, [r3, #4]
 800c244:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c248:	4611      	mov	r1, r2
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7f5 fc8d 	bl	8001b6a <TimerCountdownMS>

    if (message->qos == QOS1 || message->qos == QOS2)
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	781b      	ldrb	r3, [r3, #0]
 800c254:	2b01      	cmp	r3, #1
 800c256:	d003      	beq.n	800c260 <MQTTPublish+0x5a>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	2b02      	cmp	r3, #2
 800c25e:	d106      	bne.n	800c26e <MQTTPublish+0x68>
        message->id = getNextPacketId(c);
 800c260:	68f8      	ldr	r0, [r7, #12]
 800c262:	f7ff fa05 	bl	800b670 <getNextPacketId>
 800c266:	4603      	mov	r3, r0
 800c268:	b29a      	uxth	r2, r3
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	809a      	strh	r2, [r3, #4]

    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	691b      	ldr	r3, [r3, #16]
 800c272:	603b      	str	r3, [r7, #0]
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	469c      	mov	ip, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	781b      	ldrb	r3, [r3, #0]
 800c27e:	469e      	mov	lr, r3
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	785d      	ldrb	r5, [r3, #1]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	889e      	ldrh	r6, [r3, #4]
              topic, (unsigned char*)message->payload, message->payloadlen);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	689b      	ldr	r3, [r3, #8]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	68d2      	ldr	r2, [r2, #12]
    len = MQTTSerialize_publish(c->buf, c->buf_size, 0, message->qos, message->retained, message->id,
 800c290:	9206      	str	r2, [sp, #24]
 800c292:	9305      	str	r3, [sp, #20]
 800c294:	ac02      	add	r4, sp, #8
 800c296:	f107 031c 	add.w	r3, r7, #28
 800c29a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c29e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800c2a2:	9601      	str	r6, [sp, #4]
 800c2a4:	9500      	str	r5, [sp, #0]
 800c2a6:	4673      	mov	r3, lr
 800c2a8:	2200      	movs	r2, #0
 800c2aa:	4661      	mov	r1, ip
 800c2ac:	6838      	ldr	r0, [r7, #0]
 800c2ae:	f000 fd3c 	bl	800cd2a <MQTTSerialize_publish>
 800c2b2:	6338      	str	r0, [r7, #48]	; 0x30
    if (len <= 0)
 800c2b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	dd5a      	ble.n	800c370 <MQTTPublish+0x16a>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != MQSUCCESS) // send the subscribe packet
 800c2ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2be:	461a      	mov	r2, r3
 800c2c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7ff f9ed 	bl	800b6a2 <sendPacket>
 800c2c8:	6378      	str	r0, [r7, #52]	; 0x34
 800c2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d151      	bne.n	800c374 <MQTTPublish+0x16e>
        goto exit; // there was a problem

    if (message->qos == QOS1)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	781b      	ldrb	r3, [r3, #0]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d122      	bne.n	800c31e <MQTTPublish+0x118>
    {
        if (waitfor(c, PUBACK, &timer) == PUBACK)
 800c2d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c2dc:	461a      	mov	r2, r3
 800c2de:	2104      	movs	r1, #4
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f7ff fdbc 	bl	800be5e <waitfor>
 800c2e6:	4603      	mov	r3, r0
 800c2e8:	2b04      	cmp	r3, #4
 800c2ea:	d114      	bne.n	800c316 <MQTTPublish+0x110>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	695c      	ldr	r4, [r3, #20]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	f107 021a 	add.w	r2, r7, #26
 800c2f8:	f107 0119 	add.w	r1, r7, #25
 800c2fc:	f107 0018 	add.w	r0, r7, #24
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	4623      	mov	r3, r4
 800c304:	f000 faa0 	bl	800c848 <MQTTDeserialize_ack>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b01      	cmp	r3, #1
 800c30c:	d035      	beq.n	800c37a <MQTTPublish+0x174>
                rc = FAILURE;
 800c30e:	f04f 33ff 	mov.w	r3, #4294967295
 800c312:	637b      	str	r3, [r7, #52]	; 0x34
 800c314:	e031      	b.n	800c37a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c316:	f04f 33ff 	mov.w	r3, #4294967295
 800c31a:	637b      	str	r3, [r7, #52]	; 0x34
 800c31c:	e02d      	b.n	800c37a <MQTTPublish+0x174>
    }
    else if (message->qos == QOS2)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	781b      	ldrb	r3, [r3, #0]
 800c322:	2b02      	cmp	r3, #2
 800c324:	d128      	bne.n	800c378 <MQTTPublish+0x172>
    {
        if (waitfor(c, PUBCOMP, &timer) == PUBCOMP)
 800c326:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c32a:	461a      	mov	r2, r3
 800c32c:	2107      	movs	r1, #7
 800c32e:	68f8      	ldr	r0, [r7, #12]
 800c330:	f7ff fd95 	bl	800be5e <waitfor>
 800c334:	4603      	mov	r3, r0
 800c336:	2b07      	cmp	r3, #7
 800c338:	d114      	bne.n	800c364 <MQTTPublish+0x15e>
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	695c      	ldr	r4, [r3, #20]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	68db      	ldr	r3, [r3, #12]
 800c342:	f107 0216 	add.w	r2, r7, #22
 800c346:	f107 0115 	add.w	r1, r7, #21
 800c34a:	f107 0014 	add.w	r0, r7, #20
 800c34e:	9300      	str	r3, [sp, #0]
 800c350:	4623      	mov	r3, r4
 800c352:	f000 fa79 	bl	800c848 <MQTTDeserialize_ack>
 800c356:	4603      	mov	r3, r0
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d00e      	beq.n	800c37a <MQTTPublish+0x174>
                rc = FAILURE;
 800c35c:	f04f 33ff 	mov.w	r3, #4294967295
 800c360:	637b      	str	r3, [r7, #52]	; 0x34
 800c362:	e00a      	b.n	800c37a <MQTTPublish+0x174>
        }
        else
            rc = FAILURE;
 800c364:	f04f 33ff 	mov.w	r3, #4294967295
 800c368:	637b      	str	r3, [r7, #52]	; 0x34
 800c36a:	e006      	b.n	800c37a <MQTTPublish+0x174>
		    goto exit;
 800c36c:	bf00      	nop
 800c36e:	e004      	b.n	800c37a <MQTTPublish+0x174>
        goto exit;
 800c370:	bf00      	nop
 800c372:	e002      	b.n	800c37a <MQTTPublish+0x174>
        goto exit; // there was a problem
 800c374:	bf00      	nop
 800c376:	e000      	b.n	800c37a <MQTTPublish+0x174>
    }

exit:
 800c378:	bf00      	nop
    if (rc == FAILURE)
 800c37a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c37c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c380:	d102      	bne.n	800c388 <MQTTPublish+0x182>
        MQTTCloseSession(c);
 800c382:	68f8      	ldr	r0, [r7, #12]
 800c384:	f7ff fc28 	bl	800bbd8 <MQTTCloseSession>
#if defined(MQTT_TASK)
	  MutexUnlock(&c->mutex);
#endif
    return rc;
 800c388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	373c      	adds	r7, #60	; 0x3c
 800c38e:	46bd      	mov	sp, r7
 800c390:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c392 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800c392:	b590      	push	{r4, r7, lr}
 800c394:	b085      	sub	sp, #20
 800c396:	af00      	add	r7, sp, #0
 800c398:	6078      	str	r0, [r7, #4]
	int len = 0;
 800c39a:	2300      	movs	r3, #0
 800c39c:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	7a1b      	ldrb	r3, [r3, #8]
 800c3a2:	2b03      	cmp	r3, #3
 800c3a4:	d102      	bne.n	800c3ac <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	60fb      	str	r3, [r7, #12]
 800c3aa:	e005      	b.n	800c3b8 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	7a1b      	ldrb	r3, [r3, #8]
 800c3b0:	2b04      	cmp	r3, #4
 800c3b2:	d101      	bne.n	800c3b8 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800c3b4:	230a      	movs	r3, #10
 800c3b6:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	330c      	adds	r3, #12
 800c3bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3c0:	f000 fc43 	bl	800cc4a <MQTTstrlen>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	3302      	adds	r3, #2
 800c3c8:	68fa      	ldr	r2, [r7, #12]
 800c3ca:	4413      	add	r3, r2
 800c3cc:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	7edb      	ldrb	r3, [r3, #27]
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d013      	beq.n	800c3fe <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	3324      	adds	r3, #36	; 0x24
 800c3da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3de:	f000 fc34 	bl	800cc4a <MQTTstrlen>
 800c3e2:	4603      	mov	r3, r0
 800c3e4:	1c9c      	adds	r4, r3, #2
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	3330      	adds	r3, #48	; 0x30
 800c3ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c3ee:	f000 fc2c 	bl	800cc4a <MQTTstrlen>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	4423      	add	r3, r4
 800c3f6:	3302      	adds	r3, #2
 800c3f8:	68fa      	ldr	r2, [r7, #12]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c402:	2b00      	cmp	r3, #0
 800c404:	d103      	bne.n	800c40e <MQTTSerialize_connectLength+0x7c>
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d00a      	beq.n	800c424 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	3340      	adds	r3, #64	; 0x40
 800c412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c416:	f000 fc18 	bl	800cc4a <MQTTstrlen>
 800c41a:	4603      	mov	r3, r0
 800c41c:	3302      	adds	r3, #2
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	4413      	add	r3, r2
 800c422:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d103      	bne.n	800c434 <MQTTSerialize_connectLength+0xa2>
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c430:	2b00      	cmp	r3, #0
 800c432:	d00a      	beq.n	800c44a <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	334c      	adds	r3, #76	; 0x4c
 800c438:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c43c:	f000 fc05 	bl	800cc4a <MQTTstrlen>
 800c440:	4603      	mov	r3, r0
 800c442:	3302      	adds	r3, #2
 800c444:	68fa      	ldr	r2, [r7, #12]
 800c446:	4413      	add	r3, r2
 800c448:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800c44a:	68fb      	ldr	r3, [r7, #12]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3714      	adds	r7, #20
 800c450:	46bd      	mov	sp, r7
 800c452:	bd90      	pop	{r4, r7, pc}

0800c454 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b08a      	sub	sp, #40	; 0x28
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800c464:	2300      	movs	r3, #0
 800c466:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800c468:	2300      	movs	r3, #0
 800c46a:	617b      	str	r3, [r7, #20]
	int len = 0;
 800c46c:	2300      	movs	r3, #0
 800c46e:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800c470:	f04f 33ff 	mov.w	r3, #4294967295
 800c474:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800c476:	6878      	ldr	r0, [r7, #4]
 800c478:	f7ff ff8b 	bl	800c392 <MQTTSerialize_connectLength>
 800c47c:	6238      	str	r0, [r7, #32]
 800c47e:	6a38      	ldr	r0, [r7, #32]
 800c480:	f000 fa98 	bl	800c9b4 <MQTTPacket_len>
 800c484:	4602      	mov	r2, r0
 800c486:	68bb      	ldr	r3, [r7, #8]
 800c488:	4293      	cmp	r3, r2
 800c48a:	da03      	bge.n	800c494 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c48c:	f06f 0301 	mvn.w	r3, #1
 800c490:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800c492:	e0c2      	b.n	800c61a <MQTTSerialize_connect+0x1c6>
	}

	header.byte = 0;
 800c494:	2300      	movs	r3, #0
 800c496:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800c498:	7e3b      	ldrb	r3, [r7, #24]
 800c49a:	2201      	movs	r2, #1
 800c49c:	f362 1307 	bfi	r3, r2, #4, #4
 800c4a0:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800c4a2:	7e3a      	ldrb	r2, [r7, #24]
 800c4a4:	f107 031c 	add.w	r3, r7, #28
 800c4a8:	4611      	mov	r1, r2
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f000 fb11 	bl	800cad2 <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800c4b0:	69fb      	ldr	r3, [r7, #28]
 800c4b2:	6a39      	ldr	r1, [r7, #32]
 800c4b4:	4618      	mov	r0, r3
 800c4b6:	f000 fa12 	bl	800c8de <MQTTPacket_encode>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	69fb      	ldr	r3, [r7, #28]
 800c4be:	4413      	add	r3, r2
 800c4c0:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	7a1b      	ldrb	r3, [r3, #8]
 800c4c6:	2b04      	cmp	r3, #4
 800c4c8:	d10c      	bne.n	800c4e4 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800c4ca:	f107 031c 	add.w	r3, r7, #28
 800c4ce:	4955      	ldr	r1, [pc, #340]	; (800c624 <MQTTSerialize_connect+0x1d0>)
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f000 fb3c 	bl	800cb4e <writeCString>
		writeChar(&ptr, (char) 4);
 800c4d6:	f107 031c 	add.w	r3, r7, #28
 800c4da:	2104      	movs	r1, #4
 800c4dc:	4618      	mov	r0, r3
 800c4de:	f000 faf8 	bl	800cad2 <writeChar>
 800c4e2:	e00b      	b.n	800c4fc <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800c4e4:	f107 031c 	add.w	r3, r7, #28
 800c4e8:	494f      	ldr	r1, [pc, #316]	; (800c628 <MQTTSerialize_connect+0x1d4>)
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f000 fb2f 	bl	800cb4e <writeCString>
		writeChar(&ptr, (char) 3);
 800c4f0:	f107 031c 	add.w	r3, r7, #28
 800c4f4:	2103      	movs	r1, #3
 800c4f6:	4618      	mov	r0, r3
 800c4f8:	f000 faeb 	bl	800cad2 <writeChar>
	}

	flags.all = 0;
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	7e9b      	ldrb	r3, [r3, #26]
 800c504:	f003 0301 	and.w	r3, r3, #1
 800c508:	b2da      	uxtb	r2, r3
 800c50a:	7d3b      	ldrb	r3, [r7, #20]
 800c50c:	f362 0341 	bfi	r3, r2, #1, #1
 800c510:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	7edb      	ldrb	r3, [r3, #27]
 800c516:	2b00      	cmp	r3, #0
 800c518:	bf14      	ite	ne
 800c51a:	2301      	movne	r3, #1
 800c51c:	2300      	moveq	r3, #0
 800c51e:	b2da      	uxtb	r2, r3
 800c520:	7d3b      	ldrb	r3, [r7, #20]
 800c522:	f362 0382 	bfi	r3, r2, #2, #1
 800c526:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800c528:	7d3b      	ldrb	r3, [r7, #20]
 800c52a:	f003 0304 	and.w	r3, r3, #4
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	2b00      	cmp	r3, #0
 800c532:	d013      	beq.n	800c55c <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c53a:	f003 0303 	and.w	r3, r3, #3
 800c53e:	b2da      	uxtb	r2, r3
 800c540:	7d3b      	ldrb	r3, [r7, #20]
 800c542:	f362 03c4 	bfi	r3, r2, #3, #2
 800c546:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	b2da      	uxtb	r2, r3
 800c554:	7d3b      	ldrb	r3, [r7, #20]
 800c556:	f362 1345 	bfi	r3, r2, #5, #1
 800c55a:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c560:	2b00      	cmp	r3, #0
 800c562:	d103      	bne.n	800c56c <MQTTSerialize_connect+0x118>
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d003      	beq.n	800c574 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800c56c:	7d3b      	ldrb	r3, [r7, #20]
 800c56e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c572:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c578:	2b00      	cmp	r3, #0
 800c57a:	d103      	bne.n	800c584 <MQTTSerialize_connect+0x130>
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c580:	2b00      	cmp	r3, #0
 800c582:	d003      	beq.n	800c58c <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800c584:	7d3b      	ldrb	r3, [r7, #20]
 800c586:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c58a:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800c58c:	7d3a      	ldrb	r2, [r7, #20]
 800c58e:	f107 031c 	add.w	r3, r7, #28
 800c592:	4611      	mov	r1, r2
 800c594:	4618      	mov	r0, r3
 800c596:	f000 fa9c 	bl	800cad2 <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	8b1b      	ldrh	r3, [r3, #24]
 800c59e:	461a      	mov	r2, r3
 800c5a0:	f107 031c 	add.w	r3, r7, #28
 800c5a4:	4611      	mov	r1, r2
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f000 faa8 	bl	800cafc <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f107 001c 	add.w	r0, r7, #28
 800c5b2:	330c      	adds	r3, #12
 800c5b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5b6:	f000 fae9 	bl	800cb8c <writeMQTTString>
	if (options->willFlag)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	7edb      	ldrb	r3, [r3, #27]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d00d      	beq.n	800c5de <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	f107 001c 	add.w	r0, r7, #28
 800c5c8:	3324      	adds	r3, #36	; 0x24
 800c5ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5cc:	f000 fade 	bl	800cb8c <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f107 001c 	add.w	r0, r7, #28
 800c5d6:	3330      	adds	r3, #48	; 0x30
 800c5d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5da:	f000 fad7 	bl	800cb8c <writeMQTTString>
	}
	if (flags.bits.username)
 800c5de:	7d3b      	ldrb	r3, [r7, #20]
 800c5e0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c5e4:	b2db      	uxtb	r3, r3
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d006      	beq.n	800c5f8 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	f107 001c 	add.w	r0, r7, #28
 800c5f0:	3340      	adds	r3, #64	; 0x40
 800c5f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c5f4:	f000 faca 	bl	800cb8c <writeMQTTString>
	if (flags.bits.password)
 800c5f8:	7d3b      	ldrb	r3, [r7, #20]
 800c5fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5fe:	b2db      	uxtb	r3, r3
 800c600:	2b00      	cmp	r3, #0
 800c602:	d006      	beq.n	800c612 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	f107 001c 	add.w	r0, r7, #28
 800c60a:	334c      	adds	r3, #76	; 0x4c
 800c60c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c60e:	f000 fabd 	bl	800cb8c <writeMQTTString>

	rc = ptr - buf;
 800c612:	69fa      	ldr	r2, [r7, #28]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	1ad3      	subs	r3, r2, r3
 800c618:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800c61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c61c:	4618      	mov	r0, r3
 800c61e:	3728      	adds	r7, #40	; 0x28
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}
 800c624:	08012850 	.word	0x08012850
 800c628:	08012858 	.word	0x08012858

0800c62c <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b08a      	sub	sp, #40	; 0x28
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	607a      	str	r2, [r7, #4]
 800c638:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800c63a:	2300      	movs	r3, #0
 800c63c:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800c642:	2300      	movs	r3, #0
 800c644:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800c646:	2300      	movs	r3, #0
 800c648:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800c64a:	2300      	movs	r3, #0
 800c64c:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800c64e:	f107 0318 	add.w	r3, r7, #24
 800c652:	4618      	mov	r0, r3
 800c654:	f000 fa29 	bl	800caaa <readChar>
 800c658:	4603      	mov	r3, r0
 800c65a:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK)
 800c65c:	7f3b      	ldrb	r3, [r7, #28]
 800c65e:	f023 030f 	bic.w	r3, r3, #15
 800c662:	b2db      	uxtb	r3, r3
 800c664:	2b20      	cmp	r3, #32
 800c666:	d12e      	bne.n	800c6c6 <MQTTDeserialize_connack+0x9a>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	f107 0214 	add.w	r2, r7, #20
 800c66e:	4611      	mov	r1, r2
 800c670:	4618      	mov	r0, r3
 800c672:	f000 f9e9 	bl	800ca48 <MQTTPacket_decodeBuf>
 800c676:	6278      	str	r0, [r7, #36]	; 0x24
 800c678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	4413      	add	r3, r2
 800c67e:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800c680:	69bb      	ldr	r3, [r7, #24]
 800c682:	697a      	ldr	r2, [r7, #20]
 800c684:	4413      	add	r3, r2
 800c686:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800c688:	69bb      	ldr	r3, [r7, #24]
 800c68a:	6a3a      	ldr	r2, [r7, #32]
 800c68c:	1ad3      	subs	r3, r2, r3
 800c68e:	2b01      	cmp	r3, #1
 800c690:	dd1b      	ble.n	800c6ca <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800c692:	f107 0318 	add.w	r3, r7, #24
 800c696:	4618      	mov	r0, r3
 800c698:	f000 fa07 	bl	800caaa <readChar>
 800c69c:	4603      	mov	r3, r0
 800c69e:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800c6a0:	7c3b      	ldrb	r3, [r7, #16]
 800c6a2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c6a6:	b2db      	uxtb	r3, r3
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800c6ae:	f107 0318 	add.w	r3, r7, #24
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f9f9 	bl	800caaa <readChar>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800c6c0:	2301      	movs	r3, #1
 800c6c2:	627b      	str	r3, [r7, #36]	; 0x24
 800c6c4:	e002      	b.n	800c6cc <MQTTDeserialize_connack+0xa0>
		goto exit;
 800c6c6:	bf00      	nop
 800c6c8:	e000      	b.n	800c6cc <MQTTDeserialize_connack+0xa0>
		goto exit;
 800c6ca:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c6cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3728      	adds	r7, #40	; 0x28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}

0800c6d6 <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800c6d6:	b580      	push	{r7, lr}
 800c6d8:	b088      	sub	sp, #32
 800c6da:	af00      	add	r7, sp, #0
 800c6dc:	60f8      	str	r0, [r7, #12]
 800c6de:	60b9      	str	r1, [r7, #8]
 800c6e0:	4613      	mov	r3, r2
 800c6e2:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800c6e4:	2300      	movs	r3, #0
 800c6e6:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800c6e8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6ec:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800c6f2:	68bb      	ldr	r3, [r7, #8]
 800c6f4:	2b01      	cmp	r3, #1
 800c6f6:	dc03      	bgt.n	800c700 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800c6f8:	f06f 0301 	mvn.w	r3, #1
 800c6fc:	61fb      	str	r3, [r7, #28]
		goto exit;
 800c6fe:	e01d      	b.n	800c73c <MQTTSerialize_zero+0x66>
	}
	header.byte = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800c704:	79fb      	ldrb	r3, [r7, #7]
 800c706:	f003 030f 	and.w	r3, r3, #15
 800c70a:	b2da      	uxtb	r2, r3
 800c70c:	7e3b      	ldrb	r3, [r7, #24]
 800c70e:	f362 1307 	bfi	r3, r2, #4, #4
 800c712:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800c714:	7e3a      	ldrb	r2, [r7, #24]
 800c716:	f107 0314 	add.w	r3, r7, #20
 800c71a:	4611      	mov	r1, r2
 800c71c:	4618      	mov	r0, r3
 800c71e:	f000 f9d8 	bl	800cad2 <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	2100      	movs	r1, #0
 800c726:	4618      	mov	r0, r3
 800c728:	f000 f8d9 	bl	800c8de <MQTTPacket_encode>
 800c72c:	4602      	mov	r2, r0
 800c72e:	697b      	ldr	r3, [r7, #20]
 800c730:	4413      	add	r3, r2
 800c732:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800c734:	697a      	ldr	r2, [r7, #20]
 800c736:	68fb      	ldr	r3, [r7, #12]
 800c738:	1ad3      	subs	r3, r2, r3
 800c73a:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c73c:	69fb      	ldr	r3, [r7, #28]
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3720      	adds	r7, #32
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}

0800c746 <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800c746:	b580      	push	{r7, lr}
 800c748:	b082      	sub	sp, #8
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
 800c74e:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800c750:	220c      	movs	r2, #12
 800c752:	6839      	ldr	r1, [r7, #0]
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f7ff ffbe 	bl	800c6d6 <MQTTSerialize_zero>
 800c75a:	4603      	mov	r3, r0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3708      	adds	r7, #8
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08a      	sub	sp, #40	; 0x28
 800c768:	af00      	add	r7, sp, #0
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800c772:	2300      	movs	r3, #0
 800c774:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800c776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c778:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800c77a:	2300      	movs	r3, #0
 800c77c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800c786:	f107 0318 	add.w	r3, r7, #24
 800c78a:	4618      	mov	r0, r3
 800c78c:	f000 f98d 	bl	800caaa <readChar>
 800c790:	4603      	mov	r3, r0
 800c792:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800c794:	7f3b      	ldrb	r3, [r7, #28]
 800c796:	f023 030f 	bic.w	r3, r3, #15
 800c79a:	b2db      	uxtb	r3, r3
 800c79c:	2b30      	cmp	r3, #48	; 0x30
 800c79e:	d14b      	bne.n	800c838 <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800c7a0:	7f3b      	ldrb	r3, [r7, #28]
 800c7a2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800c7ae:	7f3b      	ldrb	r3, [r7, #28]
 800c7b0:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800c7b4:	b2db      	uxtb	r3, r3
 800c7b6:	461a      	mov	r2, r3
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800c7bc:	7f3b      	ldrb	r3, [r7, #28]
 800c7be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c7c2:	b2db      	uxtb	r3, r3
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800c7ca:	69bb      	ldr	r3, [r7, #24]
 800c7cc:	f107 0214 	add.w	r2, r7, #20
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	f000 f938 	bl	800ca48 <MQTTPacket_decodeBuf>
 800c7d8:	6278      	str	r0, [r7, #36]	; 0x24
 800c7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	4413      	add	r3, r2
 800c7e0:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	697a      	ldr	r2, [r7, #20]
 800c7e6:	4413      	add	r3, r2
 800c7e8:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800c7ea:	f107 0318 	add.w	r3, r7, #24
 800c7ee:	6a3a      	ldr	r2, [r7, #32]
 800c7f0:	4619      	mov	r1, r3
 800c7f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c7f4:	f000 f9f8 	bl	800cbe8 <readMQTTLenString>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d01e      	beq.n	800c83c <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800c7fe:	69bb      	ldr	r3, [r7, #24]
 800c800:	6a3a      	ldr	r2, [r7, #32]
 800c802:	1ad3      	subs	r3, r2, r3
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800c804:	2b00      	cmp	r3, #0
 800c806:	db19      	blt.n	800c83c <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	dd08      	ble.n	800c822 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800c810:	f107 0318 	add.w	r3, r7, #24
 800c814:	4618      	mov	r0, r3
 800c816:	f000 f92d 	bl	800ca74 <readInt>
 800c81a:	4603      	mov	r3, r0
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	683b      	ldr	r3, [r7, #0]
 800c820:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	6a3a      	ldr	r2, [r7, #32]
 800c826:	1ad2      	subs	r2, r2, r3
 800c828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c82a:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800c82c:	69ba      	ldr	r2, [r7, #24]
 800c82e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c830:	601a      	str	r2, [r3, #0]
	rc = 1;
 800c832:	2301      	movs	r3, #1
 800c834:	627b      	str	r3, [r7, #36]	; 0x24
 800c836:	e002      	b.n	800c83e <MQTTDeserialize_publish+0xda>
		goto exit;
 800c838:	bf00      	nop
 800c83a:	e000      	b.n	800c83e <MQTTDeserialize_publish+0xda>
		goto exit;
 800c83c:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c840:	4618      	mov	r0, r3
 800c842:	3728      	adds	r7, #40	; 0x28
 800c844:	46bd      	mov	sp, r7
 800c846:	bd80      	pop	{r7, pc}

0800c848 <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b08a      	sub	sp, #40	; 0x28
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	60f8      	str	r0, [r7, #12]
 800c850:	60b9      	str	r1, [r7, #8]
 800c852:	607a      	str	r2, [r7, #4]
 800c854:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800c856:	2300      	movs	r3, #0
 800c858:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800c85e:	2300      	movs	r3, #0
 800c860:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800c866:	f107 0318 	add.w	r3, r7, #24
 800c86a:	4618      	mov	r0, r3
 800c86c:	f000 f91d 	bl	800caaa <readChar>
 800c870:	4603      	mov	r3, r0
 800c872:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800c874:	7f3b      	ldrb	r3, [r7, #28]
 800c876:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	461a      	mov	r2, r3
 800c87e:	68bb      	ldr	r3, [r7, #8]
 800c880:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800c882:	7f3b      	ldrb	r3, [r7, #28]
 800c884:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800c888:	b2db      	uxtb	r3, r3
 800c88a:	461a      	mov	r2, r3
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800c890:	69bb      	ldr	r3, [r7, #24]
 800c892:	f107 0214 	add.w	r2, r7, #20
 800c896:	4611      	mov	r1, r2
 800c898:	4618      	mov	r0, r3
 800c89a:	f000 f8d5 	bl	800ca48 <MQTTPacket_decodeBuf>
 800c89e:	6278      	str	r0, [r7, #36]	; 0x24
 800c8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8a2:	69bb      	ldr	r3, [r7, #24]
 800c8a4:	4413      	add	r3, r2
 800c8a6:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	697a      	ldr	r2, [r7, #20]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800c8b0:	69bb      	ldr	r3, [r7, #24]
 800c8b2:	6a3a      	ldr	r2, [r7, #32]
 800c8b4:	1ad3      	subs	r3, r2, r3
 800c8b6:	2b01      	cmp	r3, #1
 800c8b8:	dd0b      	ble.n	800c8d2 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800c8ba:	f107 0318 	add.w	r3, r7, #24
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 f8d8 	bl	800ca74 <readInt>
 800c8c4:	4603      	mov	r3, r0
 800c8c6:	b29a      	uxth	r2, r3
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800c8cc:	2301      	movs	r3, #1
 800c8ce:	627b      	str	r3, [r7, #36]	; 0x24
 800c8d0:	e000      	b.n	800c8d4 <MQTTDeserialize_ack+0x8c>
		goto exit;
 800c8d2:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	3728      	adds	r7, #40	; 0x28
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	bd80      	pop	{r7, pc}

0800c8de <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800c8de:	b480      	push	{r7}
 800c8e0:	b085      	sub	sp, #20
 800c8e2:	af00      	add	r7, sp, #0
 800c8e4:	6078      	str	r0, [r7, #4]
 800c8e6:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800c8e8:	2300      	movs	r3, #0
 800c8ea:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800c8ec:	683b      	ldr	r3, [r7, #0]
 800c8ee:	425a      	negs	r2, r3
 800c8f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800c8f8:	bf58      	it	pl
 800c8fa:	4253      	negpl	r3, r2
 800c8fc:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800c8fe:	683b      	ldr	r3, [r7, #0]
 800c900:	2b00      	cmp	r3, #0
 800c902:	da00      	bge.n	800c906 <MQTTPacket_encode+0x28>
 800c904:	337f      	adds	r3, #127	; 0x7f
 800c906:	11db      	asrs	r3, r3, #7
 800c908:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	dd03      	ble.n	800c918 <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800c910:	7afb      	ldrb	r3, [r7, #11]
 800c912:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c916:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	1c5a      	adds	r2, r3, #1
 800c91c:	60fa      	str	r2, [r7, #12]
 800c91e:	461a      	mov	r2, r3
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	4413      	add	r3, r2
 800c924:	7afa      	ldrb	r2, [r7, #11]
 800c926:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800c928:	683b      	ldr	r3, [r7, #0]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	dcde      	bgt.n	800c8ec <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800c92e:	68fb      	ldr	r3, [r7, #12]
}
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b086      	sub	sp, #24
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800c946:	2301      	movs	r3, #1
 800c948:	617b      	str	r3, [r7, #20]
	int len = 0;
 800c94a:	2300      	movs	r3, #0
 800c94c:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800c94e:	683b      	ldr	r3, [r7, #0]
 800c950:	2200      	movs	r2, #0
 800c952:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800c954:	f04f 33ff 	mov.w	r3, #4294967295
 800c958:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800c95a:	693b      	ldr	r3, [r7, #16]
 800c95c:	3301      	adds	r3, #1
 800c95e:	613b      	str	r3, [r7, #16]
 800c960:	693b      	ldr	r3, [r7, #16]
 800c962:	2b04      	cmp	r3, #4
 800c964:	dd03      	ble.n	800c96e <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800c966:	f04f 33ff 	mov.w	r3, #4294967295
 800c96a:	60fb      	str	r3, [r7, #12]
			goto exit;
 800c96c:	e01d      	b.n	800c9aa <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800c96e:	f107 020b 	add.w	r2, r7, #11
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2101      	movs	r1, #1
 800c976:	4610      	mov	r0, r2
 800c978:	4798      	blx	r3
 800c97a:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d112      	bne.n	800c9a8 <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	681a      	ldr	r2, [r3, #0]
 800c986:	7afb      	ldrb	r3, [r7, #11]
 800c988:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c98c:	6979      	ldr	r1, [r7, #20]
 800c98e:	fb01 f303 	mul.w	r3, r1, r3
 800c992:	441a      	add	r2, r3
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	01db      	lsls	r3, r3, #7
 800c99c:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800c99e:	7afb      	ldrb	r3, [r7, #11]
 800c9a0:	b25b      	sxtb	r3, r3
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	dbd6      	blt.n	800c954 <MQTTPacket_decode+0x18>
exit:
 800c9a6:	e000      	b.n	800c9aa <MQTTPacket_decode+0x6e>
			goto exit;
 800c9a8:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800c9aa:	693b      	ldr	r3, [r7, #16]
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3718      	adds	r7, #24
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b7f      	cmp	r3, #127	; 0x7f
 800c9c6:	dc03      	bgt.n	800c9d0 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	607b      	str	r3, [r7, #4]
 800c9ce:	e012      	b.n	800c9f6 <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c9d6:	da03      	bge.n	800c9e0 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	3302      	adds	r3, #2
 800c9dc:	607b      	str	r3, [r7, #4]
 800c9de:	e00a      	b.n	800c9f6 <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	4a08      	ldr	r2, [pc, #32]	; (800ca04 <MQTTPacket_len+0x50>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	dc03      	bgt.n	800c9f0 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	3303      	adds	r3, #3
 800c9ec:	607b      	str	r3, [r7, #4]
 800c9ee:	e002      	b.n	800c9f6 <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	3304      	adds	r3, #4
 800c9f4:	607b      	str	r3, [r7, #4]
	return rem_len;
 800c9f6:	687b      	ldr	r3, [r7, #4]
}
 800c9f8:	4618      	mov	r0, r3
 800c9fa:	370c      	adds	r7, #12
 800c9fc:	46bd      	mov	sp, r7
 800c9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca02:	4770      	bx	lr
 800ca04:	001ffffe 	.word	0x001ffffe

0800ca08 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b085      	sub	sp, #20
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
 800ca10:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800ca12:	2300      	movs	r3, #0
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	e00a      	b.n	800ca2e <bufchar+0x26>
		*c = *bufptr++;
 800ca18:	4b0a      	ldr	r3, [pc, #40]	; (800ca44 <bufchar+0x3c>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	1c5a      	adds	r2, r3, #1
 800ca1e:	4909      	ldr	r1, [pc, #36]	; (800ca44 <bufchar+0x3c>)
 800ca20:	600a      	str	r2, [r1, #0]
 800ca22:	781a      	ldrb	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	3301      	adds	r3, #1
 800ca2c:	60fb      	str	r3, [r7, #12]
 800ca2e:	68fa      	ldr	r2, [r7, #12]
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	dbf0      	blt.n	800ca18 <bufchar+0x10>
	return count;
 800ca36:	683b      	ldr	r3, [r7, #0]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3714      	adds	r7, #20
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr
 800ca44:	20001168 	.word	0x20001168

0800ca48 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800ca48:	b580      	push	{r7, lr}
 800ca4a:	b082      	sub	sp, #8
 800ca4c:	af00      	add	r7, sp, #0
 800ca4e:	6078      	str	r0, [r7, #4]
 800ca50:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800ca52:	4a06      	ldr	r2, [pc, #24]	; (800ca6c <MQTTPacket_decodeBuf+0x24>)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800ca58:	6839      	ldr	r1, [r7, #0]
 800ca5a:	4805      	ldr	r0, [pc, #20]	; (800ca70 <MQTTPacket_decodeBuf+0x28>)
 800ca5c:	f7ff ff6e 	bl	800c93c <MQTTPacket_decode>
 800ca60:	4603      	mov	r3, r0
}
 800ca62:	4618      	mov	r0, r3
 800ca64:	3708      	adds	r7, #8
 800ca66:	46bd      	mov	sp, r7
 800ca68:	bd80      	pop	{r7, pc}
 800ca6a:	bf00      	nop
 800ca6c:	20001168 	.word	0x20001168
 800ca70:	0800ca09 	.word	0x0800ca09

0800ca74 <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800ca74:	b480      	push	{r7}
 800ca76:	b085      	sub	sp, #20
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	781b      	ldrb	r3, [r3, #0]
 800ca86:	021b      	lsls	r3, r3, #8
 800ca88:	68fa      	ldr	r2, [r7, #12]
 800ca8a:	3201      	adds	r2, #1
 800ca8c:	7812      	ldrb	r2, [r2, #0]
 800ca8e:	4413      	add	r3, r2
 800ca90:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	1c9a      	adds	r2, r3, #2
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	601a      	str	r2, [r3, #0]
	return len;
 800ca9c:	68bb      	ldr	r3, [r7, #8]
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3714      	adds	r7, #20
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800caaa:	b480      	push	{r7}
 800caac:	b085      	sub	sp, #20
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	781b      	ldrb	r3, [r3, #0]
 800cab8:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	1c5a      	adds	r2, r3, #1
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	601a      	str	r2, [r3, #0]
	return c;
 800cac4:	7bfb      	ldrb	r3, [r7, #15]
}
 800cac6:	4618      	mov	r0, r3
 800cac8:	3714      	adds	r7, #20
 800caca:	46bd      	mov	sp, r7
 800cacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad0:	4770      	bx	lr

0800cad2 <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800cad2:	b480      	push	{r7}
 800cad4:	b083      	sub	sp, #12
 800cad6:	af00      	add	r7, sp, #0
 800cad8:	6078      	str	r0, [r7, #4]
 800cada:	460b      	mov	r3, r1
 800cadc:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	681b      	ldr	r3, [r3, #0]
 800cae2:	78fa      	ldrb	r2, [r7, #3]
 800cae4:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	1c5a      	adds	r2, r3, #1
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	601a      	str	r2, [r3, #0]
}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	da00      	bge.n	800cb0e <writeInt+0x12>
 800cb0c:	33ff      	adds	r3, #255	; 0xff
 800cb0e:	121b      	asrs	r3, r3, #8
 800cb10:	461a      	mov	r2, r3
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	b2d2      	uxtb	r2, r2
 800cb18:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	1c5a      	adds	r2, r3, #1
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	425a      	negs	r2, r3
 800cb28:	b2db      	uxtb	r3, r3
 800cb2a:	b2d2      	uxtb	r2, r2
 800cb2c:	bf58      	it	pl
 800cb2e:	4253      	negpl	r3, r2
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	6812      	ldr	r2, [r2, #0]
 800cb34:	b2db      	uxtb	r3, r3
 800cb36:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	1c5a      	adds	r2, r3, #1
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	601a      	str	r2, [r3, #0]
}
 800cb42:	bf00      	nop
 800cb44:	370c      	adds	r7, #12
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800cb4e:	b580      	push	{r7, lr}
 800cb50:	b084      	sub	sp, #16
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800cb58:	6838      	ldr	r0, [r7, #0]
 800cb5a:	f7f3 fb43 	bl	80001e4 <strlen>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800cb62:	68f9      	ldr	r1, [r7, #12]
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7ff ffc9 	bl	800cafc <writeInt>
	memcpy(*pptr, string, len);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68fa      	ldr	r2, [r7, #12]
 800cb70:	6839      	ldr	r1, [r7, #0]
 800cb72:	4618      	mov	r0, r3
 800cb74:	f001 f848 	bl	800dc08 <memcpy>
	*pptr += len;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681a      	ldr	r2, [r3, #0]
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	441a      	add	r2, r3
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	601a      	str	r2, [r3, #0]
}
 800cb84:	bf00      	nop
 800cb86:	3710      	adds	r7, #16
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <writeMQTTString>:


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b084      	sub	sp, #16
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	4638      	mov	r0, r7
 800cb96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	dd12      	ble.n	800cbc6 <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	4619      	mov	r1, r3
 800cba4:	68f8      	ldr	r0, [r7, #12]
 800cba6:	f7ff ffa9 	bl	800cafc <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68b9      	ldr	r1, [r7, #8]
 800cbb0:	687a      	ldr	r2, [r7, #4]
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f001 f828 	bl	800dc08 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	687a      	ldr	r2, [r7, #4]
 800cbbe:	441a      	add	r2, r3
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800cbc4:	e00c      	b.n	800cbe0 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d005      	beq.n	800cbd8 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	4619      	mov	r1, r3
 800cbd0:	68f8      	ldr	r0, [r7, #12]
 800cbd2:	f7ff ffbc 	bl	800cb4e <writeCString>
}
 800cbd6:	e003      	b.n	800cbe0 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800cbd8:	2100      	movs	r1, #0
 800cbda:	68f8      	ldr	r0, [r7, #12]
 800cbdc:	f7ff ff8e 	bl	800cafc <writeInt>
}
 800cbe0:	bf00      	nop
 800cbe2:	3710      	adds	r7, #16
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	bd80      	pop	{r7, pc}

0800cbe8 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800cbf8:	68bb      	ldr	r3, [r7, #8]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	1ad3      	subs	r3, r2, r3
 800cc00:	2b01      	cmp	r3, #1
 800cc02:	dd1a      	ble.n	800cc3a <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800cc04:	68b8      	ldr	r0, [r7, #8]
 800cc06:	f7ff ff35 	bl	800ca74 <readInt>
 800cc0a:	4602      	mov	r2, r0
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800cc10:	68bb      	ldr	r3, [r7, #8]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	68fa      	ldr	r2, [r7, #12]
 800cc16:	6852      	ldr	r2, [r2, #4]
 800cc18:	4413      	add	r3, r2
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d30c      	bcc.n	800cc3a <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	681a      	ldr	r2, [r3, #0]
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800cc28:	68bb      	ldr	r3, [r7, #8]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	68fa      	ldr	r2, [r7, #12]
 800cc2e:	6852      	ldr	r2, [r2, #4]
 800cc30:	441a      	add	r2, r3
 800cc32:	68bb      	ldr	r3, [r7, #8]
 800cc34:	601a      	str	r2, [r3, #0]
			rc = 1;
 800cc36:	2301      	movs	r3, #1
 800cc38:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800cc40:	697b      	ldr	r3, [r7, #20]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3718      	adds	r7, #24
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b086      	sub	sp, #24
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	1d3b      	adds	r3, r7, #4
 800cc52:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800cc56:	2300      	movs	r3, #0
 800cc58:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d006      	beq.n	800cc6e <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7f3 fabe 	bl	80001e4 <strlen>
 800cc68:	4603      	mov	r3, r0
 800cc6a:	617b      	str	r3, [r7, #20]
 800cc6c:	e001      	b.n	800cc72 <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	617b      	str	r3, [r7, #20]
	return rc;
 800cc72:	697b      	ldr	r3, [r7, #20]
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3718      	adds	r7, #24
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}

0800cc7c <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800cc86:	2300      	movs	r3, #0
 800cc88:	617b      	str	r3, [r7, #20]
		blen = 0;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	d00a      	beq.n	800ccac <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	681b      	ldr	r3, [r3, #0]
 800cca0:	4618      	mov	r0, r3
 800cca2:	f7f3 fa9f 	bl	80001e4 <strlen>
 800cca6:	4603      	mov	r3, r0
 800cca8:	617b      	str	r3, [r7, #20]
 800ccaa:	e005      	b.n	800ccb8 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	689b      	ldr	r3, [r3, #8]
 800ccb0:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	685b      	ldr	r3, [r3, #4]
 800ccb6:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800ccb8:	6838      	ldr	r0, [r7, #0]
 800ccba:	f7f3 fa93 	bl	80001e4 <strlen>
 800ccbe:	4603      	mov	r3, r0
 800ccc0:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800ccc2:	697a      	ldr	r2, [r7, #20]
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	429a      	cmp	r2, r3
 800ccc8:	d10a      	bne.n	800cce0 <MQTTPacket_equals+0x64>
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	461a      	mov	r2, r3
 800ccce:	6839      	ldr	r1, [r7, #0]
 800ccd0:	6938      	ldr	r0, [r7, #16]
 800ccd2:	f001 fea2 	bl	800ea1a <strncmp>
 800ccd6:	4603      	mov	r3, r0
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d101      	bne.n	800cce0 <MQTTPacket_equals+0x64>
 800ccdc:	2301      	movs	r3, #1
 800ccde:	e000      	b.n	800cce2 <MQTTPacket_equals+0x66>
 800cce0:	2300      	movs	r3, #0
}
 800cce2:	4618      	mov	r0, r3
 800cce4:	3718      	adds	r7, #24
 800cce6:	46bd      	mov	sp, r7
 800cce8:	bd80      	pop	{r7, pc}

0800ccea <MQTTSerialize_publishLength>:
  * @param topicName the topic name to be used in the publish  
  * @param payloadlen the length of the payload to be sent
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_publishLength(int qos, MQTTString topicName, int payloadlen)
{
 800ccea:	b580      	push	{r7, lr}
 800ccec:	b086      	sub	sp, #24
 800ccee:	af00      	add	r7, sp, #0
 800ccf0:	60f8      	str	r0, [r7, #12]
 800ccf2:	4638      	mov	r0, r7
 800ccf4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	int len = 0;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	617b      	str	r3, [r7, #20]

	len += 2 + MQTTstrlen(topicName) + payloadlen;
 800ccfc:	463b      	mov	r3, r7
 800ccfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd02:	f7ff ffa2 	bl	800cc4a <MQTTstrlen>
 800cd06:	4603      	mov	r3, r0
 800cd08:	1c9a      	adds	r2, r3, #2
 800cd0a:	6a3b      	ldr	r3, [r7, #32]
 800cd0c:	4413      	add	r3, r2
 800cd0e:	697a      	ldr	r2, [r7, #20]
 800cd10:	4413      	add	r3, r2
 800cd12:	617b      	str	r3, [r7, #20]
	if (qos > 0)
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	dd02      	ble.n	800cd20 <MQTTSerialize_publishLength+0x36>
		len += 2; /* packetid */
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	3302      	adds	r3, #2
 800cd1e:	617b      	str	r3, [r7, #20]
	return len;
 800cd20:	697b      	ldr	r3, [r7, #20]
}
 800cd22:	4618      	mov	r0, r3
 800cd24:	3718      	adds	r7, #24
 800cd26:	46bd      	mov	sp, r7
 800cd28:	bd80      	pop	{r7, pc}

0800cd2a <MQTTSerialize_publish>:
  * @param payloadlen integer - the length of the MQTT payload
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_publish(unsigned char* buf, int buflen, unsigned char dup, int qos, unsigned char retained, unsigned short packetid,
		MQTTString topicName, unsigned char* payload, int payloadlen)
{
 800cd2a:	b580      	push	{r7, lr}
 800cd2c:	b08a      	sub	sp, #40	; 0x28
 800cd2e:	af02      	add	r7, sp, #8
 800cd30:	60f8      	str	r0, [r7, #12]
 800cd32:	60b9      	str	r1, [r7, #8]
 800cd34:	603b      	str	r3, [r7, #0]
 800cd36:	4613      	mov	r3, r2
 800cd38:	71fb      	strb	r3, [r7, #7]
	unsigned char *ptr = buf;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	617b      	str	r3, [r7, #20]
	MQTTHeader header = {0};
 800cd3e:	2300      	movs	r3, #0
 800cd40:	613b      	str	r3, [r7, #16]
	int rem_len = 0;
 800cd42:	2300      	movs	r3, #0
 800cd44:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800cd46:	2300      	movs	r3, #0
 800cd48:	61fb      	str	r3, [r7, #28]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_publishLength(qos, topicName, payloadlen)) > buflen)
 800cd4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cd52:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cd54:	6838      	ldr	r0, [r7, #0]
 800cd56:	f7ff ffc8 	bl	800ccea <MQTTSerialize_publishLength>
 800cd5a:	61b8      	str	r0, [r7, #24]
 800cd5c:	69b8      	ldr	r0, [r7, #24]
 800cd5e:	f7ff fe29 	bl	800c9b4 <MQTTPacket_len>
 800cd62:	4602      	mov	r2, r0
 800cd64:	68bb      	ldr	r3, [r7, #8]
 800cd66:	4293      	cmp	r3, r2
 800cd68:	da03      	bge.n	800cd72 <MQTTSerialize_publish+0x48>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cd6a:	f06f 0301 	mvn.w	r3, #1
 800cd6e:	61fb      	str	r3, [r7, #28]
		goto exit;
 800cd70:	e04c      	b.n	800ce0c <MQTTSerialize_publish+0xe2>
	}

	header.bits.type = PUBLISH;
 800cd72:	7c3b      	ldrb	r3, [r7, #16]
 800cd74:	2203      	movs	r2, #3
 800cd76:	f362 1307 	bfi	r3, r2, #4, #4
 800cd7a:	743b      	strb	r3, [r7, #16]
	header.bits.dup = dup;
 800cd7c:	79fb      	ldrb	r3, [r7, #7]
 800cd7e:	f003 0301 	and.w	r3, r3, #1
 800cd82:	b2da      	uxtb	r2, r3
 800cd84:	7c3b      	ldrb	r3, [r7, #16]
 800cd86:	f362 03c3 	bfi	r3, r2, #3, #1
 800cd8a:	743b      	strb	r3, [r7, #16]
	header.bits.qos = qos;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	f003 0303 	and.w	r3, r3, #3
 800cd92:	b2da      	uxtb	r2, r3
 800cd94:	7c3b      	ldrb	r3, [r7, #16]
 800cd96:	f362 0342 	bfi	r3, r2, #1, #2
 800cd9a:	743b      	strb	r3, [r7, #16]
	header.bits.retain = retained;
 800cd9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cda0:	f003 0301 	and.w	r3, r3, #1
 800cda4:	b2da      	uxtb	r2, r3
 800cda6:	7c3b      	ldrb	r3, [r7, #16]
 800cda8:	f362 0300 	bfi	r3, r2, #0, #1
 800cdac:	743b      	strb	r3, [r7, #16]
	writeChar(&ptr, header.byte); /* write header */
 800cdae:	7c3a      	ldrb	r2, [r7, #16]
 800cdb0:	f107 0314 	add.w	r3, r7, #20
 800cdb4:	4611      	mov	r1, r2
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	f7ff fe8b 	bl	800cad2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	69b9      	ldr	r1, [r7, #24]
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	f7ff fd8c 	bl	800c8de <MQTTPacket_encode>
 800cdc6:	4602      	mov	r2, r0
 800cdc8:	697b      	ldr	r3, [r7, #20]
 800cdca:	4413      	add	r3, r2
 800cdcc:	617b      	str	r3, [r7, #20]

	writeMQTTString(&ptr, topicName);
 800cdce:	f107 0014 	add.w	r0, r7, #20
 800cdd2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800cdd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cdd8:	f7ff fed8 	bl	800cb8c <writeMQTTString>

	if (qos > 0)
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	dd06      	ble.n	800cdf0 <MQTTSerialize_publish+0xc6>
		writeInt(&ptr, packetid);
 800cde2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cde4:	f107 0314 	add.w	r3, r7, #20
 800cde8:	4611      	mov	r1, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7ff fe86 	bl	800cafc <writeInt>

	memcpy(ptr, payload, payloadlen);
 800cdf0:	697b      	ldr	r3, [r7, #20]
 800cdf2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cdf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 ff06 	bl	800dc08 <memcpy>
	ptr += payloadlen;
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ce00:	4413      	add	r3, r2
 800ce02:	617b      	str	r3, [r7, #20]

	rc = ptr - buf;
 800ce04:	697a      	ldr	r2, [r7, #20]
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	1ad3      	subs	r3, r2, r3
 800ce0a:	61fb      	str	r3, [r7, #28]

exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800ce0c:	69fb      	ldr	r3, [r7, #28]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3720      	adds	r7, #32
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}

0800ce16 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800ce16:	b580      	push	{r7, lr}
 800ce18:	b088      	sub	sp, #32
 800ce1a:	af00      	add	r7, sp, #0
 800ce1c:	60f8      	str	r0, [r7, #12]
 800ce1e:	60b9      	str	r1, [r7, #8]
 800ce20:	4611      	mov	r1, r2
 800ce22:	461a      	mov	r2, r3
 800ce24:	460b      	mov	r3, r1
 800ce26:	71fb      	strb	r3, [r7, #7]
 800ce28:	4613      	mov	r3, r2
 800ce2a:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800ce30:	2300      	movs	r3, #0
 800ce32:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	2b03      	cmp	r3, #3
 800ce3c:	dc03      	bgt.n	800ce46 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800ce3e:	f06f 0301 	mvn.w	r3, #1
 800ce42:	61fb      	str	r3, [r7, #28]
		goto exit;
 800ce44:	e037      	b.n	800ceb6 <MQTTSerialize_ack+0xa0>
	}
	header.bits.type = packettype;
 800ce46:	79fb      	ldrb	r3, [r7, #7]
 800ce48:	f003 030f 	and.w	r3, r3, #15
 800ce4c:	b2da      	uxtb	r2, r3
 800ce4e:	7e3b      	ldrb	r3, [r7, #24]
 800ce50:	f362 1307 	bfi	r3, r2, #4, #4
 800ce54:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800ce56:	79bb      	ldrb	r3, [r7, #6]
 800ce58:	f003 0301 	and.w	r3, r3, #1
 800ce5c:	b2da      	uxtb	r2, r3
 800ce5e:	7e3b      	ldrb	r3, [r7, #24]
 800ce60:	f362 03c3 	bfi	r3, r2, #3, #1
 800ce64:	763b      	strb	r3, [r7, #24]
	header.bits.qos = (packettype == PUBREL) ? 1 : 0;
 800ce66:	79fb      	ldrb	r3, [r7, #7]
 800ce68:	2b06      	cmp	r3, #6
 800ce6a:	bf0c      	ite	eq
 800ce6c:	2301      	moveq	r3, #1
 800ce6e:	2300      	movne	r3, #0
 800ce70:	b2db      	uxtb	r3, r3
 800ce72:	f003 0303 	and.w	r3, r3, #3
 800ce76:	b2da      	uxtb	r2, r3
 800ce78:	7e3b      	ldrb	r3, [r7, #24]
 800ce7a:	f362 0342 	bfi	r3, r2, #1, #2
 800ce7e:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800ce80:	7e3a      	ldrb	r2, [r7, #24]
 800ce82:	f107 0314 	add.w	r3, r7, #20
 800ce86:	4611      	mov	r1, r2
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f7ff fe22 	bl	800cad2 <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800ce8e:	697b      	ldr	r3, [r7, #20]
 800ce90:	2102      	movs	r1, #2
 800ce92:	4618      	mov	r0, r3
 800ce94:	f7ff fd23 	bl	800c8de <MQTTPacket_encode>
 800ce98:	4602      	mov	r2, r0
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	4413      	add	r3, r2
 800ce9e:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800cea0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cea2:	f107 0314 	add.w	r3, r7, #20
 800cea6:	4611      	mov	r1, r2
 800cea8:	4618      	mov	r0, r3
 800ceaa:	f7ff fe27 	bl	800cafc <writeInt>
	rc = ptr - buf;
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	1ad3      	subs	r3, r2, r3
 800ceb4:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800ceb6:	69fb      	ldr	r3, [r7, #28]
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3720      	adds	r7, #32
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b084      	sub	sp, #16
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800ceca:	2302      	movs	r3, #2
 800cecc:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800cece:	2300      	movs	r3, #0
 800ced0:	60fb      	str	r3, [r7, #12]
 800ced2:	e013      	b.n	800cefc <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800ced4:	68fa      	ldr	r2, [r7, #12]
 800ced6:	4613      	mov	r3, r2
 800ced8:	005b      	lsls	r3, r3, #1
 800ceda:	4413      	add	r3, r2
 800cedc:	009b      	lsls	r3, r3, #2
 800cede:	461a      	mov	r2, r3
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	4413      	add	r3, r2
 800cee4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cee8:	f7ff feaf 	bl	800cc4a <MQTTstrlen>
 800ceec:	4603      	mov	r3, r0
 800ceee:	3303      	adds	r3, #3
 800cef0:	68ba      	ldr	r2, [r7, #8]
 800cef2:	4413      	add	r3, r2
 800cef4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	3301      	adds	r3, #1
 800cefa:	60fb      	str	r3, [r7, #12]
 800cefc:	68fa      	ldr	r2, [r7, #12]
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	429a      	cmp	r2, r3
 800cf02:	dbe7      	blt.n	800ced4 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800cf04:	68bb      	ldr	r3, [r7, #8]
}
 800cf06:	4618      	mov	r0, r3
 800cf08:	3710      	adds	r7, #16
 800cf0a:	46bd      	mov	sp, r7
 800cf0c:	bd80      	pop	{r7, pc}

0800cf0e <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800cf0e:	b580      	push	{r7, lr}
 800cf10:	b08a      	sub	sp, #40	; 0x28
 800cf12:	af00      	add	r7, sp, #0
 800cf14:	60f8      	str	r0, [r7, #12]
 800cf16:	60b9      	str	r1, [r7, #8]
 800cf18:	4611      	mov	r1, r2
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	460b      	mov	r3, r1
 800cf1e:	71fb      	strb	r3, [r7, #7]
 800cf20:	4613      	mov	r3, r2
 800cf22:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800cf28:	2300      	movs	r3, #0
 800cf2a:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800cf2c:	2300      	movs	r3, #0
 800cf2e:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800cf30:	2300      	movs	r3, #0
 800cf32:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800cf34:	2300      	movs	r3, #0
 800cf36:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800cf38:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800cf3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cf3c:	f7ff ffc0 	bl	800cec0 <MQTTSerialize_subscribeLength>
 800cf40:	61f8      	str	r0, [r7, #28]
 800cf42:	69f8      	ldr	r0, [r7, #28]
 800cf44:	f7ff fd36 	bl	800c9b4 <MQTTPacket_len>
 800cf48:	4602      	mov	r2, r0
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	da03      	bge.n	800cf58 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800cf50:	f06f 0301 	mvn.w	r3, #1
 800cf54:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800cf56:	e051      	b.n	800cffc <MQTTSerialize_subscribe+0xee>
	}

	header.byte = 0;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800cf5c:	7d3b      	ldrb	r3, [r7, #20]
 800cf5e:	2208      	movs	r2, #8
 800cf60:	f362 1307 	bfi	r3, r2, #4, #4
 800cf64:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800cf66:	79fb      	ldrb	r3, [r7, #7]
 800cf68:	f003 0301 	and.w	r3, r3, #1
 800cf6c:	b2da      	uxtb	r2, r3
 800cf6e:	7d3b      	ldrb	r3, [r7, #20]
 800cf70:	f362 03c3 	bfi	r3, r2, #3, #1
 800cf74:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800cf76:	7d3b      	ldrb	r3, [r7, #20]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	f362 0342 	bfi	r3, r2, #1, #2
 800cf7e:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800cf80:	7d3a      	ldrb	r2, [r7, #20]
 800cf82:	f107 0318 	add.w	r3, r7, #24
 800cf86:	4611      	mov	r1, r2
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f7ff fda2 	bl	800cad2 <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800cf8e:	69bb      	ldr	r3, [r7, #24]
 800cf90:	69f9      	ldr	r1, [r7, #28]
 800cf92:	4618      	mov	r0, r3
 800cf94:	f7ff fca3 	bl	800c8de <MQTTPacket_encode>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	69bb      	ldr	r3, [r7, #24]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800cfa0:	88ba      	ldrh	r2, [r7, #4]
 800cfa2:	f107 0318 	add.w	r3, r7, #24
 800cfa6:	4611      	mov	r1, r2
 800cfa8:	4618      	mov	r0, r3
 800cfaa:	f7ff fda7 	bl	800cafc <writeInt>

	for (i = 0; i < count; ++i)
 800cfae:	2300      	movs	r3, #0
 800cfb0:	623b      	str	r3, [r7, #32]
 800cfb2:	e01b      	b.n	800cfec <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800cfb4:	6a3a      	ldr	r2, [r7, #32]
 800cfb6:	4613      	mov	r3, r2
 800cfb8:	005b      	lsls	r3, r3, #1
 800cfba:	4413      	add	r3, r2
 800cfbc:	009b      	lsls	r3, r3, #2
 800cfbe:	461a      	mov	r2, r3
 800cfc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cfc2:	4413      	add	r3, r2
 800cfc4:	f107 0018 	add.w	r0, r7, #24
 800cfc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cfca:	f7ff fddf 	bl	800cb8c <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800cfce:	6a3b      	ldr	r3, [r7, #32]
 800cfd0:	009b      	lsls	r3, r3, #2
 800cfd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfd4:	4413      	add	r3, r2
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	f107 0318 	add.w	r3, r7, #24
 800cfde:	4611      	mov	r1, r2
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	f7ff fd76 	bl	800cad2 <writeChar>
	for (i = 0; i < count; ++i)
 800cfe6:	6a3b      	ldr	r3, [r7, #32]
 800cfe8:	3301      	adds	r3, #1
 800cfea:	623b      	str	r3, [r7, #32]
 800cfec:	6a3a      	ldr	r2, [r7, #32]
 800cfee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff0:	429a      	cmp	r2, r3
 800cff2:	dbdf      	blt.n	800cfb4 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800cff4:	69ba      	ldr	r2, [r7, #24]
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	1ad3      	subs	r3, r2, r3
 800cffa:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800cffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cffe:	4618      	mov	r0, r3
 800d000:	3728      	adds	r7, #40	; 0x28
 800d002:	46bd      	mov	sp, r7
 800d004:	bd80      	pop	{r7, pc}

0800d006 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800d006:	b580      	push	{r7, lr}
 800d008:	b08a      	sub	sp, #40	; 0x28
 800d00a:	af00      	add	r7, sp, #0
 800d00c:	60f8      	str	r0, [r7, #12]
 800d00e:	60b9      	str	r1, [r7, #8]
 800d010:	607a      	str	r2, [r7, #4]
 800d012:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800d014:	2300      	movs	r3, #0
 800d016:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800d018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d01a:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800d020:	2300      	movs	r3, #0
 800d022:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800d024:	f107 0318 	add.w	r3, r7, #24
 800d028:	4618      	mov	r0, r3
 800d02a:	f7ff fd3e 	bl	800caaa <readChar>
 800d02e:	4603      	mov	r3, r0
 800d030:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800d032:	7f3b      	ldrb	r3, [r7, #28]
 800d034:	f023 030f 	bic.w	r3, r3, #15
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b90      	cmp	r3, #144	; 0x90
 800d03c:	d142      	bne.n	800d0c4 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800d03e:	69bb      	ldr	r3, [r7, #24]
 800d040:	f107 0214 	add.w	r2, r7, #20
 800d044:	4611      	mov	r1, r2
 800d046:	4618      	mov	r0, r3
 800d048:	f7ff fcfe 	bl	800ca48 <MQTTPacket_decodeBuf>
 800d04c:	6278      	str	r0, [r7, #36]	; 0x24
 800d04e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d050:	69bb      	ldr	r3, [r7, #24]
 800d052:	4413      	add	r3, r2
 800d054:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800d056:	69bb      	ldr	r3, [r7, #24]
 800d058:	697a      	ldr	r2, [r7, #20]
 800d05a:	4413      	add	r3, r2
 800d05c:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800d05e:	69bb      	ldr	r3, [r7, #24]
 800d060:	6a3a      	ldr	r2, [r7, #32]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	2b01      	cmp	r3, #1
 800d066:	dd2f      	ble.n	800d0c8 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800d068:	f107 0318 	add.w	r3, r7, #24
 800d06c:	4618      	mov	r0, r3
 800d06e:	f7ff fd01 	bl	800ca74 <readInt>
 800d072:	4603      	mov	r3, r0
 800d074:	b29a      	uxth	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	2200      	movs	r2, #0
 800d07e:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800d080:	e019      	b.n	800d0b6 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	681b      	ldr	r3, [r3, #0]
 800d086:	68ba      	ldr	r2, [r7, #8]
 800d088:	429a      	cmp	r2, r3
 800d08a:	da03      	bge.n	800d094 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 800d08c:	f04f 33ff 	mov.w	r3, #4294967295
 800d090:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800d092:	e01a      	b.n	800d0ca <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800d094:	f107 0318 	add.w	r3, r7, #24
 800d098:	4618      	mov	r0, r3
 800d09a:	f7ff fd06 	bl	800caaa <readChar>
 800d09e:	4603      	mov	r3, r0
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	1c59      	adds	r1, r3, #1
 800d0a8:	687a      	ldr	r2, [r7, #4]
 800d0aa:	6011      	str	r1, [r2, #0]
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	683a      	ldr	r2, [r7, #0]
 800d0b0:	4413      	add	r3, r2
 800d0b2:	4602      	mov	r2, r0
 800d0b4:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800d0b6:	69bb      	ldr	r3, [r7, #24]
 800d0b8:	6a3a      	ldr	r2, [r7, #32]
 800d0ba:	429a      	cmp	r2, r3
 800d0bc:	d8e1      	bhi.n	800d082 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	627b      	str	r3, [r7, #36]	; 0x24
 800d0c2:	e002      	b.n	800d0ca <MQTTDeserialize_suback+0xc4>
		goto exit;
 800d0c4:	bf00      	nop
 800d0c6:	e000      	b.n	800d0ca <MQTTDeserialize_suback+0xc4>
		goto exit;
 800d0c8:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800d0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	3728      	adds	r7, #40	; 0x28
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}

0800d0d4 <SPI_WIFI_MspInit>:
  * @brief  Initialize SPI MSP
  * @param  hspi: SPI handle
  * @retval None
  */
void SPI_WIFI_MspInit(SPI_HandleTypeDef* hspi)
{
 800d0d4:	b580      	push	{r7, lr}
 800d0d6:	b08c      	sub	sp, #48	; 0x30
 800d0d8:	af00      	add	r7, sp, #0
 800d0da:	6078      	str	r0, [r7, #4]
  
  GPIO_InitTypeDef GPIO_Init;
  
  __HAL_RCC_SPI3_CLK_ENABLE();
 800d0dc:	4b57      	ldr	r3, [pc, #348]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d0de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0e0:	4a56      	ldr	r2, [pc, #344]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d0e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d0e6:	6593      	str	r3, [r2, #88]	; 0x58
 800d0e8:	4b54      	ldr	r3, [pc, #336]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d0ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d0ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d0f0:	61bb      	str	r3, [r7, #24]
 800d0f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d0f4:	4b51      	ldr	r3, [pc, #324]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d0f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d0f8:	4a50      	ldr	r2, [pc, #320]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d0fa:	f043 0302 	orr.w	r3, r3, #2
 800d0fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d100:	4b4e      	ldr	r3, [pc, #312]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d102:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d104:	f003 0302 	and.w	r3, r3, #2
 800d108:	617b      	str	r3, [r7, #20]
 800d10a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800d10c:	4b4b      	ldr	r3, [pc, #300]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d10e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d110:	4a4a      	ldr	r2, [pc, #296]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d112:	f043 0304 	orr.w	r3, r3, #4
 800d116:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d118:	4b48      	ldr	r3, [pc, #288]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d11a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d11c:	f003 0304 	and.w	r3, r3, #4
 800d120:	613b      	str	r3, [r7, #16]
 800d122:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800d124:	4b45      	ldr	r3, [pc, #276]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d128:	4a44      	ldr	r2, [pc, #272]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d12a:	f043 0310 	orr.w	r3, r3, #16
 800d12e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d130:	4b42      	ldr	r3, [pc, #264]	; (800d23c <SPI_WIFI_MspInit+0x168>)
 800d132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d134:	f003 0310 	and.w	r3, r3, #16
 800d138:	60fb      	str	r3, [r7, #12]
 800d13a:	68fb      	ldr	r3, [r7, #12]
    
  /* configure Wake up pin */
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET ); 
 800d13c:	2200      	movs	r2, #0
 800d13e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d142:	483f      	ldr	r0, [pc, #252]	; (800d240 <SPI_WIFI_MspInit+0x16c>)
 800d144:	f7f8 fec2 	bl	8005ecc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       = GPIO_PIN_13;
 800d148:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d14c:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800d14e:	2301      	movs	r3, #1
 800d150:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800d152:	2300      	movs	r3, #0
 800d154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800d156:	2300      	movs	r3, #0
 800d158:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 800d15a:	f107 031c 	add.w	r3, r7, #28
 800d15e:	4619      	mov	r1, r3
 800d160:	4837      	ldr	r0, [pc, #220]	; (800d240 <SPI_WIFI_MspInit+0x16c>)
 800d162:	f7f8 fbfd 	bl	8005960 <HAL_GPIO_Init>

  /* configure Data ready pin */
  GPIO_Init.Pin       = GPIO_PIN_1;
 800d166:	2302      	movs	r3, #2
 800d168:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 800d16a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800d16e:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800d170:	2300      	movs	r3, #0
 800d172:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800d174:	2300      	movs	r3, #0
 800d176:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800d178:	f107 031c 	add.w	r3, r7, #28
 800d17c:	4619      	mov	r1, r3
 800d17e:	4831      	ldr	r0, [pc, #196]	; (800d244 <SPI_WIFI_MspInit+0x170>)
 800d180:	f7f8 fbee 	bl	8005960 <HAL_GPIO_Init>

  /* configure Reset pin */
  GPIO_Init.Pin       = GPIO_PIN_8;
 800d184:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d188:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800d18a:	2301      	movs	r3, #1
 800d18c:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800d18e:	2300      	movs	r3, #0
 800d190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 800d192:	2300      	movs	r3, #0
 800d194:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = 0;
 800d196:	2300      	movs	r3, #0
 800d198:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 800d19a:	f107 031c 	add.w	r3, r7, #28
 800d19e:	4619      	mov	r1, r3
 800d1a0:	4828      	ldr	r0, [pc, #160]	; (800d244 <SPI_WIFI_MspInit+0x170>)
 800d1a2:	f7f8 fbdd 	bl	8005960 <HAL_GPIO_Init>
  
  /* configure SPI NSS pin pin */
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET ); 
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	2101      	movs	r1, #1
 800d1aa:	4826      	ldr	r0, [pc, #152]	; (800d244 <SPI_WIFI_MspInit+0x170>)
 800d1ac:	f7f8 fe8e 	bl	8005ecc <HAL_GPIO_WritePin>
  GPIO_Init.Pin       =  GPIO_PIN_0;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800d1b4:	2301      	movs	r3, #1
 800d1b6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800d1b8:	2300      	movs	r3, #0
 800d1ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 800d1c0:	f107 031c 	add.w	r3, r7, #28
 800d1c4:	4619      	mov	r1, r3
 800d1c6:	481f      	ldr	r0, [pc, #124]	; (800d244 <SPI_WIFI_MspInit+0x170>)
 800d1c8:	f7f8 fbca 	bl	8005960 <HAL_GPIO_Init>
  
  /* configure SPI CLK pin */
  GPIO_Init.Pin       =  GPIO_PIN_10;
 800d1cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d1d0:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800d1d2:	2302      	movs	r3, #2
 800d1d4:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800d1de:	2306      	movs	r3, #6
 800d1e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 800d1e2:	f107 031c 	add.w	r3, r7, #28
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	4817      	ldr	r0, [pc, #92]	; (800d248 <SPI_WIFI_MspInit+0x174>)
 800d1ea:	f7f8 fbb9 	bl	8005960 <HAL_GPIO_Init>
  
  /* configure SPI MOSI pin */
  GPIO_Init.Pin       = GPIO_PIN_12;
 800d1ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d1f2:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800d1f4:	2302      	movs	r3, #2
 800d1f6:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_NOPULL;
 800d1f8:	2300      	movs	r3, #0
 800d1fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800d200:	2306      	movs	r3, #6
 800d202:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800d204:	f107 031c 	add.w	r3, r7, #28
 800d208:	4619      	mov	r1, r3
 800d20a:	480f      	ldr	r0, [pc, #60]	; (800d248 <SPI_WIFI_MspInit+0x174>)
 800d20c:	f7f8 fba8 	bl	8005960 <HAL_GPIO_Init>
  
  /* configure SPI MISO pin */
  GPIO_Init.Pin       = GPIO_PIN_11;
 800d210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d214:	61fb      	str	r3, [r7, #28]
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800d216:	2302      	movs	r3, #2
 800d218:	623b      	str	r3, [r7, #32]
  GPIO_Init.Pull      = GPIO_PULLUP;
 800d21a:	2301      	movs	r3, #1
 800d21c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800d21e:	2301      	movs	r3, #1
 800d220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800d222:	2306      	movs	r3, #6
 800d224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800d226:	f107 031c 	add.w	r3, r7, #28
 800d22a:	4619      	mov	r1, r3
 800d22c:	4806      	ldr	r0, [pc, #24]	; (800d248 <SPI_WIFI_MspInit+0x174>)
 800d22e:	f7f8 fb97 	bl	8005960 <HAL_GPIO_Init>
}
 800d232:	bf00      	nop
 800d234:	3730      	adds	r7, #48	; 0x30
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	40021000 	.word	0x40021000
 800d240:	48000400 	.word	0x48000400
 800d244:	48001000 	.word	0x48001000
 800d248:	48000800 	.word	0x48000800

0800d24c <SPI_WIFI_Init>:
  * @brief  Initialize the SPI3
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_Init(uint16_t mode)
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b084      	sub	sp, #16
 800d250:	af00      	add	r7, sp, #0
 800d252:	4603      	mov	r3, r0
 800d254:	80fb      	strh	r3, [r7, #6]
  int8_t  rc=0;
 800d256:	2300      	movs	r3, #0
 800d258:	73fb      	strb	r3, [r7, #15]
  
  if (mode == ES_WIFI_INIT)
 800d25a:	88fb      	ldrh	r3, [r7, #6]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d145      	bne.n	800d2ec <SPI_WIFI_Init+0xa0>
  {
    hspi.Instance               = SPI3;
 800d260:	4b27      	ldr	r3, [pc, #156]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d262:	4a28      	ldr	r2, [pc, #160]	; (800d304 <SPI_WIFI_Init+0xb8>)
 800d264:	601a      	str	r2, [r3, #0]
    SPI_WIFI_MspInit(&hspi);
 800d266:	4826      	ldr	r0, [pc, #152]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d268:	f7ff ff34 	bl	800d0d4 <SPI_WIFI_MspInit>
  
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800d26c:	4b24      	ldr	r3, [pc, #144]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d26e:	f44f 7282 	mov.w	r2, #260	; 0x104
 800d272:	605a      	str	r2, [r3, #4]
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 800d274:	4b22      	ldr	r3, [pc, #136]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d276:	2200      	movs	r2, #0
 800d278:	609a      	str	r2, [r3, #8]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 800d27a:	4b21      	ldr	r3, [pc, #132]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d27c:	f44f 6270 	mov.w	r2, #3840	; 0xf00
 800d280:	60da      	str	r2, [r3, #12]
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800d282:	4b1f      	ldr	r3, [pc, #124]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d284:	2200      	movs	r2, #0
 800d286:	611a      	str	r2, [r3, #16]
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 800d288:	4b1d      	ldr	r3, [pc, #116]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d28a:	2200      	movs	r2, #0
 800d28c:	615a      	str	r2, [r3, #20]
    hspi.Init.NSS               = SPI_NSS_SOFT;
 800d28e:	4b1c      	ldr	r3, [pc, #112]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d290:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d294:	619a      	str	r2, [r3, #24]
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supportes up to 20MHz)*/
 800d296:	4b1a      	ldr	r3, [pc, #104]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d298:	2210      	movs	r2, #16
 800d29a:	61da      	str	r2, [r3, #28]
    hspi.Init.FirstBit          = SPI_FIRSTBIT_MSB;
 800d29c:	4b18      	ldr	r3, [pc, #96]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	621a      	str	r2, [r3, #32]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800d2a2:	4b17      	ldr	r3, [pc, #92]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	625a      	str	r2, [r3, #36]	; 0x24
    hspi.Init.CRCCalculation    = SPI_CRCCALCULATION_DISABLE;
 800d2a8:	4b15      	ldr	r3, [pc, #84]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	629a      	str	r2, [r3, #40]	; 0x28
    hspi.Init.CRCPolynomial     = 0;
 800d2ae:	4b14      	ldr	r3, [pc, #80]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 800d2b4:	4812      	ldr	r0, [pc, #72]	; (800d300 <SPI_WIFI_Init+0xb4>)
 800d2b6:	f7fb fb4b 	bl	8008950 <HAL_SPI_Init>
 800d2ba:	4603      	mov	r3, r0
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d002      	beq.n	800d2c6 <SPI_WIFI_Init+0x7a>
    {
      return -1;
 800d2c0:	f04f 33ff 	mov.w	r3, #4294967295
 800d2c4:	e018      	b.n	800d2f8 <SPI_WIFI_Init+0xac>
    }

	 // Enable Interrupt for Data Ready pin , GPIO_PIN1
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, 0x0F, 0x00);
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	210f      	movs	r1, #15
 800d2ca:	2007      	movs	r0, #7
 800d2cc:	f7f8 f9c3 	bl	8005656 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 800d2d0:	2007      	movs	r0, #7
 800d2d2:	f7f8 f9dc 	bl	800568e <HAL_NVIC_EnableIRQ>
	 
	 // Enable Interrupt for SPI tx and rx
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, 1, 0);
 800d2d6:	2200      	movs	r2, #0
 800d2d8:	2101      	movs	r1, #1
 800d2da:	2033      	movs	r0, #51	; 0x33
 800d2dc:	f7f8 f9bb 	bl	8005656 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 800d2e0:	2033      	movs	r0, #51	; 0x33
 800d2e2:	f7f8 f9d4 	bl	800568e <HAL_NVIC_EnableIRQ>
    spi_rx_sem = osSemaphoreCreate(osSemaphore(spi_rx_sem) , 1 );
    spi_tx_sem = osSemaphoreCreate(osSemaphore(spi_tx_sem) , 1 );
    cmddata_rdy_rising_sem = osSemaphoreCreate(osSemaphore(cmddata_rdy_rising_sem) , 1 );
#endif
    // first call used for calibration
    SPI_WIFI_DelayUs(10);
 800d2e6:	200a      	movs	r0, #10
 800d2e8:	f000 f9fe 	bl	800d6e8 <SPI_WIFI_DelayUs>
  }
  
  rc= SPI_WIFI_ResetModule();
 800d2ec:	f000 f80c 	bl	800d308 <SPI_WIFI_ResetModule>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73fb      	strb	r3, [r7, #15]

  return rc;
 800d2f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	2000116c 	.word	0x2000116c
 800d304:	40003c00 	.word	0x40003c00

0800d308 <SPI_WIFI_ResetModule>:


int8_t SPI_WIFI_ResetModule(void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b084      	sub	sp, #16
 800d30c:	af00      	add	r7, sp, #0
  uint32_t tickstart = HAL_GetTick();
 800d30e:	f7f8 f897 	bl	8005440 <HAL_GetTick>
 800d312:	60b8      	str	r0, [r7, #8]
  uint8_t Prompt[6];
  uint8_t count = 0;
 800d314:	2300      	movs	r3, #0
 800d316:	73fb      	strb	r3, [r7, #15]
  HAL_StatusTypeDef  Status;
 
  WIFI_RESET_MODULE();
 800d318:	2200      	movs	r2, #0
 800d31a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d31e:	4830      	ldr	r0, [pc, #192]	; (800d3e0 <SPI_WIFI_ResetModule+0xd8>)
 800d320:	f7f8 fdd4 	bl	8005ecc <HAL_GPIO_WritePin>
 800d324:	200a      	movs	r0, #10
 800d326:	f7f8 f897 	bl	8005458 <HAL_Delay>
 800d32a:	2201      	movs	r2, #1
 800d32c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800d330:	482b      	ldr	r0, [pc, #172]	; (800d3e0 <SPI_WIFI_ResetModule+0xd8>)
 800d332:	f7f8 fdcb 	bl	8005ecc <HAL_GPIO_WritePin>
 800d336:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800d33a:	f7f8 f88d 	bl	8005458 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800d33e:	2200      	movs	r2, #0
 800d340:	2101      	movs	r1, #1
 800d342:	4827      	ldr	r0, [pc, #156]	; (800d3e0 <SPI_WIFI_ResetModule+0xd8>)
 800d344:	f7f8 fdc2 	bl	8005ecc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800d348:	200f      	movs	r0, #15
 800d34a:	f000 f9cd 	bl	800d6e8 <SPI_WIFI_DelayUs>
 
  while (WIFI_IS_CMDDATA_READY())
 800d34e:	e020      	b.n	800d392 <SPI_WIFI_ResetModule+0x8a>
  {
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);  
 800d350:	7bfb      	ldrb	r3, [r7, #15]
 800d352:	463a      	mov	r2, r7
 800d354:	18d1      	adds	r1, r2, r3
 800d356:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d35a:	2201      	movs	r2, #1
 800d35c:	4821      	ldr	r0, [pc, #132]	; (800d3e4 <SPI_WIFI_ResetModule+0xdc>)
 800d35e:	f7fb fbc2 	bl	8008ae6 <HAL_SPI_Receive>
 800d362:	4603      	mov	r3, r0
 800d364:	71fb      	strb	r3, [r7, #7]
    count += 2;
 800d366:	7bfb      	ldrb	r3, [r7, #15]
 800d368:	3302      	adds	r3, #2
 800d36a:	73fb      	strb	r3, [r7, #15]
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800d36c:	f7f8 f868 	bl	8005440 <HAL_GetTick>
 800d370:	4602      	mov	r2, r0
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	1ad3      	subs	r3, r2, r3
 800d376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d37a:	d202      	bcs.n	800d382 <SPI_WIFI_ResetModule+0x7a>
 800d37c:	79fb      	ldrb	r3, [r7, #7]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d007      	beq.n	800d392 <SPI_WIFI_ResetModule+0x8a>
    {
      WIFI_DISABLE_NSS(); 
 800d382:	2201      	movs	r2, #1
 800d384:	2101      	movs	r1, #1
 800d386:	4816      	ldr	r0, [pc, #88]	; (800d3e0 <SPI_WIFI_ResetModule+0xd8>)
 800d388:	f7f8 fda0 	bl	8005ecc <HAL_GPIO_WritePin>
      return -1;
 800d38c:	f04f 33ff 	mov.w	r3, #4294967295
 800d390:	e021      	b.n	800d3d6 <SPI_WIFI_ResetModule+0xce>
  while (WIFI_IS_CMDDATA_READY())
 800d392:	2102      	movs	r1, #2
 800d394:	4812      	ldr	r0, [pc, #72]	; (800d3e0 <SPI_WIFI_ResetModule+0xd8>)
 800d396:	f7f8 fd81 	bl	8005e9c <HAL_GPIO_ReadPin>
 800d39a:	4603      	mov	r3, r0
 800d39c:	2b01      	cmp	r3, #1
 800d39e:	d0d7      	beq.n	800d350 <SPI_WIFI_ResetModule+0x48>
    }    
  }
  
  WIFI_DISABLE_NSS(); 
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	2101      	movs	r1, #1
 800d3a4:	480e      	ldr	r0, [pc, #56]	; (800d3e0 <SPI_WIFI_ResetModule+0xd8>)
 800d3a6:	f7f8 fd91 	bl	8005ecc <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800d3aa:	783b      	ldrb	r3, [r7, #0]
 800d3ac:	2b15      	cmp	r3, #21
 800d3ae:	d10e      	bne.n	800d3ce <SPI_WIFI_ResetModule+0xc6>
 800d3b0:	787b      	ldrb	r3, [r7, #1]
 800d3b2:	2b15      	cmp	r3, #21
 800d3b4:	d10b      	bne.n	800d3ce <SPI_WIFI_ResetModule+0xc6>
 800d3b6:	78bb      	ldrb	r3, [r7, #2]
 800d3b8:	2b0d      	cmp	r3, #13
 800d3ba:	d108      	bne.n	800d3ce <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800d3bc:	78fb      	ldrb	r3, [r7, #3]
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 800d3be:	2b0a      	cmp	r3, #10
 800d3c0:	d105      	bne.n	800d3ce <SPI_WIFI_ResetModule+0xc6>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 800d3c2:	793b      	ldrb	r3, [r7, #4]
 800d3c4:	2b3e      	cmp	r3, #62	; 0x3e
 800d3c6:	d102      	bne.n	800d3ce <SPI_WIFI_ResetModule+0xc6>
 800d3c8:	797b      	ldrb	r3, [r7, #5]
 800d3ca:	2b20      	cmp	r3, #32
 800d3cc:	d002      	beq.n	800d3d4 <SPI_WIFI_ResetModule+0xcc>
  {
    return -1;
 800d3ce:	f04f 33ff 	mov.w	r3, #4294967295
 800d3d2:	e000      	b.n	800d3d6 <SPI_WIFI_ResetModule+0xce>
  }    
  return 0;
 800d3d4:	2300      	movs	r3, #0
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	48001000 	.word	0x48001000
 800d3e4:	2000116c 	.word	0x2000116c

0800d3e8 <SPI_WIFI_DeInit>:
  * @brief  DeInitialize the SPI
  * @param  None
  * @retval None
  */
int8_t SPI_WIFI_DeInit(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
  HAL_SPI_DeInit( &hspi );
 800d3ec:	4802      	ldr	r0, [pc, #8]	; (800d3f8 <SPI_WIFI_DeInit+0x10>)
 800d3ee:	f7fb fb52 	bl	8008a96 <HAL_SPI_DeInit>
  osMutexDelete(es_wifi_mutex);
  osSemaphoreDelete(spi_tx_sem);
  osSemaphoreDelete(spi_rx_sem);
  osSemaphoreDelete(cmddata_rdy_rising_sem);
#endif
  return 0;
 800d3f2:	2300      	movs	r3, #0
}
 800d3f4:	4618      	mov	r0, r3
 800d3f6:	bd80      	pop	{r7, pc}
 800d3f8:	2000116c 	.word	0x2000116c

0800d3fc <wait_cmddata_rdy_high>:
  * @param  timeout : send timeout in mS
  * @retval Length of received data (payload)
  */

int wait_cmddata_rdy_high(int timeout)
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b084      	sub	sp, #16
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
  int tickstart = HAL_GetTick();
 800d404:	f7f8 f81c 	bl	8005440 <HAL_GetTick>
 800d408:	4603      	mov	r3, r0
 800d40a:	60fb      	str	r3, [r7, #12]
  while (WIFI_IS_CMDDATA_READY()==0)
 800d40c:	e00a      	b.n	800d424 <wait_cmddata_rdy_high+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800d40e:	f7f8 f817 	bl	8005440 <HAL_GetTick>
 800d412:	4602      	mov	r2, r0
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	1ad2      	subs	r2, r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d902      	bls.n	800d424 <wait_cmddata_rdy_high+0x28>
    {
      return -1;
 800d41e:	f04f 33ff 	mov.w	r3, #4294967295
 800d422:	e007      	b.n	800d434 <wait_cmddata_rdy_high+0x38>
  while (WIFI_IS_CMDDATA_READY()==0)
 800d424:	2102      	movs	r1, #2
 800d426:	4805      	ldr	r0, [pc, #20]	; (800d43c <wait_cmddata_rdy_high+0x40>)
 800d428:	f7f8 fd38 	bl	8005e9c <HAL_GPIO_ReadPin>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b01      	cmp	r3, #1
 800d430:	d1ed      	bne.n	800d40e <wait_cmddata_rdy_high+0x12>
    }
  }
  return 0;
 800d432:	2300      	movs	r3, #0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3710      	adds	r7, #16
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}
 800d43c:	48001000 	.word	0x48001000

0800d440 <wait_cmddata_rdy_rising_event>:



int wait_cmddata_rdy_rising_event(int timeout)
{
 800d440:	b580      	push	{r7, lr}
 800d442:	b084      	sub	sp, #16
 800d444:	af00      	add	r7, sp, #0
 800d446:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(cmddata_rdy_rising_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 800d448:	f7f7 fffa 	bl	8005440 <HAL_GetTick>
 800d44c:	4603      	mov	r3, r0
 800d44e:	60fb      	str	r3, [r7, #12]
  while (cmddata_rdy_rising_event==1)
 800d450:	e00a      	b.n	800d468 <wait_cmddata_rdy_rising_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800d452:	f7f7 fff5 	bl	8005440 <HAL_GetTick>
 800d456:	4602      	mov	r2, r0
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	1ad2      	subs	r2, r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d902      	bls.n	800d468 <wait_cmddata_rdy_rising_event+0x28>
    {
      return -1;
 800d462:	f04f 33ff 	mov.w	r3, #4294967295
 800d466:	e004      	b.n	800d472 <wait_cmddata_rdy_rising_event+0x32>
  while (cmddata_rdy_rising_event==1)
 800d468:	4b04      	ldr	r3, [pc, #16]	; (800d47c <wait_cmddata_rdy_rising_event+0x3c>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d0f0      	beq.n	800d452 <wait_cmddata_rdy_rising_event+0x12>
    }
  }
  return 0; 
 800d470:	2300      	movs	r3, #0
#endif
}
 800d472:	4618      	mov	r0, r3
 800d474:	3710      	adds	r7, #16
 800d476:	46bd      	mov	sp, r7
 800d478:	bd80      	pop	{r7, pc}
 800d47a:	bf00      	nop
 800d47c:	200011d8 	.word	0x200011d8

0800d480 <wait_spi_rx_event>:

int wait_spi_rx_event(int timeout)
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b084      	sub	sp, #16
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_rx_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 800d488:	f7f7 ffda 	bl	8005440 <HAL_GetTick>
 800d48c:	4603      	mov	r3, r0
 800d48e:	60fb      	str	r3, [r7, #12]
  while (spi_rx_event==1)
 800d490:	e00a      	b.n	800d4a8 <wait_spi_rx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800d492:	f7f7 ffd5 	bl	8005440 <HAL_GetTick>
 800d496:	4602      	mov	r2, r0
 800d498:	68fb      	ldr	r3, [r7, #12]
 800d49a:	1ad2      	subs	r2, r2, r3
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	429a      	cmp	r2, r3
 800d4a0:	d902      	bls.n	800d4a8 <wait_spi_rx_event+0x28>
    {
      return -1;
 800d4a2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4a6:	e004      	b.n	800d4b2 <wait_spi_rx_event+0x32>
  while (spi_rx_event==1)
 800d4a8:	4b04      	ldr	r3, [pc, #16]	; (800d4bc <wait_spi_rx_event+0x3c>)
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	2b01      	cmp	r3, #1
 800d4ae:	d0f0      	beq.n	800d492 <wait_spi_rx_event+0x12>
    }
  }
  return 0; 
 800d4b0:	2300      	movs	r3, #0
#endif
}
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	3710      	adds	r7, #16
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	bd80      	pop	{r7, pc}
 800d4ba:	bf00      	nop
 800d4bc:	200011d0 	.word	0x200011d0

0800d4c0 <wait_spi_tx_event>:

int wait_spi_tx_event(int timeout)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
#ifdef SEM_WAIT
   return SEM_WAIT(spi_tx_sem, timeout); 
#else
  int tickstart = HAL_GetTick();
 800d4c8:	f7f7 ffba 	bl	8005440 <HAL_GetTick>
 800d4cc:	4603      	mov	r3, r0
 800d4ce:	60fb      	str	r3, [r7, #12]
  while (spi_tx_event==1)
 800d4d0:	e00a      	b.n	800d4e8 <wait_spi_tx_event+0x28>
  {
    if((HAL_GetTick() - tickstart ) > timeout)
 800d4d2:	f7f7 ffb5 	bl	8005440 <HAL_GetTick>
 800d4d6:	4602      	mov	r2, r0
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	1ad2      	subs	r2, r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d902      	bls.n	800d4e8 <wait_spi_tx_event+0x28>
    {
      return -1;
 800d4e2:	f04f 33ff 	mov.w	r3, #4294967295
 800d4e6:	e004      	b.n	800d4f2 <wait_spi_tx_event+0x32>
  while (spi_tx_event==1)
 800d4e8:	4b04      	ldr	r3, [pc, #16]	; (800d4fc <wait_spi_tx_event+0x3c>)
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d0f0      	beq.n	800d4d2 <wait_spi_tx_event+0x12>
    }
  }
  return 0; 
 800d4f0:	2300      	movs	r3, #0
#endif
}
 800d4f2:	4618      	mov	r0, r3
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}
 800d4fa:	bf00      	nop
 800d4fc:	200011d4 	.word	0x200011d4

0800d500 <SPI_WIFI_ReceiveData>:



int16_t SPI_WIFI_ReceiveData(uint8_t *pData, uint16_t len, uint32_t timeout)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b086      	sub	sp, #24
 800d504:	af00      	add	r7, sp, #0
 800d506:	60f8      	str	r0, [r7, #12]
 800d508:	460b      	mov	r3, r1
 800d50a:	607a      	str	r2, [r7, #4]
 800d50c:	817b      	strh	r3, [r7, #10]
  int16_t length = 0;
 800d50e:	2300      	movs	r3, #0
 800d510:	82fb      	strh	r3, [r7, #22]
  uint8_t tmp[2];
  
  WIFI_DISABLE_NSS(); 
 800d512:	2201      	movs	r2, #1
 800d514:	2101      	movs	r1, #1
 800d516:	4834      	ldr	r0, [pc, #208]	; (800d5e8 <SPI_WIFI_ReceiveData+0xe8>)
 800d518:	f7f8 fcd8 	bl	8005ecc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  SPI_WIFI_DelayUs(3);
 800d51c:	2003      	movs	r0, #3
 800d51e:	f000 f8e3 	bl	800d6e8 <SPI_WIFI_DelayUs>


  if (wait_cmddata_rdy_rising_event(timeout)<0)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	4618      	mov	r0, r3
 800d526:	f7ff ff8b 	bl	800d440 <wait_cmddata_rdy_rising_event>
 800d52a:	4603      	mov	r3, r0
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	da02      	bge.n	800d536 <SPI_WIFI_ReceiveData+0x36>
  {
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 800d530:	f06f 0302 	mvn.w	r3, #2
 800d534:	e054      	b.n	800d5e0 <SPI_WIFI_ReceiveData+0xe0>
  }

  LOCK_SPI();  
  WIFI_ENABLE_NSS(); 
 800d536:	2200      	movs	r2, #0
 800d538:	2101      	movs	r1, #1
 800d53a:	482b      	ldr	r0, [pc, #172]	; (800d5e8 <SPI_WIFI_ReceiveData+0xe8>)
 800d53c:	f7f8 fcc6 	bl	8005ecc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800d540:	200f      	movs	r0, #15
 800d542:	f000 f8d1 	bl	800d6e8 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 800d546:	e03d      	b.n	800d5c4 <SPI_WIFI_ReceiveData+0xc4>
  {
    if((length < len) || (!len))
 800d548:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800d54c:	897b      	ldrh	r3, [r7, #10]
 800d54e:	429a      	cmp	r2, r3
 800d550:	db02      	blt.n	800d558 <SPI_WIFI_ReceiveData+0x58>
 800d552:	897b      	ldrh	r3, [r7, #10]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d13c      	bne.n	800d5d2 <SPI_WIFI_ReceiveData+0xd2>
    {
      spi_rx_event=1;
 800d558:	4b24      	ldr	r3, [pc, #144]	; (800d5ec <SPI_WIFI_ReceiveData+0xec>)
 800d55a:	2201      	movs	r2, #1
 800d55c:	601a      	str	r2, [r3, #0]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800d55e:	f107 0314 	add.w	r3, r7, #20
 800d562:	2201      	movs	r2, #1
 800d564:	4619      	mov	r1, r3
 800d566:	4822      	ldr	r0, [pc, #136]	; (800d5f0 <SPI_WIFI_ReceiveData+0xf0>)
 800d568:	f7fb fe8e 	bl	8009288 <HAL_SPI_Receive_IT>
 800d56c:	4603      	mov	r3, r0
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d007      	beq.n	800d582 <SPI_WIFI_ReceiveData+0x82>
        WIFI_DISABLE_NSS();
 800d572:	2201      	movs	r2, #1
 800d574:	2101      	movs	r1, #1
 800d576:	481c      	ldr	r0, [pc, #112]	; (800d5e8 <SPI_WIFI_ReceiveData+0xe8>)
 800d578:	f7f8 fca8 	bl	8005ecc <HAL_GPIO_WritePin>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_SPI_FAILED;
 800d57c:	f04f 33ff 	mov.w	r3, #4294967295
 800d580:	e02e      	b.n	800d5e0 <SPI_WIFI_ReceiveData+0xe0>
      }
  
      wait_spi_rx_event(timeout);
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	4618      	mov	r0, r3
 800d586:	f7ff ff7b 	bl	800d480 <wait_spi_rx_event>

      pData[0] = tmp[0];
 800d58a:	7d3a      	ldrb	r2, [r7, #20]
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	701a      	strb	r2, [r3, #0]
      pData[1] = tmp[1];
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	3301      	adds	r3, #1
 800d594:	7d7a      	ldrb	r2, [r7, #21]
 800d596:	701a      	strb	r2, [r3, #0]
      length += 2;
 800d598:	8afb      	ldrh	r3, [r7, #22]
 800d59a:	3302      	adds	r3, #2
 800d59c:	b29b      	uxth	r3, r3
 800d59e:	82fb      	strh	r3, [r7, #22]
      pData  += 2;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	3302      	adds	r3, #2
 800d5a4:	60fb      	str	r3, [r7, #12]
      
      if (length >= ES_WIFI_DATA_SIZE) {
 800d5a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800d5aa:	f5b3 6faf 	cmp.w	r3, #1400	; 0x578
 800d5ae:	db09      	blt.n	800d5c4 <SPI_WIFI_ReceiveData+0xc4>
        WIFI_DISABLE_NSS();
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	2101      	movs	r1, #1
 800d5b4:	480c      	ldr	r0, [pc, #48]	; (800d5e8 <SPI_WIFI_ReceiveData+0xe8>)
 800d5b6:	f7f8 fc89 	bl	8005ecc <HAL_GPIO_WritePin>
        SPI_WIFI_ResetModule();    
 800d5ba:	f7ff fea5 	bl	800d308 <SPI_WIFI_ResetModule>
        UNLOCK_SPI();
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 800d5be:	f06f 0303 	mvn.w	r3, #3
 800d5c2:	e00d      	b.n	800d5e0 <SPI_WIFI_ReceiveData+0xe0>
  while (WIFI_IS_CMDDATA_READY())
 800d5c4:	2102      	movs	r1, #2
 800d5c6:	4808      	ldr	r0, [pc, #32]	; (800d5e8 <SPI_WIFI_ReceiveData+0xe8>)
 800d5c8:	f7f8 fc68 	bl	8005e9c <HAL_GPIO_ReadPin>
 800d5cc:	4603      	mov	r3, r0
 800d5ce:	2b01      	cmp	r3, #1
 800d5d0:	d0ba      	beq.n	800d548 <SPI_WIFI_ReceiveData+0x48>
    else
    {
      break;
    }
  }
  WIFI_DISABLE_NSS(); 
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	2101      	movs	r1, #1
 800d5d6:	4804      	ldr	r0, [pc, #16]	; (800d5e8 <SPI_WIFI_ReceiveData+0xe8>)
 800d5d8:	f7f8 fc78 	bl	8005ecc <HAL_GPIO_WritePin>
  UNLOCK_SPI();
  return length;
 800d5dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 800d5e0:	4618      	mov	r0, r3
 800d5e2:	3718      	adds	r7, #24
 800d5e4:	46bd      	mov	sp, r7
 800d5e6:	bd80      	pop	{r7, pc}
 800d5e8:	48001000 	.word	0x48001000
 800d5ec:	200011d0 	.word	0x200011d0
 800d5f0:	2000116c 	.word	0x2000116c

0800d5f4 <SPI_WIFI_SendData>:
  * @param  len : Data length
  * @param  timeout : send timeout in mS
  * @retval Length of sent data
  */
int16_t SPI_WIFI_SendData( uint8_t *pdata,  uint16_t len, uint32_t timeout)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b086      	sub	sp, #24
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	60f8      	str	r0, [r7, #12]
 800d5fc:	460b      	mov	r3, r1
 800d5fe:	607a      	str	r2, [r7, #4]
 800d600:	817b      	strh	r3, [r7, #10]
  uint8_t Padding[2];
  
  if (wait_cmddata_rdy_high(timeout)<0)
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	4618      	mov	r0, r3
 800d606:	f7ff fef9 	bl	800d3fc <wait_cmddata_rdy_high>
 800d60a:	4603      	mov	r3, r0
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	da02      	bge.n	800d616 <SPI_WIFI_SendData+0x22>
  {
    return ES_WIFI_ERROR_SPI_FAILED;
 800d610:	f04f 33ff 	mov.w	r3, #4294967295
 800d614:	e04f      	b.n	800d6b6 <SPI_WIFI_SendData+0xc2>
  }
    
  // arm to detect rising event
  cmddata_rdy_rising_event=1;
 800d616:	4b2a      	ldr	r3, [pc, #168]	; (800d6c0 <SPI_WIFI_SendData+0xcc>)
 800d618:	2201      	movs	r2, #1
 800d61a:	601a      	str	r2, [r3, #0]
  LOCK_SPI();
  WIFI_ENABLE_NSS();
 800d61c:	2200      	movs	r2, #0
 800d61e:	2101      	movs	r1, #1
 800d620:	4828      	ldr	r0, [pc, #160]	; (800d6c4 <SPI_WIFI_SendData+0xd0>)
 800d622:	f7f8 fc53 	bl	8005ecc <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 800d626:	200f      	movs	r0, #15
 800d628:	f000 f85e 	bl	800d6e8 <SPI_WIFI_DelayUs>
  if (len > 1)
 800d62c:	897b      	ldrh	r3, [r7, #10]
 800d62e:	2b01      	cmp	r3, #1
 800d630:	d919      	bls.n	800d666 <SPI_WIFI_SendData+0x72>
  {
    spi_tx_event=1;
 800d632:	4b25      	ldr	r3, [pc, #148]	; (800d6c8 <SPI_WIFI_SendData+0xd4>)
 800d634:	2201      	movs	r2, #1
 800d636:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 800d638:	897b      	ldrh	r3, [r7, #10]
 800d63a:	085b      	lsrs	r3, r3, #1
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	461a      	mov	r2, r3
 800d640:	68f9      	ldr	r1, [r7, #12]
 800d642:	4822      	ldr	r0, [pc, #136]	; (800d6cc <SPI_WIFI_SendData+0xd8>)
 800d644:	f7fb fd92 	bl	800916c <HAL_SPI_Transmit_IT>
 800d648:	4603      	mov	r3, r0
 800d64a:	2b00      	cmp	r3, #0
 800d64c:	d007      	beq.n	800d65e <SPI_WIFI_SendData+0x6a>
    {
      WIFI_DISABLE_NSS();
 800d64e:	2201      	movs	r2, #1
 800d650:	2101      	movs	r1, #1
 800d652:	481c      	ldr	r0, [pc, #112]	; (800d6c4 <SPI_WIFI_SendData+0xd0>)
 800d654:	f7f8 fc3a 	bl	8005ecc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800d658:	f04f 33ff 	mov.w	r3, #4294967295
 800d65c:	e02b      	b.n	800d6b6 <SPI_WIFI_SendData+0xc2>
    }
    wait_spi_tx_event(timeout);
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	4618      	mov	r0, r3
 800d662:	f7ff ff2d 	bl	800d4c0 <wait_spi_tx_event>
  }
  
  if ( len & 1)
 800d666:	897b      	ldrh	r3, [r7, #10]
 800d668:	f003 0301 	and.w	r3, r3, #1
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d020      	beq.n	800d6b2 <SPI_WIFI_SendData+0xbe>
  {
    Padding[0] = pdata[len-1];
 800d670:	897b      	ldrh	r3, [r7, #10]
 800d672:	3b01      	subs	r3, #1
 800d674:	68fa      	ldr	r2, [r7, #12]
 800d676:	4413      	add	r3, r2
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	753b      	strb	r3, [r7, #20]
    Padding[1] = '\n';
 800d67c:	230a      	movs	r3, #10
 800d67e:	757b      	strb	r3, [r7, #21]

    spi_tx_event=1;
 800d680:	4b11      	ldr	r3, [pc, #68]	; (800d6c8 <SPI_WIFI_SendData+0xd4>)
 800d682:	2201      	movs	r2, #1
 800d684:	601a      	str	r2, [r3, #0]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800d686:	f107 0314 	add.w	r3, r7, #20
 800d68a:	2201      	movs	r2, #1
 800d68c:	4619      	mov	r1, r3
 800d68e:	480f      	ldr	r0, [pc, #60]	; (800d6cc <SPI_WIFI_SendData+0xd8>)
 800d690:	f7fb fd6c 	bl	800916c <HAL_SPI_Transmit_IT>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d007      	beq.n	800d6aa <SPI_WIFI_SendData+0xb6>
    {
      WIFI_DISABLE_NSS();
 800d69a:	2201      	movs	r2, #1
 800d69c:	2101      	movs	r1, #1
 800d69e:	4809      	ldr	r0, [pc, #36]	; (800d6c4 <SPI_WIFI_SendData+0xd0>)
 800d6a0:	f7f8 fc14 	bl	8005ecc <HAL_GPIO_WritePin>
      UNLOCK_SPI();
      return ES_WIFI_ERROR_SPI_FAILED;
 800d6a4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a8:	e005      	b.n	800d6b6 <SPI_WIFI_SendData+0xc2>
    }  
    wait_spi_tx_event(timeout);
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f7ff ff07 	bl	800d4c0 <wait_spi_tx_event>
    
  }
  return len;
 800d6b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3718      	adds	r7, #24
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}
 800d6be:	bf00      	nop
 800d6c0:	200011d8 	.word	0x200011d8
 800d6c4:	48001000 	.word	0x48001000
 800d6c8:	200011d4 	.word	0x200011d4
 800d6cc:	2000116c 	.word	0x2000116c

0800d6d0 <SPI_WIFI_Delay>:
  * @brief  Delay
  * @param  Delay in ms
  * @retval None
  */
void SPI_WIFI_Delay(uint32_t Delay)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f7f7 febd 	bl	8005458 <HAL_Delay>
}
 800d6de:	bf00      	nop
 800d6e0:	3708      	adds	r7, #8
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	bd80      	pop	{r7, pc}
	...

0800d6e8 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 800d6e8:	b580      	push	{r7, lr}
 800d6ea:	b086      	sub	sp, #24
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]
  uint32_t       loop_per_us;
  static  uint32_t cycle_per_loop=0;

  // calibration happen on first call for a duration of 1 ms * nbcycle per loop 
  // 10 cycle for STM32L4
  if (cycle_per_loop == 0 ) 
 800d6f0:	4b1f      	ldr	r3, [pc, #124]	; (800d770 <SPI_WIFI_DelayUs+0x88>)
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	2b00      	cmp	r3, #0
 800d6f6:	d120      	bne.n	800d73a <SPI_WIFI_DelayUs+0x52>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000L);
 800d6f8:	4b1e      	ldr	r3, [pc, #120]	; (800d774 <SPI_WIFI_DelayUs+0x8c>)
 800d6fa:	681b      	ldr	r3, [r3, #0]
 800d6fc:	4a1e      	ldr	r2, [pc, #120]	; (800d778 <SPI_WIFI_DelayUs+0x90>)
 800d6fe:	fba2 2303 	umull	r2, r3, r2, r3
 800d702:	099b      	lsrs	r3, r3, #6
 800d704:	617b      	str	r3, [r7, #20]
     uint32_t   t; 
     ct=cycle_per_ms;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	60bb      	str	r3, [r7, #8]
     t=HAL_GetTick();
 800d70a:	f7f7 fe99 	bl	8005440 <HAL_GetTick>
 800d70e:	6138      	str	r0, [r7, #16]
     while(ct) ct--;
 800d710:	e002      	b.n	800d718 <SPI_WIFI_DelayUs+0x30>
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	3b01      	subs	r3, #1
 800d716:	60bb      	str	r3, [r7, #8]
 800d718:	68bb      	ldr	r3, [r7, #8]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d1f9      	bne.n	800d712 <SPI_WIFI_DelayUs+0x2a>
     cycle_per_loop=HAL_GetTick()-t;  
 800d71e:	f7f7 fe8f 	bl	8005440 <HAL_GetTick>
 800d722:	4602      	mov	r2, r0
 800d724:	693b      	ldr	r3, [r7, #16]
 800d726:	1ad3      	subs	r3, r2, r3
 800d728:	4a11      	ldr	r2, [pc, #68]	; (800d770 <SPI_WIFI_DelayUs+0x88>)
 800d72a:	6013      	str	r3, [r2, #0]
     if (cycle_per_loop==0) cycle_per_loop=1;
 800d72c:	4b10      	ldr	r3, [pc, #64]	; (800d770 <SPI_WIFI_DelayUs+0x88>)
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	2b00      	cmp	r3, #0
 800d732:	d102      	bne.n	800d73a <SPI_WIFI_DelayUs+0x52>
 800d734:	4b0e      	ldr	r3, [pc, #56]	; (800d770 <SPI_WIFI_DelayUs+0x88>)
 800d736:	2201      	movs	r2, #1
 800d738:	601a      	str	r2, [r3, #0]
  }

  loop_per_us = SystemCoreClock/1000000/cycle_per_loop;
 800d73a:	4b0e      	ldr	r3, [pc, #56]	; (800d774 <SPI_WIFI_DelayUs+0x8c>)
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a0f      	ldr	r2, [pc, #60]	; (800d77c <SPI_WIFI_DelayUs+0x94>)
 800d740:	fba2 2303 	umull	r2, r3, r2, r3
 800d744:	0c9a      	lsrs	r2, r3, #18
 800d746:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <SPI_WIFI_DelayUs+0x88>)
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d74e:	60fb      	str	r3, [r7, #12]
  ct = n * loop_per_us;
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	fb02 f303 	mul.w	r3, r2, r3
 800d758:	60bb      	str	r3, [r7, #8]
  while(ct) ct--;
 800d75a:	e002      	b.n	800d762 <SPI_WIFI_DelayUs+0x7a>
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	3b01      	subs	r3, #1
 800d760:	60bb      	str	r3, [r7, #8]
 800d762:	68bb      	ldr	r3, [r7, #8]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d1f9      	bne.n	800d75c <SPI_WIFI_DelayUs+0x74>
  return;
 800d768:	bf00      	nop
}
 800d76a:	3718      	adds	r7, #24
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}
 800d770:	200011dc 	.word	0x200011dc
 800d774:	20000000 	.word	0x20000000
 800d778:	10624dd3 	.word	0x10624dd3
 800d77c:	431bde83 	.word	0x431bde83

0800d780 <HAL_SPI_RxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d780:	b480      	push	{r7}
 800d782:	b083      	sub	sp, #12
 800d784:	af00      	add	r7, sp, #0
 800d786:	6078      	str	r0, [r7, #4]
  if (spi_rx_event)
 800d788:	4b06      	ldr	r3, [pc, #24]	; (800d7a4 <HAL_SPI_RxCpltCallback+0x24>)
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d002      	beq.n	800d796 <HAL_SPI_RxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event=0;
 800d790:	4b04      	ldr	r3, [pc, #16]	; (800d7a4 <HAL_SPI_RxCpltCallback+0x24>)
 800d792:	2200      	movs	r2, #0
 800d794:	601a      	str	r2, [r3, #0]
  }
}
 800d796:	bf00      	nop
 800d798:	370c      	adds	r7, #12
 800d79a:	46bd      	mov	sp, r7
 800d79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7a0:	4770      	bx	lr
 800d7a2:	bf00      	nop
 800d7a4:	200011d0 	.word	0x200011d0

0800d7a8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800d7a8:	b480      	push	{r7}
 800d7aa:	b083      	sub	sp, #12
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
  if (spi_tx_event)
 800d7b0:	4b06      	ldr	r3, [pc, #24]	; (800d7cc <HAL_SPI_TxCpltCallback+0x24>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d002      	beq.n	800d7be <HAL_SPI_TxCpltCallback+0x16>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event=0;
 800d7b8:	4b04      	ldr	r3, [pc, #16]	; (800d7cc <HAL_SPI_TxCpltCallback+0x24>)
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	601a      	str	r2, [r3, #0]
  }
}
 800d7be:	bf00      	nop
 800d7c0:	370c      	adds	r7, #12
 800d7c2:	46bd      	mov	sp, r7
 800d7c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c8:	4770      	bx	lr
 800d7ca:	bf00      	nop
 800d7cc:	200011d4 	.word	0x200011d4

0800d7d0 <SPI_WIFI_ISR>:
  * @brief  Interrupt handler for  Data RDY signal
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	af00      	add	r7, sp, #0
   if (cmddata_rdy_rising_event==1)  
 800d7d4:	4b05      	ldr	r3, [pc, #20]	; (800d7ec <SPI_WIFI_ISR+0x1c>)
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	2b01      	cmp	r3, #1
 800d7da:	d102      	bne.n	800d7e2 <SPI_WIFI_ISR+0x12>
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event=0;
 800d7dc:	4b03      	ldr	r3, [pc, #12]	; (800d7ec <SPI_WIFI_ISR+0x1c>)
 800d7de:	2200      	movs	r2, #0
 800d7e0:	601a      	str	r2, [r3, #0]
   }
}
 800d7e2:	bf00      	nop
 800d7e4:	46bd      	mov	sp, r7
 800d7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ea:	4770      	bx	lr
 800d7ec:	200011d8 	.word	0x200011d8

0800d7f0 <WIFI_Init>:
  * @brief  Initialiaze the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b084      	sub	sp, #16
 800d7f4:	af02      	add	r7, sp, #8
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	71fb      	strb	r3, [r7, #7]
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj, 
 800d7fa:	4b0d      	ldr	r3, [pc, #52]	; (800d830 <WIFI_Init+0x40>)
 800d7fc:	9301      	str	r3, [sp, #4]
 800d7fe:	4b0d      	ldr	r3, [pc, #52]	; (800d834 <WIFI_Init+0x44>)
 800d800:	9300      	str	r3, [sp, #0]
 800d802:	4b0d      	ldr	r3, [pc, #52]	; (800d838 <WIFI_Init+0x48>)
 800d804:	4a0d      	ldr	r2, [pc, #52]	; (800d83c <WIFI_Init+0x4c>)
 800d806:	490e      	ldr	r1, [pc, #56]	; (800d840 <WIFI_Init+0x50>)
 800d808:	480e      	ldr	r0, [pc, #56]	; (800d844 <WIFI_Init+0x54>)
 800d80a:	f7f6 ffe1 	bl	80047d0 <ES_WIFI_RegisterBusIO>
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d107      	bne.n	800d824 <WIFI_Init+0x34>
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800d814:	480b      	ldr	r0, [pc, #44]	; (800d844 <WIFI_Init+0x54>)
 800d816:	f7f6 ffad 	bl	8004774 <ES_WIFI_Init>
 800d81a:	4603      	mov	r3, r0
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d101      	bne.n	800d824 <WIFI_Init+0x34>
    {
      ret = WIFI_STATUS_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	71fb      	strb	r3, [r7, #7]
    }
  }
  return ret;
 800d824:	79fb      	ldrb	r3, [r7, #7]
}
 800d826:	4618      	mov	r0, r3
 800d828:	3708      	adds	r7, #8
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	0800d501 	.word	0x0800d501
 800d834:	0800d5f5 	.word	0x0800d5f5
 800d838:	0800d6d1 	.word	0x0800d6d1
 800d83c:	0800d3e9 	.word	0x0800d3e9
 800d840:	0800d24d 	.word	0x0800d24d
 800d844:	200011e0 	.word	0x200011e0

0800d848 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID, 
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 800d848:	b580      	push	{r7, lr}
 800d84a:	b086      	sub	sp, #24
 800d84c:	af00      	add	r7, sp, #0
 800d84e:	60f8      	str	r0, [r7, #12]
 800d850:	60b9      	str	r1, [r7, #8]
 800d852:	4613      	mov	r3, r2
 800d854:	71fb      	strb	r3, [r7, #7]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 800d856:	2301      	movs	r3, #1
 800d858:	75fb      	strb	r3, [r7, #23]
 
  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 800d85a:	79fb      	ldrb	r3, [r7, #7]
 800d85c:	68ba      	ldr	r2, [r7, #8]
 800d85e:	68f9      	ldr	r1, [r7, #12]
 800d860:	4809      	ldr	r0, [pc, #36]	; (800d888 <WIFI_Connect+0x40>)
 800d862:	f7f6 ffe9 	bl	8004838 <ES_WIFI_Connect>
 800d866:	4603      	mov	r3, r0
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d107      	bne.n	800d87c <WIFI_Connect+0x34>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 800d86c:	4806      	ldr	r0, [pc, #24]	; (800d888 <WIFI_Connect+0x40>)
 800d86e:	f7f7 f887 	bl	8004980 <ES_WIFI_GetNetworkSettings>
 800d872:	4603      	mov	r3, r0
 800d874:	2b00      	cmp	r3, #0
 800d876:	d101      	bne.n	800d87c <WIFI_Connect+0x34>
    {
       ret = WIFI_STATUS_OK;
 800d878:	2300      	movs	r3, #0
 800d87a:	75fb      	strb	r3, [r7, #23]
    }
    
  }
  return ret;
 800d87c:	7dfb      	ldrb	r3, [r7, #23]
}
 800d87e:	4618      	mov	r0, r3
 800d880:	3718      	adds	r7, #24
 800d882:	46bd      	mov	sp, r7
 800d884:	bd80      	pop	{r7, pc}
 800d886:	bf00      	nop
 800d888:	200011e0 	.word	0x200011e0

0800d88c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b084      	sub	sp, #16
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 800d894:	2301      	movs	r3, #1
 800d896:	73fb      	strb	r3, [r7, #15]
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 800d898:	6879      	ldr	r1, [r7, #4]
 800d89a:	4806      	ldr	r0, [pc, #24]	; (800d8b4 <WIFI_GetMAC_Address+0x28>)
 800d89c:	f7f7 f89a 	bl	80049d4 <ES_WIFI_GetMACAddress>
 800d8a0:	4603      	mov	r3, r0
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d101      	bne.n	800d8aa <WIFI_GetMAC_Address+0x1e>
  {
    ret = WIFI_STATUS_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800d8aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}
 800d8b4:	200011e0 	.word	0x200011e0

0800d8b8 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 800d8c0:	2301      	movs	r3, #1
 800d8c2:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800d8c4:	4809      	ldr	r0, [pc, #36]	; (800d8ec <WIFI_GetIP_Address+0x34>)
 800d8c6:	f7f7 f82f 	bl	8004928 <ES_WIFI_IsConnected>
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	2b01      	cmp	r3, #1
 800d8ce:	d107      	bne.n	800d8e0 <WIFI_GetIP_Address+0x28>
 800d8d0:	4b06      	ldr	r3, [pc, #24]	; (800d8ec <WIFI_GetIP_Address+0x34>)
 800d8d2:	f8d3 30d5 	ldr.w	r3, [r3, #213]	; 0xd5
 800d8d6:	461a      	mov	r2, r3
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	601a      	str	r2, [r3, #0]
    ret = WIFI_STATUS_OK;
 800d8dc:	2300      	movs	r3, #0
 800d8de:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800d8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
 800d8ea:	bf00      	nop
 800d8ec:	200011e0 	.word	0x200011e0

0800d8f0 <WIFI_GetHostAddress>:
  * @param  location : Host URL
  * @param  ipaddr : array of the IP address
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetHostAddress(const char *location, uint8_t *ipaddr)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
 800d8f8:	6039      	str	r1, [r7, #0]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	73fb      	strb	r3, [r7, #15]
  
  if (ES_WIFI_DNS_LookUp(&EsWifiObj, location, ipaddr) == ES_WIFI_STATUS_OK)
 800d8fe:	683a      	ldr	r2, [r7, #0]
 800d900:	6879      	ldr	r1, [r7, #4]
 800d902:	4806      	ldr	r0, [pc, #24]	; (800d91c <WIFI_GetHostAddress+0x2c>)
 800d904:	f7f7 f898 	bl	8004a38 <ES_WIFI_DNS_LookUp>
 800d908:	4603      	mov	r3, r0
 800d90a:	2b00      	cmp	r3, #0
 800d90c:	d101      	bne.n	800d912 <WIFI_GetHostAddress+0x22>
  {
    return WIFI_STATUS_OK;
 800d90e:	2300      	movs	r3, #0
 800d910:	e000      	b.n	800d914 <WIFI_GetHostAddress+0x24>
  }
  
  return ret;
 800d912:	7bfb      	ldrb	r3, [r7, #15]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	200011e0 	.word	0x200011e0

0800d920 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 800d920:	b580      	push	{r7, lr}
 800d922:	b08a      	sub	sp, #40	; 0x28
 800d924:	af00      	add	r7, sp, #0
 800d926:	60f8      	str	r0, [r7, #12]
 800d928:	607a      	str	r2, [r7, #4]
 800d92a:	603b      	str	r3, [r7, #0]
 800d92c:	460b      	mov	r3, r1
 800d92e:	72fb      	strb	r3, [r7, #11]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800d930:	2301      	movs	r3, #1
 800d932:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	747b      	strb	r3, [r7, #17]
  conn.RemotePort = port;
 800d93c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d93e:	827b      	strh	r3, [r7, #18]
  conn.LocalPort = local_port;
 800d940:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800d942:	82bb      	strh	r3, [r7, #20]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800d944:	7afb      	ldrb	r3, [r7, #11]
 800d946:	2b00      	cmp	r3, #0
 800d948:	bf14      	ite	ne
 800d94a:	2301      	movne	r3, #1
 800d94c:	2300      	moveq	r3, #0
 800d94e:	b2db      	uxtb	r3, r3
 800d950:	743b      	strb	r3, [r7, #16]
  conn.RemoteIP[0] = ipaddr[0];
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	75bb      	strb	r3, [r7, #22]
  conn.RemoteIP[1] = ipaddr[1];
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	785b      	ldrb	r3, [r3, #1]
 800d95c:	75fb      	strb	r3, [r7, #23]
  conn.RemoteIP[2] = ipaddr[2];
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	789b      	ldrb	r3, [r3, #2]
 800d962:	763b      	strb	r3, [r7, #24]
  conn.RemoteIP[3] = ipaddr[3];
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	78db      	ldrb	r3, [r3, #3]
 800d968:	767b      	strb	r3, [r7, #25]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800d96a:	f107 0310 	add.w	r3, r7, #16
 800d96e:	4619      	mov	r1, r3
 800d970:	4807      	ldr	r0, [pc, #28]	; (800d990 <WIFI_OpenClientConnection+0x70>)
 800d972:	f7f7 f895 	bl	8004aa0 <ES_WIFI_StartClientConnection>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d102      	bne.n	800d982 <WIFI_OpenClientConnection+0x62>
  {
    ret = WIFI_STATUS_OK;
 800d97c:	2300      	movs	r3, #0
 800d97e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  return ret;
 800d982:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d986:	4618      	mov	r0, r3
 800d988:	3728      	adds	r7, #40	; 0x28
 800d98a:	46bd      	mov	sp, r7
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	200011e0 	.word	0x200011e0

0800d994 <WIFI_CloseClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_CloseClientConnection(uint32_t socket)
{
 800d994:	b580      	push	{r7, lr}
 800d996:	b088      	sub	sp, #32
 800d998:	af00      	add	r7, sp, #0
 800d99a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;  
 800d99c:	2301      	movs	r3, #1
 800d99e:	77fb      	strb	r3, [r7, #31]
  ES_WIFI_Conn_t conn;
  conn.Number = socket;
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	b2db      	uxtb	r3, r3
 800d9a4:	727b      	strb	r3, [r7, #9]
  
  if(ES_WIFI_StopClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 800d9a6:	f107 0308 	add.w	r3, r7, #8
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4806      	ldr	r0, [pc, #24]	; (800d9c8 <WIFI_CloseClientConnection+0x34>)
 800d9ae:	f7f7 f933 	bl	8004c18 <ES_WIFI_StopClientConnection>
 800d9b2:	4603      	mov	r3, r0
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d101      	bne.n	800d9bc <WIFI_CloseClientConnection+0x28>
  {
    ret = WIFI_STATUS_OK;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	77fb      	strb	r3, [r7, #31]
  }
  return ret; 
 800d9bc:	7ffb      	ldrb	r3, [r7, #31]
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3720      	adds	r7, #32
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	200011e0 	.word	0x200011e0

0800d9cc <WIFI_SendData>:
  * @param  pdata : pointer to data to be sent
  * @param  len : length of data to be sent
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b088      	sub	sp, #32
 800d9d0:	af02      	add	r7, sp, #8
 800d9d2:	60b9      	str	r1, [r7, #8]
 800d9d4:	607b      	str	r3, [r7, #4]
 800d9d6:	4603      	mov	r3, r0
 800d9d8:	73fb      	strb	r3, [r7, #15]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800d9de:	2301      	movs	r3, #1
 800d9e0:	75fb      	strb	r3, [r7, #23]

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800d9e2:	89ba      	ldrh	r2, [r7, #12]
 800d9e4:	7bf9      	ldrb	r1, [r7, #15]
 800d9e6:	6a3b      	ldr	r3, [r7, #32]
 800d9e8:	9301      	str	r3, [sp, #4]
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	9300      	str	r3, [sp, #0]
 800d9ee:	4613      	mov	r3, r2
 800d9f0:	68ba      	ldr	r2, [r7, #8]
 800d9f2:	4806      	ldr	r0, [pc, #24]	; (800da0c <WIFI_SendData+0x40>)
 800d9f4:	f7f7 f94a 	bl	8004c8c <ES_WIFI_SendData>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d101      	bne.n	800da02 <WIFI_SendData+0x36>
    {
      ret = WIFI_STATUS_OK;
 800d9fe:	2300      	movs	r3, #0
 800da00:	75fb      	strb	r3, [r7, #23]
    }

  return ret;
 800da02:	7dfb      	ldrb	r3, [r7, #23]
}
 800da04:	4618      	mov	r0, r3
 800da06:	3718      	adds	r7, #24
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}
 800da0c:	200011e0 	.word	0x200011e0

0800da10 <WIFI_SendDataTo>:



WIFI_Status_t WIFI_SendDataTo(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t port)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b08a      	sub	sp, #40	; 0x28
 800da14:	af04      	add	r7, sp, #16
 800da16:	60b9      	str	r1, [r7, #8]
 800da18:	607b      	str	r3, [r7, #4]
 800da1a:	4603      	mov	r3, r0
 800da1c:	73fb      	strb	r3, [r7, #15]
 800da1e:	4613      	mov	r3, r2
 800da20:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800da22:	2301      	movs	r3, #1
 800da24:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_SendDataTo(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 800da26:	89ba      	ldrh	r2, [r7, #12]
 800da28:	7bf9      	ldrb	r1, [r7, #15]
 800da2a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800da2c:	9303      	str	r3, [sp, #12]
 800da2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da30:	9302      	str	r3, [sp, #8]
 800da32:	6a3b      	ldr	r3, [r7, #32]
 800da34:	9301      	str	r3, [sp, #4]
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	9300      	str	r3, [sp, #0]
 800da3a:	4613      	mov	r3, r2
 800da3c:	68ba      	ldr	r2, [r7, #8]
 800da3e:	4806      	ldr	r0, [pc, #24]	; (800da58 <WIFI_SendDataTo+0x48>)
 800da40:	f7f7 f9d8 	bl	8004df4 <ES_WIFI_SendDataTo>
 800da44:	4603      	mov	r3, r0
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <WIFI_SendDataTo+0x3e>
  {
    ret = WIFI_STATUS_OK;
 800da4a:	2300      	movs	r3, #0
 800da4c:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800da4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da50:	4618      	mov	r0, r3
 800da52:	3718      	adds	r7, #24
 800da54:	46bd      	mov	sp, r7
 800da56:	bd80      	pop	{r7, pc}
 800da58:	200011e0 	.word	0x200011e0

0800da5c <WIFI_ReceiveData>:
  * @param  pdata : pointer to Rx buffer
  * @param  *len :  pointer to length of data
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 800da5c:	b580      	push	{r7, lr}
 800da5e:	b088      	sub	sp, #32
 800da60:	af02      	add	r7, sp, #8
 800da62:	60b9      	str	r1, [r7, #8]
 800da64:	607b      	str	r3, [r7, #4]
 800da66:	4603      	mov	r3, r0
 800da68:	73fb      	strb	r3, [r7, #15]
 800da6a:	4613      	mov	r3, r2
 800da6c:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 800da6e:	2301      	movs	r3, #1
 800da70:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 800da72:	89ba      	ldrh	r2, [r7, #12]
 800da74:	7bf9      	ldrb	r1, [r7, #15]
 800da76:	6a3b      	ldr	r3, [r7, #32]
 800da78:	9301      	str	r3, [sp, #4]
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	9300      	str	r3, [sp, #0]
 800da7e:	4613      	mov	r3, r2
 800da80:	68ba      	ldr	r2, [r7, #8]
 800da82:	4806      	ldr	r0, [pc, #24]	; (800da9c <WIFI_ReceiveData+0x40>)
 800da84:	f7f7 fab0 	bl	8004fe8 <ES_WIFI_ReceiveData>
 800da88:	4603      	mov	r3, r0
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d101      	bne.n	800da92 <WIFI_ReceiveData+0x36>
  {
    ret = WIFI_STATUS_OK; 
 800da8e:	2300      	movs	r3, #0
 800da90:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800da92:	7dfb      	ldrb	r3, [r7, #23]
}
 800da94:	4618      	mov	r0, r3
 800da96:	3718      	adds	r7, #24
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	200011e0 	.word	0x200011e0

0800daa0 <WIFI_ReceiveDataFrom>:


WIFI_Status_t WIFI_ReceiveDataFrom(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout, uint8_t *ipaddr, uint16_t *port)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b08a      	sub	sp, #40	; 0x28
 800daa4:	af04      	add	r7, sp, #16
 800daa6:	60b9      	str	r1, [r7, #8]
 800daa8:	607b      	str	r3, [r7, #4]
 800daaa:	4603      	mov	r3, r0
 800daac:	73fb      	strb	r3, [r7, #15]
 800daae:	4613      	mov	r3, r2
 800dab0:	81bb      	strh	r3, [r7, #12]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 800dab2:	2301      	movs	r3, #1
 800dab4:	75fb      	strb	r3, [r7, #23]

  if(ES_WIFI_ReceiveDataFrom(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout, ipaddr, port) == ES_WIFI_STATUS_OK)
 800dab6:	89ba      	ldrh	r2, [r7, #12]
 800dab8:	7bf9      	ldrb	r1, [r7, #15]
 800daba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dabc:	9303      	str	r3, [sp, #12]
 800dabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dac0:	9302      	str	r3, [sp, #8]
 800dac2:	6a3b      	ldr	r3, [r7, #32]
 800dac4:	9301      	str	r3, [sp, #4]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	9300      	str	r3, [sp, #0]
 800daca:	4613      	mov	r3, r2
 800dacc:	68ba      	ldr	r2, [r7, #8]
 800dace:	4806      	ldr	r0, [pc, #24]	; (800dae8 <WIFI_ReceiveDataFrom+0x48>)
 800dad0:	f7f7 fb42 	bl	8005158 <ES_WIFI_ReceiveDataFrom>
 800dad4:	4603      	mov	r3, r0
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d101      	bne.n	800dade <WIFI_ReceiveDataFrom+0x3e>
  {
    ret = WIFI_STATUS_OK; 
 800dada:	2300      	movs	r3, #0
 800dadc:	75fb      	strb	r3, [r7, #23]
  }
  return ret;
 800dade:	7dfb      	ldrb	r3, [r7, #23]
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3718      	adds	r7, #24
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	200011e0 	.word	0x200011e0

0800daec <WIFI_GetModuleFwRevision>:
  * @brief  Return Module firmware revision
  * @param  rev : revision string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleFwRevision(char *rev)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 800daf4:	2301      	movs	r3, #1
 800daf6:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.FW_Rev != NULL)
  {
    strncpy(rev, (char *)EsWifiObj.FW_Rev, ES_WIFI_FW_REV_SIZE);
 800daf8:	2218      	movs	r2, #24
 800dafa:	4905      	ldr	r1, [pc, #20]	; (800db10 <WIFI_GetModuleFwRevision+0x24>)
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f000 ffa0 	bl	800ea42 <strncpy>
    ret = WIFI_STATUS_OK; 
 800db02:	2300      	movs	r3, #0
 800db04:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800db06:	7bfb      	ldrb	r3, [r7, #15]
}
 800db08:	4618      	mov	r0, r3
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}
 800db10:	20001200 	.word	0x20001200

0800db14 <WIFI_GetModuleID>:
  * @brief  Return Module ID
  * @param  Info : Module ID string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleID(char *Id)
{
 800db14:	b580      	push	{r7, lr}
 800db16:	b084      	sub	sp, #16
 800db18:	af00      	add	r7, sp, #0
 800db1a:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 800db1c:	2301      	movs	r3, #1
 800db1e:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_ID != NULL)
  {
    strncpy(Id, (char *)EsWifiObj.Product_ID, ES_WIFI_PRODUCT_ID_SIZE);
 800db20:	2220      	movs	r2, #32
 800db22:	4905      	ldr	r1, [pc, #20]	; (800db38 <WIFI_GetModuleID+0x24>)
 800db24:	6878      	ldr	r0, [r7, #4]
 800db26:	f000 ff8c 	bl	800ea42 <strncpy>
    ret = WIFI_STATUS_OK; 
 800db2a:	2300      	movs	r3, #0
 800db2c:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800db2e:	7bfb      	ldrb	r3, [r7, #15]
}
 800db30:	4618      	mov	r0, r3
 800db32:	3710      	adds	r7, #16
 800db34:	46bd      	mov	sp, r7
 800db36:	bd80      	pop	{r7, pc}
 800db38:	200011e0 	.word	0x200011e0

0800db3c <WIFI_GetModuleName>:
  * @brief  Return Module Name
  * @param  Info : Module Name string
  * @retval Operation status
  */
WIFI_Status_t WIFI_GetModuleName(char *ModuleName)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b084      	sub	sp, #16
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  WIFI_Status_t ret = WIFI_STATUS_ERROR; 
 800db44:	2301      	movs	r3, #1
 800db46:	73fb      	strb	r3, [r7, #15]
  
  if(EsWifiObj.Product_Name != NULL)
  {
    strncpy(ModuleName, (char *)EsWifiObj.Product_Name, ES_WIFI_PRODUCT_NAME_SIZE);
 800db48:	2220      	movs	r2, #32
 800db4a:	4905      	ldr	r1, [pc, #20]	; (800db60 <WIFI_GetModuleName+0x24>)
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f000 ff78 	bl	800ea42 <strncpy>
    ret = WIFI_STATUS_OK; 
 800db52:	2300      	movs	r3, #0
 800db54:	73fb      	strb	r3, [r7, #15]
  }
  return ret;
 800db56:	7bfb      	ldrb	r3, [r7, #15]
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3710      	adds	r7, #16
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	20001248 	.word	0x20001248

0800db64 <atoi>:
 800db64:	220a      	movs	r2, #10
 800db66:	2100      	movs	r1, #0
 800db68:	f001 b874 	b.w	800ec54 <strtol>

0800db6c <__errno>:
 800db6c:	4b01      	ldr	r3, [pc, #4]	; (800db74 <__errno+0x8>)
 800db6e:	6818      	ldr	r0, [r3, #0]
 800db70:	4770      	bx	lr
 800db72:	bf00      	nop
 800db74:	2000000c 	.word	0x2000000c

0800db78 <__libc_init_array>:
 800db78:	b570      	push	{r4, r5, r6, lr}
 800db7a:	4d0d      	ldr	r5, [pc, #52]	; (800dbb0 <__libc_init_array+0x38>)
 800db7c:	4c0d      	ldr	r4, [pc, #52]	; (800dbb4 <__libc_init_array+0x3c>)
 800db7e:	1b64      	subs	r4, r4, r5
 800db80:	10a4      	asrs	r4, r4, #2
 800db82:	2600      	movs	r6, #0
 800db84:	42a6      	cmp	r6, r4
 800db86:	d109      	bne.n	800db9c <__libc_init_array+0x24>
 800db88:	4d0b      	ldr	r5, [pc, #44]	; (800dbb8 <__libc_init_array+0x40>)
 800db8a:	4c0c      	ldr	r4, [pc, #48]	; (800dbbc <__libc_init_array+0x44>)
 800db8c:	f003 fd96 	bl	80116bc <_init>
 800db90:	1b64      	subs	r4, r4, r5
 800db92:	10a4      	asrs	r4, r4, #2
 800db94:	2600      	movs	r6, #0
 800db96:	42a6      	cmp	r6, r4
 800db98:	d105      	bne.n	800dba6 <__libc_init_array+0x2e>
 800db9a:	bd70      	pop	{r4, r5, r6, pc}
 800db9c:	f855 3b04 	ldr.w	r3, [r5], #4
 800dba0:	4798      	blx	r3
 800dba2:	3601      	adds	r6, #1
 800dba4:	e7ee      	b.n	800db84 <__libc_init_array+0xc>
 800dba6:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbaa:	4798      	blx	r3
 800dbac:	3601      	adds	r6, #1
 800dbae:	e7f2      	b.n	800db96 <__libc_init_array+0x1e>
 800dbb0:	08012e48 	.word	0x08012e48
 800dbb4:	08012e48 	.word	0x08012e48
 800dbb8:	08012e48 	.word	0x08012e48
 800dbbc:	08012e4c 	.word	0x08012e4c

0800dbc0 <_localeconv_r>:
 800dbc0:	4800      	ldr	r0, [pc, #0]	; (800dbc4 <_localeconv_r+0x4>)
 800dbc2:	4770      	bx	lr
 800dbc4:	20000160 	.word	0x20000160

0800dbc8 <malloc>:
 800dbc8:	4b02      	ldr	r3, [pc, #8]	; (800dbd4 <malloc+0xc>)
 800dbca:	4601      	mov	r1, r0
 800dbcc:	6818      	ldr	r0, [r3, #0]
 800dbce:	f000 b8cd 	b.w	800dd6c <_malloc_r>
 800dbd2:	bf00      	nop
 800dbd4:	2000000c 	.word	0x2000000c

0800dbd8 <free>:
 800dbd8:	4b02      	ldr	r3, [pc, #8]	; (800dbe4 <free+0xc>)
 800dbda:	4601      	mov	r1, r0
 800dbdc:	6818      	ldr	r0, [r3, #0]
 800dbde:	f000 b859 	b.w	800dc94 <_free_r>
 800dbe2:	bf00      	nop
 800dbe4:	2000000c 	.word	0x2000000c

0800dbe8 <memcmp>:
 800dbe8:	b510      	push	{r4, lr}
 800dbea:	3901      	subs	r1, #1
 800dbec:	4402      	add	r2, r0
 800dbee:	4290      	cmp	r0, r2
 800dbf0:	d101      	bne.n	800dbf6 <memcmp+0xe>
 800dbf2:	2000      	movs	r0, #0
 800dbf4:	e005      	b.n	800dc02 <memcmp+0x1a>
 800dbf6:	7803      	ldrb	r3, [r0, #0]
 800dbf8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800dbfc:	42a3      	cmp	r3, r4
 800dbfe:	d001      	beq.n	800dc04 <memcmp+0x1c>
 800dc00:	1b18      	subs	r0, r3, r4
 800dc02:	bd10      	pop	{r4, pc}
 800dc04:	3001      	adds	r0, #1
 800dc06:	e7f2      	b.n	800dbee <memcmp+0x6>

0800dc08 <memcpy>:
 800dc08:	440a      	add	r2, r1
 800dc0a:	4291      	cmp	r1, r2
 800dc0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc10:	d100      	bne.n	800dc14 <memcpy+0xc>
 800dc12:	4770      	bx	lr
 800dc14:	b510      	push	{r4, lr}
 800dc16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc1e:	4291      	cmp	r1, r2
 800dc20:	d1f9      	bne.n	800dc16 <memcpy+0xe>
 800dc22:	bd10      	pop	{r4, pc}

0800dc24 <memmove>:
 800dc24:	4288      	cmp	r0, r1
 800dc26:	b510      	push	{r4, lr}
 800dc28:	eb01 0402 	add.w	r4, r1, r2
 800dc2c:	d902      	bls.n	800dc34 <memmove+0x10>
 800dc2e:	4284      	cmp	r4, r0
 800dc30:	4623      	mov	r3, r4
 800dc32:	d807      	bhi.n	800dc44 <memmove+0x20>
 800dc34:	1e43      	subs	r3, r0, #1
 800dc36:	42a1      	cmp	r1, r4
 800dc38:	d008      	beq.n	800dc4c <memmove+0x28>
 800dc3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dc3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dc42:	e7f8      	b.n	800dc36 <memmove+0x12>
 800dc44:	4402      	add	r2, r0
 800dc46:	4601      	mov	r1, r0
 800dc48:	428a      	cmp	r2, r1
 800dc4a:	d100      	bne.n	800dc4e <memmove+0x2a>
 800dc4c:	bd10      	pop	{r4, pc}
 800dc4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dc52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dc56:	e7f7      	b.n	800dc48 <memmove+0x24>

0800dc58 <memset>:
 800dc58:	4402      	add	r2, r0
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	4293      	cmp	r3, r2
 800dc5e:	d100      	bne.n	800dc62 <memset+0xa>
 800dc60:	4770      	bx	lr
 800dc62:	f803 1b01 	strb.w	r1, [r3], #1
 800dc66:	e7f9      	b.n	800dc5c <memset+0x4>

0800dc68 <_calloc_r>:
 800dc68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc6a:	fba1 2402 	umull	r2, r4, r1, r2
 800dc6e:	b94c      	cbnz	r4, 800dc84 <_calloc_r+0x1c>
 800dc70:	4611      	mov	r1, r2
 800dc72:	9201      	str	r2, [sp, #4]
 800dc74:	f000 f87a 	bl	800dd6c <_malloc_r>
 800dc78:	9a01      	ldr	r2, [sp, #4]
 800dc7a:	4605      	mov	r5, r0
 800dc7c:	b930      	cbnz	r0, 800dc8c <_calloc_r+0x24>
 800dc7e:	4628      	mov	r0, r5
 800dc80:	b003      	add	sp, #12
 800dc82:	bd30      	pop	{r4, r5, pc}
 800dc84:	220c      	movs	r2, #12
 800dc86:	6002      	str	r2, [r0, #0]
 800dc88:	2500      	movs	r5, #0
 800dc8a:	e7f8      	b.n	800dc7e <_calloc_r+0x16>
 800dc8c:	4621      	mov	r1, r4
 800dc8e:	f7ff ffe3 	bl	800dc58 <memset>
 800dc92:	e7f4      	b.n	800dc7e <_calloc_r+0x16>

0800dc94 <_free_r>:
 800dc94:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc96:	2900      	cmp	r1, #0
 800dc98:	d044      	beq.n	800dd24 <_free_r+0x90>
 800dc9a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc9e:	9001      	str	r0, [sp, #4]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	f1a1 0404 	sub.w	r4, r1, #4
 800dca6:	bfb8      	it	lt
 800dca8:	18e4      	addlt	r4, r4, r3
 800dcaa:	f002 f9ad 	bl	8010008 <__malloc_lock>
 800dcae:	4a1e      	ldr	r2, [pc, #120]	; (800dd28 <_free_r+0x94>)
 800dcb0:	9801      	ldr	r0, [sp, #4]
 800dcb2:	6813      	ldr	r3, [r2, #0]
 800dcb4:	b933      	cbnz	r3, 800dcc4 <_free_r+0x30>
 800dcb6:	6063      	str	r3, [r4, #4]
 800dcb8:	6014      	str	r4, [r2, #0]
 800dcba:	b003      	add	sp, #12
 800dcbc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dcc0:	f002 b9a8 	b.w	8010014 <__malloc_unlock>
 800dcc4:	42a3      	cmp	r3, r4
 800dcc6:	d908      	bls.n	800dcda <_free_r+0x46>
 800dcc8:	6825      	ldr	r5, [r4, #0]
 800dcca:	1961      	adds	r1, r4, r5
 800dccc:	428b      	cmp	r3, r1
 800dcce:	bf01      	itttt	eq
 800dcd0:	6819      	ldreq	r1, [r3, #0]
 800dcd2:	685b      	ldreq	r3, [r3, #4]
 800dcd4:	1949      	addeq	r1, r1, r5
 800dcd6:	6021      	streq	r1, [r4, #0]
 800dcd8:	e7ed      	b.n	800dcb6 <_free_r+0x22>
 800dcda:	461a      	mov	r2, r3
 800dcdc:	685b      	ldr	r3, [r3, #4]
 800dcde:	b10b      	cbz	r3, 800dce4 <_free_r+0x50>
 800dce0:	42a3      	cmp	r3, r4
 800dce2:	d9fa      	bls.n	800dcda <_free_r+0x46>
 800dce4:	6811      	ldr	r1, [r2, #0]
 800dce6:	1855      	adds	r5, r2, r1
 800dce8:	42a5      	cmp	r5, r4
 800dcea:	d10b      	bne.n	800dd04 <_free_r+0x70>
 800dcec:	6824      	ldr	r4, [r4, #0]
 800dcee:	4421      	add	r1, r4
 800dcf0:	1854      	adds	r4, r2, r1
 800dcf2:	42a3      	cmp	r3, r4
 800dcf4:	6011      	str	r1, [r2, #0]
 800dcf6:	d1e0      	bne.n	800dcba <_free_r+0x26>
 800dcf8:	681c      	ldr	r4, [r3, #0]
 800dcfa:	685b      	ldr	r3, [r3, #4]
 800dcfc:	6053      	str	r3, [r2, #4]
 800dcfe:	4421      	add	r1, r4
 800dd00:	6011      	str	r1, [r2, #0]
 800dd02:	e7da      	b.n	800dcba <_free_r+0x26>
 800dd04:	d902      	bls.n	800dd0c <_free_r+0x78>
 800dd06:	230c      	movs	r3, #12
 800dd08:	6003      	str	r3, [r0, #0]
 800dd0a:	e7d6      	b.n	800dcba <_free_r+0x26>
 800dd0c:	6825      	ldr	r5, [r4, #0]
 800dd0e:	1961      	adds	r1, r4, r5
 800dd10:	428b      	cmp	r3, r1
 800dd12:	bf04      	itt	eq
 800dd14:	6819      	ldreq	r1, [r3, #0]
 800dd16:	685b      	ldreq	r3, [r3, #4]
 800dd18:	6063      	str	r3, [r4, #4]
 800dd1a:	bf04      	itt	eq
 800dd1c:	1949      	addeq	r1, r1, r5
 800dd1e:	6021      	streq	r1, [r4, #0]
 800dd20:	6054      	str	r4, [r2, #4]
 800dd22:	e7ca      	b.n	800dcba <_free_r+0x26>
 800dd24:	b003      	add	sp, #12
 800dd26:	bd30      	pop	{r4, r5, pc}
 800dd28:	20001888 	.word	0x20001888

0800dd2c <sbrk_aligned>:
 800dd2c:	b570      	push	{r4, r5, r6, lr}
 800dd2e:	4e0e      	ldr	r6, [pc, #56]	; (800dd68 <sbrk_aligned+0x3c>)
 800dd30:	460c      	mov	r4, r1
 800dd32:	6831      	ldr	r1, [r6, #0]
 800dd34:	4605      	mov	r5, r0
 800dd36:	b911      	cbnz	r1, 800dd3e <sbrk_aligned+0x12>
 800dd38:	f000 fd9a 	bl	800e870 <_sbrk_r>
 800dd3c:	6030      	str	r0, [r6, #0]
 800dd3e:	4621      	mov	r1, r4
 800dd40:	4628      	mov	r0, r5
 800dd42:	f000 fd95 	bl	800e870 <_sbrk_r>
 800dd46:	1c43      	adds	r3, r0, #1
 800dd48:	d00a      	beq.n	800dd60 <sbrk_aligned+0x34>
 800dd4a:	1cc4      	adds	r4, r0, #3
 800dd4c:	f024 0403 	bic.w	r4, r4, #3
 800dd50:	42a0      	cmp	r0, r4
 800dd52:	d007      	beq.n	800dd64 <sbrk_aligned+0x38>
 800dd54:	1a21      	subs	r1, r4, r0
 800dd56:	4628      	mov	r0, r5
 800dd58:	f000 fd8a 	bl	800e870 <_sbrk_r>
 800dd5c:	3001      	adds	r0, #1
 800dd5e:	d101      	bne.n	800dd64 <sbrk_aligned+0x38>
 800dd60:	f04f 34ff 	mov.w	r4, #4294967295
 800dd64:	4620      	mov	r0, r4
 800dd66:	bd70      	pop	{r4, r5, r6, pc}
 800dd68:	2000188c 	.word	0x2000188c

0800dd6c <_malloc_r>:
 800dd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd70:	1ccd      	adds	r5, r1, #3
 800dd72:	f025 0503 	bic.w	r5, r5, #3
 800dd76:	3508      	adds	r5, #8
 800dd78:	2d0c      	cmp	r5, #12
 800dd7a:	bf38      	it	cc
 800dd7c:	250c      	movcc	r5, #12
 800dd7e:	2d00      	cmp	r5, #0
 800dd80:	4607      	mov	r7, r0
 800dd82:	db01      	blt.n	800dd88 <_malloc_r+0x1c>
 800dd84:	42a9      	cmp	r1, r5
 800dd86:	d905      	bls.n	800dd94 <_malloc_r+0x28>
 800dd88:	230c      	movs	r3, #12
 800dd8a:	603b      	str	r3, [r7, #0]
 800dd8c:	2600      	movs	r6, #0
 800dd8e:	4630      	mov	r0, r6
 800dd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd94:	4e2e      	ldr	r6, [pc, #184]	; (800de50 <_malloc_r+0xe4>)
 800dd96:	f002 f937 	bl	8010008 <__malloc_lock>
 800dd9a:	6833      	ldr	r3, [r6, #0]
 800dd9c:	461c      	mov	r4, r3
 800dd9e:	bb34      	cbnz	r4, 800ddee <_malloc_r+0x82>
 800dda0:	4629      	mov	r1, r5
 800dda2:	4638      	mov	r0, r7
 800dda4:	f7ff ffc2 	bl	800dd2c <sbrk_aligned>
 800dda8:	1c43      	adds	r3, r0, #1
 800ddaa:	4604      	mov	r4, r0
 800ddac:	d14d      	bne.n	800de4a <_malloc_r+0xde>
 800ddae:	6834      	ldr	r4, [r6, #0]
 800ddb0:	4626      	mov	r6, r4
 800ddb2:	2e00      	cmp	r6, #0
 800ddb4:	d140      	bne.n	800de38 <_malloc_r+0xcc>
 800ddb6:	6823      	ldr	r3, [r4, #0]
 800ddb8:	4631      	mov	r1, r6
 800ddba:	4638      	mov	r0, r7
 800ddbc:	eb04 0803 	add.w	r8, r4, r3
 800ddc0:	f000 fd56 	bl	800e870 <_sbrk_r>
 800ddc4:	4580      	cmp	r8, r0
 800ddc6:	d13a      	bne.n	800de3e <_malloc_r+0xd2>
 800ddc8:	6821      	ldr	r1, [r4, #0]
 800ddca:	3503      	adds	r5, #3
 800ddcc:	1a6d      	subs	r5, r5, r1
 800ddce:	f025 0503 	bic.w	r5, r5, #3
 800ddd2:	3508      	adds	r5, #8
 800ddd4:	2d0c      	cmp	r5, #12
 800ddd6:	bf38      	it	cc
 800ddd8:	250c      	movcc	r5, #12
 800ddda:	4629      	mov	r1, r5
 800dddc:	4638      	mov	r0, r7
 800ddde:	f7ff ffa5 	bl	800dd2c <sbrk_aligned>
 800dde2:	3001      	adds	r0, #1
 800dde4:	d02b      	beq.n	800de3e <_malloc_r+0xd2>
 800dde6:	6823      	ldr	r3, [r4, #0]
 800dde8:	442b      	add	r3, r5
 800ddea:	6023      	str	r3, [r4, #0]
 800ddec:	e00e      	b.n	800de0c <_malloc_r+0xa0>
 800ddee:	6822      	ldr	r2, [r4, #0]
 800ddf0:	1b52      	subs	r2, r2, r5
 800ddf2:	d41e      	bmi.n	800de32 <_malloc_r+0xc6>
 800ddf4:	2a0b      	cmp	r2, #11
 800ddf6:	d916      	bls.n	800de26 <_malloc_r+0xba>
 800ddf8:	1961      	adds	r1, r4, r5
 800ddfa:	42a3      	cmp	r3, r4
 800ddfc:	6025      	str	r5, [r4, #0]
 800ddfe:	bf18      	it	ne
 800de00:	6059      	strne	r1, [r3, #4]
 800de02:	6863      	ldr	r3, [r4, #4]
 800de04:	bf08      	it	eq
 800de06:	6031      	streq	r1, [r6, #0]
 800de08:	5162      	str	r2, [r4, r5]
 800de0a:	604b      	str	r3, [r1, #4]
 800de0c:	4638      	mov	r0, r7
 800de0e:	f104 060b 	add.w	r6, r4, #11
 800de12:	f002 f8ff 	bl	8010014 <__malloc_unlock>
 800de16:	f026 0607 	bic.w	r6, r6, #7
 800de1a:	1d23      	adds	r3, r4, #4
 800de1c:	1af2      	subs	r2, r6, r3
 800de1e:	d0b6      	beq.n	800dd8e <_malloc_r+0x22>
 800de20:	1b9b      	subs	r3, r3, r6
 800de22:	50a3      	str	r3, [r4, r2]
 800de24:	e7b3      	b.n	800dd8e <_malloc_r+0x22>
 800de26:	6862      	ldr	r2, [r4, #4]
 800de28:	42a3      	cmp	r3, r4
 800de2a:	bf0c      	ite	eq
 800de2c:	6032      	streq	r2, [r6, #0]
 800de2e:	605a      	strne	r2, [r3, #4]
 800de30:	e7ec      	b.n	800de0c <_malloc_r+0xa0>
 800de32:	4623      	mov	r3, r4
 800de34:	6864      	ldr	r4, [r4, #4]
 800de36:	e7b2      	b.n	800dd9e <_malloc_r+0x32>
 800de38:	4634      	mov	r4, r6
 800de3a:	6876      	ldr	r6, [r6, #4]
 800de3c:	e7b9      	b.n	800ddb2 <_malloc_r+0x46>
 800de3e:	230c      	movs	r3, #12
 800de40:	603b      	str	r3, [r7, #0]
 800de42:	4638      	mov	r0, r7
 800de44:	f002 f8e6 	bl	8010014 <__malloc_unlock>
 800de48:	e7a1      	b.n	800dd8e <_malloc_r+0x22>
 800de4a:	6025      	str	r5, [r4, #0]
 800de4c:	e7de      	b.n	800de0c <_malloc_r+0xa0>
 800de4e:	bf00      	nop
 800de50:	20001888 	.word	0x20001888

0800de54 <__cvt>:
 800de54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de58:	ec55 4b10 	vmov	r4, r5, d0
 800de5c:	2d00      	cmp	r5, #0
 800de5e:	460e      	mov	r6, r1
 800de60:	4619      	mov	r1, r3
 800de62:	462b      	mov	r3, r5
 800de64:	bfbb      	ittet	lt
 800de66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800de6a:	461d      	movlt	r5, r3
 800de6c:	2300      	movge	r3, #0
 800de6e:	232d      	movlt	r3, #45	; 0x2d
 800de70:	700b      	strb	r3, [r1, #0]
 800de72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800de78:	4691      	mov	r9, r2
 800de7a:	f023 0820 	bic.w	r8, r3, #32
 800de7e:	bfbc      	itt	lt
 800de80:	4622      	movlt	r2, r4
 800de82:	4614      	movlt	r4, r2
 800de84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800de88:	d005      	beq.n	800de96 <__cvt+0x42>
 800de8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800de8e:	d100      	bne.n	800de92 <__cvt+0x3e>
 800de90:	3601      	adds	r6, #1
 800de92:	2102      	movs	r1, #2
 800de94:	e000      	b.n	800de98 <__cvt+0x44>
 800de96:	2103      	movs	r1, #3
 800de98:	ab03      	add	r3, sp, #12
 800de9a:	9301      	str	r3, [sp, #4]
 800de9c:	ab02      	add	r3, sp, #8
 800de9e:	9300      	str	r3, [sp, #0]
 800dea0:	ec45 4b10 	vmov	d0, r4, r5
 800dea4:	4653      	mov	r3, sl
 800dea6:	4632      	mov	r2, r6
 800dea8:	f001 f86a 	bl	800ef80 <_dtoa_r>
 800deac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800deb0:	4607      	mov	r7, r0
 800deb2:	d102      	bne.n	800deba <__cvt+0x66>
 800deb4:	f019 0f01 	tst.w	r9, #1
 800deb8:	d022      	beq.n	800df00 <__cvt+0xac>
 800deba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800debe:	eb07 0906 	add.w	r9, r7, r6
 800dec2:	d110      	bne.n	800dee6 <__cvt+0x92>
 800dec4:	783b      	ldrb	r3, [r7, #0]
 800dec6:	2b30      	cmp	r3, #48	; 0x30
 800dec8:	d10a      	bne.n	800dee0 <__cvt+0x8c>
 800deca:	2200      	movs	r2, #0
 800decc:	2300      	movs	r3, #0
 800dece:	4620      	mov	r0, r4
 800ded0:	4629      	mov	r1, r5
 800ded2:	f7f2 fe09 	bl	8000ae8 <__aeabi_dcmpeq>
 800ded6:	b918      	cbnz	r0, 800dee0 <__cvt+0x8c>
 800ded8:	f1c6 0601 	rsb	r6, r6, #1
 800dedc:	f8ca 6000 	str.w	r6, [sl]
 800dee0:	f8da 3000 	ldr.w	r3, [sl]
 800dee4:	4499      	add	r9, r3
 800dee6:	2200      	movs	r2, #0
 800dee8:	2300      	movs	r3, #0
 800deea:	4620      	mov	r0, r4
 800deec:	4629      	mov	r1, r5
 800deee:	f7f2 fdfb 	bl	8000ae8 <__aeabi_dcmpeq>
 800def2:	b108      	cbz	r0, 800def8 <__cvt+0xa4>
 800def4:	f8cd 900c 	str.w	r9, [sp, #12]
 800def8:	2230      	movs	r2, #48	; 0x30
 800defa:	9b03      	ldr	r3, [sp, #12]
 800defc:	454b      	cmp	r3, r9
 800defe:	d307      	bcc.n	800df10 <__cvt+0xbc>
 800df00:	9b03      	ldr	r3, [sp, #12]
 800df02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800df04:	1bdb      	subs	r3, r3, r7
 800df06:	4638      	mov	r0, r7
 800df08:	6013      	str	r3, [r2, #0]
 800df0a:	b004      	add	sp, #16
 800df0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df10:	1c59      	adds	r1, r3, #1
 800df12:	9103      	str	r1, [sp, #12]
 800df14:	701a      	strb	r2, [r3, #0]
 800df16:	e7f0      	b.n	800defa <__cvt+0xa6>

0800df18 <__exponent>:
 800df18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df1a:	4603      	mov	r3, r0
 800df1c:	2900      	cmp	r1, #0
 800df1e:	bfb8      	it	lt
 800df20:	4249      	neglt	r1, r1
 800df22:	f803 2b02 	strb.w	r2, [r3], #2
 800df26:	bfb4      	ite	lt
 800df28:	222d      	movlt	r2, #45	; 0x2d
 800df2a:	222b      	movge	r2, #43	; 0x2b
 800df2c:	2909      	cmp	r1, #9
 800df2e:	7042      	strb	r2, [r0, #1]
 800df30:	dd2a      	ble.n	800df88 <__exponent+0x70>
 800df32:	f10d 0407 	add.w	r4, sp, #7
 800df36:	46a4      	mov	ip, r4
 800df38:	270a      	movs	r7, #10
 800df3a:	46a6      	mov	lr, r4
 800df3c:	460a      	mov	r2, r1
 800df3e:	fb91 f6f7 	sdiv	r6, r1, r7
 800df42:	fb07 1516 	mls	r5, r7, r6, r1
 800df46:	3530      	adds	r5, #48	; 0x30
 800df48:	2a63      	cmp	r2, #99	; 0x63
 800df4a:	f104 34ff 	add.w	r4, r4, #4294967295
 800df4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800df52:	4631      	mov	r1, r6
 800df54:	dcf1      	bgt.n	800df3a <__exponent+0x22>
 800df56:	3130      	adds	r1, #48	; 0x30
 800df58:	f1ae 0502 	sub.w	r5, lr, #2
 800df5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800df60:	1c44      	adds	r4, r0, #1
 800df62:	4629      	mov	r1, r5
 800df64:	4561      	cmp	r1, ip
 800df66:	d30a      	bcc.n	800df7e <__exponent+0x66>
 800df68:	f10d 0209 	add.w	r2, sp, #9
 800df6c:	eba2 020e 	sub.w	r2, r2, lr
 800df70:	4565      	cmp	r5, ip
 800df72:	bf88      	it	hi
 800df74:	2200      	movhi	r2, #0
 800df76:	4413      	add	r3, r2
 800df78:	1a18      	subs	r0, r3, r0
 800df7a:	b003      	add	sp, #12
 800df7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800df7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800df82:	f804 2f01 	strb.w	r2, [r4, #1]!
 800df86:	e7ed      	b.n	800df64 <__exponent+0x4c>
 800df88:	2330      	movs	r3, #48	; 0x30
 800df8a:	3130      	adds	r1, #48	; 0x30
 800df8c:	7083      	strb	r3, [r0, #2]
 800df8e:	70c1      	strb	r1, [r0, #3]
 800df90:	1d03      	adds	r3, r0, #4
 800df92:	e7f1      	b.n	800df78 <__exponent+0x60>

0800df94 <_printf_float>:
 800df94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df98:	ed2d 8b02 	vpush	{d8}
 800df9c:	b08d      	sub	sp, #52	; 0x34
 800df9e:	460c      	mov	r4, r1
 800dfa0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800dfa4:	4616      	mov	r6, r2
 800dfa6:	461f      	mov	r7, r3
 800dfa8:	4605      	mov	r5, r0
 800dfaa:	f7ff fe09 	bl	800dbc0 <_localeconv_r>
 800dfae:	f8d0 a000 	ldr.w	sl, [r0]
 800dfb2:	4650      	mov	r0, sl
 800dfb4:	f7f2 f916 	bl	80001e4 <strlen>
 800dfb8:	2300      	movs	r3, #0
 800dfba:	930a      	str	r3, [sp, #40]	; 0x28
 800dfbc:	6823      	ldr	r3, [r4, #0]
 800dfbe:	9305      	str	r3, [sp, #20]
 800dfc0:	f8d8 3000 	ldr.w	r3, [r8]
 800dfc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800dfc8:	3307      	adds	r3, #7
 800dfca:	f023 0307 	bic.w	r3, r3, #7
 800dfce:	f103 0208 	add.w	r2, r3, #8
 800dfd2:	f8c8 2000 	str.w	r2, [r8]
 800dfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dfde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dfe2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dfe6:	9307      	str	r3, [sp, #28]
 800dfe8:	f8cd 8018 	str.w	r8, [sp, #24]
 800dfec:	ee08 0a10 	vmov	s16, r0
 800dff0:	4b9f      	ldr	r3, [pc, #636]	; (800e270 <_printf_float+0x2dc>)
 800dff2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dff6:	f04f 32ff 	mov.w	r2, #4294967295
 800dffa:	f7f2 fda7 	bl	8000b4c <__aeabi_dcmpun>
 800dffe:	bb88      	cbnz	r0, 800e064 <_printf_float+0xd0>
 800e000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e004:	4b9a      	ldr	r3, [pc, #616]	; (800e270 <_printf_float+0x2dc>)
 800e006:	f04f 32ff 	mov.w	r2, #4294967295
 800e00a:	f7f2 fd81 	bl	8000b10 <__aeabi_dcmple>
 800e00e:	bb48      	cbnz	r0, 800e064 <_printf_float+0xd0>
 800e010:	2200      	movs	r2, #0
 800e012:	2300      	movs	r3, #0
 800e014:	4640      	mov	r0, r8
 800e016:	4649      	mov	r1, r9
 800e018:	f7f2 fd70 	bl	8000afc <__aeabi_dcmplt>
 800e01c:	b110      	cbz	r0, 800e024 <_printf_float+0x90>
 800e01e:	232d      	movs	r3, #45	; 0x2d
 800e020:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e024:	4b93      	ldr	r3, [pc, #588]	; (800e274 <_printf_float+0x2e0>)
 800e026:	4894      	ldr	r0, [pc, #592]	; (800e278 <_printf_float+0x2e4>)
 800e028:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e02c:	bf94      	ite	ls
 800e02e:	4698      	movls	r8, r3
 800e030:	4680      	movhi	r8, r0
 800e032:	2303      	movs	r3, #3
 800e034:	6123      	str	r3, [r4, #16]
 800e036:	9b05      	ldr	r3, [sp, #20]
 800e038:	f023 0204 	bic.w	r2, r3, #4
 800e03c:	6022      	str	r2, [r4, #0]
 800e03e:	f04f 0900 	mov.w	r9, #0
 800e042:	9700      	str	r7, [sp, #0]
 800e044:	4633      	mov	r3, r6
 800e046:	aa0b      	add	r2, sp, #44	; 0x2c
 800e048:	4621      	mov	r1, r4
 800e04a:	4628      	mov	r0, r5
 800e04c:	f000 f9d8 	bl	800e400 <_printf_common>
 800e050:	3001      	adds	r0, #1
 800e052:	f040 8090 	bne.w	800e176 <_printf_float+0x1e2>
 800e056:	f04f 30ff 	mov.w	r0, #4294967295
 800e05a:	b00d      	add	sp, #52	; 0x34
 800e05c:	ecbd 8b02 	vpop	{d8}
 800e060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e064:	4642      	mov	r2, r8
 800e066:	464b      	mov	r3, r9
 800e068:	4640      	mov	r0, r8
 800e06a:	4649      	mov	r1, r9
 800e06c:	f7f2 fd6e 	bl	8000b4c <__aeabi_dcmpun>
 800e070:	b140      	cbz	r0, 800e084 <_printf_float+0xf0>
 800e072:	464b      	mov	r3, r9
 800e074:	2b00      	cmp	r3, #0
 800e076:	bfbc      	itt	lt
 800e078:	232d      	movlt	r3, #45	; 0x2d
 800e07a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e07e:	487f      	ldr	r0, [pc, #508]	; (800e27c <_printf_float+0x2e8>)
 800e080:	4b7f      	ldr	r3, [pc, #508]	; (800e280 <_printf_float+0x2ec>)
 800e082:	e7d1      	b.n	800e028 <_printf_float+0x94>
 800e084:	6863      	ldr	r3, [r4, #4]
 800e086:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e08a:	9206      	str	r2, [sp, #24]
 800e08c:	1c5a      	adds	r2, r3, #1
 800e08e:	d13f      	bne.n	800e110 <_printf_float+0x17c>
 800e090:	2306      	movs	r3, #6
 800e092:	6063      	str	r3, [r4, #4]
 800e094:	9b05      	ldr	r3, [sp, #20]
 800e096:	6861      	ldr	r1, [r4, #4]
 800e098:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e09c:	2300      	movs	r3, #0
 800e09e:	9303      	str	r3, [sp, #12]
 800e0a0:	ab0a      	add	r3, sp, #40	; 0x28
 800e0a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e0a6:	ab09      	add	r3, sp, #36	; 0x24
 800e0a8:	ec49 8b10 	vmov	d0, r8, r9
 800e0ac:	9300      	str	r3, [sp, #0]
 800e0ae:	6022      	str	r2, [r4, #0]
 800e0b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	f7ff fecd 	bl	800de54 <__cvt>
 800e0ba:	9b06      	ldr	r3, [sp, #24]
 800e0bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e0be:	2b47      	cmp	r3, #71	; 0x47
 800e0c0:	4680      	mov	r8, r0
 800e0c2:	d108      	bne.n	800e0d6 <_printf_float+0x142>
 800e0c4:	1cc8      	adds	r0, r1, #3
 800e0c6:	db02      	blt.n	800e0ce <_printf_float+0x13a>
 800e0c8:	6863      	ldr	r3, [r4, #4]
 800e0ca:	4299      	cmp	r1, r3
 800e0cc:	dd41      	ble.n	800e152 <_printf_float+0x1be>
 800e0ce:	f1ab 0b02 	sub.w	fp, fp, #2
 800e0d2:	fa5f fb8b 	uxtb.w	fp, fp
 800e0d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e0da:	d820      	bhi.n	800e11e <_printf_float+0x18a>
 800e0dc:	3901      	subs	r1, #1
 800e0de:	465a      	mov	r2, fp
 800e0e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e0e4:	9109      	str	r1, [sp, #36]	; 0x24
 800e0e6:	f7ff ff17 	bl	800df18 <__exponent>
 800e0ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e0ec:	1813      	adds	r3, r2, r0
 800e0ee:	2a01      	cmp	r2, #1
 800e0f0:	4681      	mov	r9, r0
 800e0f2:	6123      	str	r3, [r4, #16]
 800e0f4:	dc02      	bgt.n	800e0fc <_printf_float+0x168>
 800e0f6:	6822      	ldr	r2, [r4, #0]
 800e0f8:	07d2      	lsls	r2, r2, #31
 800e0fa:	d501      	bpl.n	800e100 <_printf_float+0x16c>
 800e0fc:	3301      	adds	r3, #1
 800e0fe:	6123      	str	r3, [r4, #16]
 800e100:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e104:	2b00      	cmp	r3, #0
 800e106:	d09c      	beq.n	800e042 <_printf_float+0xae>
 800e108:	232d      	movs	r3, #45	; 0x2d
 800e10a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e10e:	e798      	b.n	800e042 <_printf_float+0xae>
 800e110:	9a06      	ldr	r2, [sp, #24]
 800e112:	2a47      	cmp	r2, #71	; 0x47
 800e114:	d1be      	bne.n	800e094 <_printf_float+0x100>
 800e116:	2b00      	cmp	r3, #0
 800e118:	d1bc      	bne.n	800e094 <_printf_float+0x100>
 800e11a:	2301      	movs	r3, #1
 800e11c:	e7b9      	b.n	800e092 <_printf_float+0xfe>
 800e11e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e122:	d118      	bne.n	800e156 <_printf_float+0x1c2>
 800e124:	2900      	cmp	r1, #0
 800e126:	6863      	ldr	r3, [r4, #4]
 800e128:	dd0b      	ble.n	800e142 <_printf_float+0x1ae>
 800e12a:	6121      	str	r1, [r4, #16]
 800e12c:	b913      	cbnz	r3, 800e134 <_printf_float+0x1a0>
 800e12e:	6822      	ldr	r2, [r4, #0]
 800e130:	07d0      	lsls	r0, r2, #31
 800e132:	d502      	bpl.n	800e13a <_printf_float+0x1a6>
 800e134:	3301      	adds	r3, #1
 800e136:	440b      	add	r3, r1
 800e138:	6123      	str	r3, [r4, #16]
 800e13a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e13c:	f04f 0900 	mov.w	r9, #0
 800e140:	e7de      	b.n	800e100 <_printf_float+0x16c>
 800e142:	b913      	cbnz	r3, 800e14a <_printf_float+0x1b6>
 800e144:	6822      	ldr	r2, [r4, #0]
 800e146:	07d2      	lsls	r2, r2, #31
 800e148:	d501      	bpl.n	800e14e <_printf_float+0x1ba>
 800e14a:	3302      	adds	r3, #2
 800e14c:	e7f4      	b.n	800e138 <_printf_float+0x1a4>
 800e14e:	2301      	movs	r3, #1
 800e150:	e7f2      	b.n	800e138 <_printf_float+0x1a4>
 800e152:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e158:	4299      	cmp	r1, r3
 800e15a:	db05      	blt.n	800e168 <_printf_float+0x1d4>
 800e15c:	6823      	ldr	r3, [r4, #0]
 800e15e:	6121      	str	r1, [r4, #16]
 800e160:	07d8      	lsls	r0, r3, #31
 800e162:	d5ea      	bpl.n	800e13a <_printf_float+0x1a6>
 800e164:	1c4b      	adds	r3, r1, #1
 800e166:	e7e7      	b.n	800e138 <_printf_float+0x1a4>
 800e168:	2900      	cmp	r1, #0
 800e16a:	bfd4      	ite	le
 800e16c:	f1c1 0202 	rsble	r2, r1, #2
 800e170:	2201      	movgt	r2, #1
 800e172:	4413      	add	r3, r2
 800e174:	e7e0      	b.n	800e138 <_printf_float+0x1a4>
 800e176:	6823      	ldr	r3, [r4, #0]
 800e178:	055a      	lsls	r2, r3, #21
 800e17a:	d407      	bmi.n	800e18c <_printf_float+0x1f8>
 800e17c:	6923      	ldr	r3, [r4, #16]
 800e17e:	4642      	mov	r2, r8
 800e180:	4631      	mov	r1, r6
 800e182:	4628      	mov	r0, r5
 800e184:	47b8      	blx	r7
 800e186:	3001      	adds	r0, #1
 800e188:	d12c      	bne.n	800e1e4 <_printf_float+0x250>
 800e18a:	e764      	b.n	800e056 <_printf_float+0xc2>
 800e18c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e190:	f240 80e0 	bls.w	800e354 <_printf_float+0x3c0>
 800e194:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e198:	2200      	movs	r2, #0
 800e19a:	2300      	movs	r3, #0
 800e19c:	f7f2 fca4 	bl	8000ae8 <__aeabi_dcmpeq>
 800e1a0:	2800      	cmp	r0, #0
 800e1a2:	d034      	beq.n	800e20e <_printf_float+0x27a>
 800e1a4:	4a37      	ldr	r2, [pc, #220]	; (800e284 <_printf_float+0x2f0>)
 800e1a6:	2301      	movs	r3, #1
 800e1a8:	4631      	mov	r1, r6
 800e1aa:	4628      	mov	r0, r5
 800e1ac:	47b8      	blx	r7
 800e1ae:	3001      	adds	r0, #1
 800e1b0:	f43f af51 	beq.w	800e056 <_printf_float+0xc2>
 800e1b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e1b8:	429a      	cmp	r2, r3
 800e1ba:	db02      	blt.n	800e1c2 <_printf_float+0x22e>
 800e1bc:	6823      	ldr	r3, [r4, #0]
 800e1be:	07d8      	lsls	r0, r3, #31
 800e1c0:	d510      	bpl.n	800e1e4 <_printf_float+0x250>
 800e1c2:	ee18 3a10 	vmov	r3, s16
 800e1c6:	4652      	mov	r2, sl
 800e1c8:	4631      	mov	r1, r6
 800e1ca:	4628      	mov	r0, r5
 800e1cc:	47b8      	blx	r7
 800e1ce:	3001      	adds	r0, #1
 800e1d0:	f43f af41 	beq.w	800e056 <_printf_float+0xc2>
 800e1d4:	f04f 0800 	mov.w	r8, #0
 800e1d8:	f104 091a 	add.w	r9, r4, #26
 800e1dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	4543      	cmp	r3, r8
 800e1e2:	dc09      	bgt.n	800e1f8 <_printf_float+0x264>
 800e1e4:	6823      	ldr	r3, [r4, #0]
 800e1e6:	079b      	lsls	r3, r3, #30
 800e1e8:	f100 8105 	bmi.w	800e3f6 <_printf_float+0x462>
 800e1ec:	68e0      	ldr	r0, [r4, #12]
 800e1ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1f0:	4298      	cmp	r0, r3
 800e1f2:	bfb8      	it	lt
 800e1f4:	4618      	movlt	r0, r3
 800e1f6:	e730      	b.n	800e05a <_printf_float+0xc6>
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	464a      	mov	r2, r9
 800e1fc:	4631      	mov	r1, r6
 800e1fe:	4628      	mov	r0, r5
 800e200:	47b8      	blx	r7
 800e202:	3001      	adds	r0, #1
 800e204:	f43f af27 	beq.w	800e056 <_printf_float+0xc2>
 800e208:	f108 0801 	add.w	r8, r8, #1
 800e20c:	e7e6      	b.n	800e1dc <_printf_float+0x248>
 800e20e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e210:	2b00      	cmp	r3, #0
 800e212:	dc39      	bgt.n	800e288 <_printf_float+0x2f4>
 800e214:	4a1b      	ldr	r2, [pc, #108]	; (800e284 <_printf_float+0x2f0>)
 800e216:	2301      	movs	r3, #1
 800e218:	4631      	mov	r1, r6
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b8      	blx	r7
 800e21e:	3001      	adds	r0, #1
 800e220:	f43f af19 	beq.w	800e056 <_printf_float+0xc2>
 800e224:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e228:	4313      	orrs	r3, r2
 800e22a:	d102      	bne.n	800e232 <_printf_float+0x29e>
 800e22c:	6823      	ldr	r3, [r4, #0]
 800e22e:	07d9      	lsls	r1, r3, #31
 800e230:	d5d8      	bpl.n	800e1e4 <_printf_float+0x250>
 800e232:	ee18 3a10 	vmov	r3, s16
 800e236:	4652      	mov	r2, sl
 800e238:	4631      	mov	r1, r6
 800e23a:	4628      	mov	r0, r5
 800e23c:	47b8      	blx	r7
 800e23e:	3001      	adds	r0, #1
 800e240:	f43f af09 	beq.w	800e056 <_printf_float+0xc2>
 800e244:	f04f 0900 	mov.w	r9, #0
 800e248:	f104 0a1a 	add.w	sl, r4, #26
 800e24c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e24e:	425b      	negs	r3, r3
 800e250:	454b      	cmp	r3, r9
 800e252:	dc01      	bgt.n	800e258 <_printf_float+0x2c4>
 800e254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e256:	e792      	b.n	800e17e <_printf_float+0x1ea>
 800e258:	2301      	movs	r3, #1
 800e25a:	4652      	mov	r2, sl
 800e25c:	4631      	mov	r1, r6
 800e25e:	4628      	mov	r0, r5
 800e260:	47b8      	blx	r7
 800e262:	3001      	adds	r0, #1
 800e264:	f43f aef7 	beq.w	800e056 <_printf_float+0xc2>
 800e268:	f109 0901 	add.w	r9, r9, #1
 800e26c:	e7ee      	b.n	800e24c <_printf_float+0x2b8>
 800e26e:	bf00      	nop
 800e270:	7fefffff 	.word	0x7fefffff
 800e274:	08012af0 	.word	0x08012af0
 800e278:	08012af4 	.word	0x08012af4
 800e27c:	08012afc 	.word	0x08012afc
 800e280:	08012af8 	.word	0x08012af8
 800e284:	08012e29 	.word	0x08012e29
 800e288:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e28a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e28c:	429a      	cmp	r2, r3
 800e28e:	bfa8      	it	ge
 800e290:	461a      	movge	r2, r3
 800e292:	2a00      	cmp	r2, #0
 800e294:	4691      	mov	r9, r2
 800e296:	dc37      	bgt.n	800e308 <_printf_float+0x374>
 800e298:	f04f 0b00 	mov.w	fp, #0
 800e29c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2a0:	f104 021a 	add.w	r2, r4, #26
 800e2a4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e2a6:	9305      	str	r3, [sp, #20]
 800e2a8:	eba3 0309 	sub.w	r3, r3, r9
 800e2ac:	455b      	cmp	r3, fp
 800e2ae:	dc33      	bgt.n	800e318 <_printf_float+0x384>
 800e2b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2b4:	429a      	cmp	r2, r3
 800e2b6:	db3b      	blt.n	800e330 <_printf_float+0x39c>
 800e2b8:	6823      	ldr	r3, [r4, #0]
 800e2ba:	07da      	lsls	r2, r3, #31
 800e2bc:	d438      	bmi.n	800e330 <_printf_float+0x39c>
 800e2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e2c0:	9a05      	ldr	r2, [sp, #20]
 800e2c2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e2c4:	1a9a      	subs	r2, r3, r2
 800e2c6:	eba3 0901 	sub.w	r9, r3, r1
 800e2ca:	4591      	cmp	r9, r2
 800e2cc:	bfa8      	it	ge
 800e2ce:	4691      	movge	r9, r2
 800e2d0:	f1b9 0f00 	cmp.w	r9, #0
 800e2d4:	dc35      	bgt.n	800e342 <_printf_float+0x3ae>
 800e2d6:	f04f 0800 	mov.w	r8, #0
 800e2da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e2de:	f104 0a1a 	add.w	sl, r4, #26
 800e2e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e2e6:	1a9b      	subs	r3, r3, r2
 800e2e8:	eba3 0309 	sub.w	r3, r3, r9
 800e2ec:	4543      	cmp	r3, r8
 800e2ee:	f77f af79 	ble.w	800e1e4 <_printf_float+0x250>
 800e2f2:	2301      	movs	r3, #1
 800e2f4:	4652      	mov	r2, sl
 800e2f6:	4631      	mov	r1, r6
 800e2f8:	4628      	mov	r0, r5
 800e2fa:	47b8      	blx	r7
 800e2fc:	3001      	adds	r0, #1
 800e2fe:	f43f aeaa 	beq.w	800e056 <_printf_float+0xc2>
 800e302:	f108 0801 	add.w	r8, r8, #1
 800e306:	e7ec      	b.n	800e2e2 <_printf_float+0x34e>
 800e308:	4613      	mov	r3, r2
 800e30a:	4631      	mov	r1, r6
 800e30c:	4642      	mov	r2, r8
 800e30e:	4628      	mov	r0, r5
 800e310:	47b8      	blx	r7
 800e312:	3001      	adds	r0, #1
 800e314:	d1c0      	bne.n	800e298 <_printf_float+0x304>
 800e316:	e69e      	b.n	800e056 <_printf_float+0xc2>
 800e318:	2301      	movs	r3, #1
 800e31a:	4631      	mov	r1, r6
 800e31c:	4628      	mov	r0, r5
 800e31e:	9205      	str	r2, [sp, #20]
 800e320:	47b8      	blx	r7
 800e322:	3001      	adds	r0, #1
 800e324:	f43f ae97 	beq.w	800e056 <_printf_float+0xc2>
 800e328:	9a05      	ldr	r2, [sp, #20]
 800e32a:	f10b 0b01 	add.w	fp, fp, #1
 800e32e:	e7b9      	b.n	800e2a4 <_printf_float+0x310>
 800e330:	ee18 3a10 	vmov	r3, s16
 800e334:	4652      	mov	r2, sl
 800e336:	4631      	mov	r1, r6
 800e338:	4628      	mov	r0, r5
 800e33a:	47b8      	blx	r7
 800e33c:	3001      	adds	r0, #1
 800e33e:	d1be      	bne.n	800e2be <_printf_float+0x32a>
 800e340:	e689      	b.n	800e056 <_printf_float+0xc2>
 800e342:	9a05      	ldr	r2, [sp, #20]
 800e344:	464b      	mov	r3, r9
 800e346:	4442      	add	r2, r8
 800e348:	4631      	mov	r1, r6
 800e34a:	4628      	mov	r0, r5
 800e34c:	47b8      	blx	r7
 800e34e:	3001      	adds	r0, #1
 800e350:	d1c1      	bne.n	800e2d6 <_printf_float+0x342>
 800e352:	e680      	b.n	800e056 <_printf_float+0xc2>
 800e354:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e356:	2a01      	cmp	r2, #1
 800e358:	dc01      	bgt.n	800e35e <_printf_float+0x3ca>
 800e35a:	07db      	lsls	r3, r3, #31
 800e35c:	d538      	bpl.n	800e3d0 <_printf_float+0x43c>
 800e35e:	2301      	movs	r3, #1
 800e360:	4642      	mov	r2, r8
 800e362:	4631      	mov	r1, r6
 800e364:	4628      	mov	r0, r5
 800e366:	47b8      	blx	r7
 800e368:	3001      	adds	r0, #1
 800e36a:	f43f ae74 	beq.w	800e056 <_printf_float+0xc2>
 800e36e:	ee18 3a10 	vmov	r3, s16
 800e372:	4652      	mov	r2, sl
 800e374:	4631      	mov	r1, r6
 800e376:	4628      	mov	r0, r5
 800e378:	47b8      	blx	r7
 800e37a:	3001      	adds	r0, #1
 800e37c:	f43f ae6b 	beq.w	800e056 <_printf_float+0xc2>
 800e380:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e384:	2200      	movs	r2, #0
 800e386:	2300      	movs	r3, #0
 800e388:	f7f2 fbae 	bl	8000ae8 <__aeabi_dcmpeq>
 800e38c:	b9d8      	cbnz	r0, 800e3c6 <_printf_float+0x432>
 800e38e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e390:	f108 0201 	add.w	r2, r8, #1
 800e394:	3b01      	subs	r3, #1
 800e396:	4631      	mov	r1, r6
 800e398:	4628      	mov	r0, r5
 800e39a:	47b8      	blx	r7
 800e39c:	3001      	adds	r0, #1
 800e39e:	d10e      	bne.n	800e3be <_printf_float+0x42a>
 800e3a0:	e659      	b.n	800e056 <_printf_float+0xc2>
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	4652      	mov	r2, sl
 800e3a6:	4631      	mov	r1, r6
 800e3a8:	4628      	mov	r0, r5
 800e3aa:	47b8      	blx	r7
 800e3ac:	3001      	adds	r0, #1
 800e3ae:	f43f ae52 	beq.w	800e056 <_printf_float+0xc2>
 800e3b2:	f108 0801 	add.w	r8, r8, #1
 800e3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e3b8:	3b01      	subs	r3, #1
 800e3ba:	4543      	cmp	r3, r8
 800e3bc:	dcf1      	bgt.n	800e3a2 <_printf_float+0x40e>
 800e3be:	464b      	mov	r3, r9
 800e3c0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e3c4:	e6dc      	b.n	800e180 <_printf_float+0x1ec>
 800e3c6:	f04f 0800 	mov.w	r8, #0
 800e3ca:	f104 0a1a 	add.w	sl, r4, #26
 800e3ce:	e7f2      	b.n	800e3b6 <_printf_float+0x422>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	4642      	mov	r2, r8
 800e3d4:	e7df      	b.n	800e396 <_printf_float+0x402>
 800e3d6:	2301      	movs	r3, #1
 800e3d8:	464a      	mov	r2, r9
 800e3da:	4631      	mov	r1, r6
 800e3dc:	4628      	mov	r0, r5
 800e3de:	47b8      	blx	r7
 800e3e0:	3001      	adds	r0, #1
 800e3e2:	f43f ae38 	beq.w	800e056 <_printf_float+0xc2>
 800e3e6:	f108 0801 	add.w	r8, r8, #1
 800e3ea:	68e3      	ldr	r3, [r4, #12]
 800e3ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e3ee:	1a5b      	subs	r3, r3, r1
 800e3f0:	4543      	cmp	r3, r8
 800e3f2:	dcf0      	bgt.n	800e3d6 <_printf_float+0x442>
 800e3f4:	e6fa      	b.n	800e1ec <_printf_float+0x258>
 800e3f6:	f04f 0800 	mov.w	r8, #0
 800e3fa:	f104 0919 	add.w	r9, r4, #25
 800e3fe:	e7f4      	b.n	800e3ea <_printf_float+0x456>

0800e400 <_printf_common>:
 800e400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e404:	4616      	mov	r6, r2
 800e406:	4699      	mov	r9, r3
 800e408:	688a      	ldr	r2, [r1, #8]
 800e40a:	690b      	ldr	r3, [r1, #16]
 800e40c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e410:	4293      	cmp	r3, r2
 800e412:	bfb8      	it	lt
 800e414:	4613      	movlt	r3, r2
 800e416:	6033      	str	r3, [r6, #0]
 800e418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e41c:	4607      	mov	r7, r0
 800e41e:	460c      	mov	r4, r1
 800e420:	b10a      	cbz	r2, 800e426 <_printf_common+0x26>
 800e422:	3301      	adds	r3, #1
 800e424:	6033      	str	r3, [r6, #0]
 800e426:	6823      	ldr	r3, [r4, #0]
 800e428:	0699      	lsls	r1, r3, #26
 800e42a:	bf42      	ittt	mi
 800e42c:	6833      	ldrmi	r3, [r6, #0]
 800e42e:	3302      	addmi	r3, #2
 800e430:	6033      	strmi	r3, [r6, #0]
 800e432:	6825      	ldr	r5, [r4, #0]
 800e434:	f015 0506 	ands.w	r5, r5, #6
 800e438:	d106      	bne.n	800e448 <_printf_common+0x48>
 800e43a:	f104 0a19 	add.w	sl, r4, #25
 800e43e:	68e3      	ldr	r3, [r4, #12]
 800e440:	6832      	ldr	r2, [r6, #0]
 800e442:	1a9b      	subs	r3, r3, r2
 800e444:	42ab      	cmp	r3, r5
 800e446:	dc26      	bgt.n	800e496 <_printf_common+0x96>
 800e448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e44c:	1e13      	subs	r3, r2, #0
 800e44e:	6822      	ldr	r2, [r4, #0]
 800e450:	bf18      	it	ne
 800e452:	2301      	movne	r3, #1
 800e454:	0692      	lsls	r2, r2, #26
 800e456:	d42b      	bmi.n	800e4b0 <_printf_common+0xb0>
 800e458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e45c:	4649      	mov	r1, r9
 800e45e:	4638      	mov	r0, r7
 800e460:	47c0      	blx	r8
 800e462:	3001      	adds	r0, #1
 800e464:	d01e      	beq.n	800e4a4 <_printf_common+0xa4>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	68e5      	ldr	r5, [r4, #12]
 800e46a:	6832      	ldr	r2, [r6, #0]
 800e46c:	f003 0306 	and.w	r3, r3, #6
 800e470:	2b04      	cmp	r3, #4
 800e472:	bf08      	it	eq
 800e474:	1aad      	subeq	r5, r5, r2
 800e476:	68a3      	ldr	r3, [r4, #8]
 800e478:	6922      	ldr	r2, [r4, #16]
 800e47a:	bf0c      	ite	eq
 800e47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e480:	2500      	movne	r5, #0
 800e482:	4293      	cmp	r3, r2
 800e484:	bfc4      	itt	gt
 800e486:	1a9b      	subgt	r3, r3, r2
 800e488:	18ed      	addgt	r5, r5, r3
 800e48a:	2600      	movs	r6, #0
 800e48c:	341a      	adds	r4, #26
 800e48e:	42b5      	cmp	r5, r6
 800e490:	d11a      	bne.n	800e4c8 <_printf_common+0xc8>
 800e492:	2000      	movs	r0, #0
 800e494:	e008      	b.n	800e4a8 <_printf_common+0xa8>
 800e496:	2301      	movs	r3, #1
 800e498:	4652      	mov	r2, sl
 800e49a:	4649      	mov	r1, r9
 800e49c:	4638      	mov	r0, r7
 800e49e:	47c0      	blx	r8
 800e4a0:	3001      	adds	r0, #1
 800e4a2:	d103      	bne.n	800e4ac <_printf_common+0xac>
 800e4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ac:	3501      	adds	r5, #1
 800e4ae:	e7c6      	b.n	800e43e <_printf_common+0x3e>
 800e4b0:	18e1      	adds	r1, r4, r3
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	2030      	movs	r0, #48	; 0x30
 800e4b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4ba:	4422      	add	r2, r4
 800e4bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4c4:	3302      	adds	r3, #2
 800e4c6:	e7c7      	b.n	800e458 <_printf_common+0x58>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	4622      	mov	r2, r4
 800e4cc:	4649      	mov	r1, r9
 800e4ce:	4638      	mov	r0, r7
 800e4d0:	47c0      	blx	r8
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	d0e6      	beq.n	800e4a4 <_printf_common+0xa4>
 800e4d6:	3601      	adds	r6, #1
 800e4d8:	e7d9      	b.n	800e48e <_printf_common+0x8e>
	...

0800e4dc <_printf_i>:
 800e4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e0:	7e0f      	ldrb	r7, [r1, #24]
 800e4e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4e4:	2f78      	cmp	r7, #120	; 0x78
 800e4e6:	4691      	mov	r9, r2
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	469a      	mov	sl, r3
 800e4ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4f2:	d807      	bhi.n	800e504 <_printf_i+0x28>
 800e4f4:	2f62      	cmp	r7, #98	; 0x62
 800e4f6:	d80a      	bhi.n	800e50e <_printf_i+0x32>
 800e4f8:	2f00      	cmp	r7, #0
 800e4fa:	f000 80d8 	beq.w	800e6ae <_printf_i+0x1d2>
 800e4fe:	2f58      	cmp	r7, #88	; 0x58
 800e500:	f000 80a3 	beq.w	800e64a <_printf_i+0x16e>
 800e504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e50c:	e03a      	b.n	800e584 <_printf_i+0xa8>
 800e50e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e512:	2b15      	cmp	r3, #21
 800e514:	d8f6      	bhi.n	800e504 <_printf_i+0x28>
 800e516:	a101      	add	r1, pc, #4	; (adr r1, 800e51c <_printf_i+0x40>)
 800e518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e51c:	0800e575 	.word	0x0800e575
 800e520:	0800e589 	.word	0x0800e589
 800e524:	0800e505 	.word	0x0800e505
 800e528:	0800e505 	.word	0x0800e505
 800e52c:	0800e505 	.word	0x0800e505
 800e530:	0800e505 	.word	0x0800e505
 800e534:	0800e589 	.word	0x0800e589
 800e538:	0800e505 	.word	0x0800e505
 800e53c:	0800e505 	.word	0x0800e505
 800e540:	0800e505 	.word	0x0800e505
 800e544:	0800e505 	.word	0x0800e505
 800e548:	0800e695 	.word	0x0800e695
 800e54c:	0800e5b9 	.word	0x0800e5b9
 800e550:	0800e677 	.word	0x0800e677
 800e554:	0800e505 	.word	0x0800e505
 800e558:	0800e505 	.word	0x0800e505
 800e55c:	0800e6b7 	.word	0x0800e6b7
 800e560:	0800e505 	.word	0x0800e505
 800e564:	0800e5b9 	.word	0x0800e5b9
 800e568:	0800e505 	.word	0x0800e505
 800e56c:	0800e505 	.word	0x0800e505
 800e570:	0800e67f 	.word	0x0800e67f
 800e574:	682b      	ldr	r3, [r5, #0]
 800e576:	1d1a      	adds	r2, r3, #4
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	602a      	str	r2, [r5, #0]
 800e57c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e584:	2301      	movs	r3, #1
 800e586:	e0a3      	b.n	800e6d0 <_printf_i+0x1f4>
 800e588:	6820      	ldr	r0, [r4, #0]
 800e58a:	6829      	ldr	r1, [r5, #0]
 800e58c:	0606      	lsls	r6, r0, #24
 800e58e:	f101 0304 	add.w	r3, r1, #4
 800e592:	d50a      	bpl.n	800e5aa <_printf_i+0xce>
 800e594:	680e      	ldr	r6, [r1, #0]
 800e596:	602b      	str	r3, [r5, #0]
 800e598:	2e00      	cmp	r6, #0
 800e59a:	da03      	bge.n	800e5a4 <_printf_i+0xc8>
 800e59c:	232d      	movs	r3, #45	; 0x2d
 800e59e:	4276      	negs	r6, r6
 800e5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5a4:	485e      	ldr	r0, [pc, #376]	; (800e720 <_printf_i+0x244>)
 800e5a6:	230a      	movs	r3, #10
 800e5a8:	e019      	b.n	800e5de <_printf_i+0x102>
 800e5aa:	680e      	ldr	r6, [r1, #0]
 800e5ac:	602b      	str	r3, [r5, #0]
 800e5ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5b2:	bf18      	it	ne
 800e5b4:	b236      	sxthne	r6, r6
 800e5b6:	e7ef      	b.n	800e598 <_printf_i+0xbc>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	6820      	ldr	r0, [r4, #0]
 800e5bc:	1d19      	adds	r1, r3, #4
 800e5be:	6029      	str	r1, [r5, #0]
 800e5c0:	0601      	lsls	r1, r0, #24
 800e5c2:	d501      	bpl.n	800e5c8 <_printf_i+0xec>
 800e5c4:	681e      	ldr	r6, [r3, #0]
 800e5c6:	e002      	b.n	800e5ce <_printf_i+0xf2>
 800e5c8:	0646      	lsls	r6, r0, #25
 800e5ca:	d5fb      	bpl.n	800e5c4 <_printf_i+0xe8>
 800e5cc:	881e      	ldrh	r6, [r3, #0]
 800e5ce:	4854      	ldr	r0, [pc, #336]	; (800e720 <_printf_i+0x244>)
 800e5d0:	2f6f      	cmp	r7, #111	; 0x6f
 800e5d2:	bf0c      	ite	eq
 800e5d4:	2308      	moveq	r3, #8
 800e5d6:	230a      	movne	r3, #10
 800e5d8:	2100      	movs	r1, #0
 800e5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5de:	6865      	ldr	r5, [r4, #4]
 800e5e0:	60a5      	str	r5, [r4, #8]
 800e5e2:	2d00      	cmp	r5, #0
 800e5e4:	bfa2      	ittt	ge
 800e5e6:	6821      	ldrge	r1, [r4, #0]
 800e5e8:	f021 0104 	bicge.w	r1, r1, #4
 800e5ec:	6021      	strge	r1, [r4, #0]
 800e5ee:	b90e      	cbnz	r6, 800e5f4 <_printf_i+0x118>
 800e5f0:	2d00      	cmp	r5, #0
 800e5f2:	d04d      	beq.n	800e690 <_printf_i+0x1b4>
 800e5f4:	4615      	mov	r5, r2
 800e5f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5fa:	fb03 6711 	mls	r7, r3, r1, r6
 800e5fe:	5dc7      	ldrb	r7, [r0, r7]
 800e600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e604:	4637      	mov	r7, r6
 800e606:	42bb      	cmp	r3, r7
 800e608:	460e      	mov	r6, r1
 800e60a:	d9f4      	bls.n	800e5f6 <_printf_i+0x11a>
 800e60c:	2b08      	cmp	r3, #8
 800e60e:	d10b      	bne.n	800e628 <_printf_i+0x14c>
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	07de      	lsls	r6, r3, #31
 800e614:	d508      	bpl.n	800e628 <_printf_i+0x14c>
 800e616:	6923      	ldr	r3, [r4, #16]
 800e618:	6861      	ldr	r1, [r4, #4]
 800e61a:	4299      	cmp	r1, r3
 800e61c:	bfde      	ittt	le
 800e61e:	2330      	movle	r3, #48	; 0x30
 800e620:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e624:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e628:	1b52      	subs	r2, r2, r5
 800e62a:	6122      	str	r2, [r4, #16]
 800e62c:	f8cd a000 	str.w	sl, [sp]
 800e630:	464b      	mov	r3, r9
 800e632:	aa03      	add	r2, sp, #12
 800e634:	4621      	mov	r1, r4
 800e636:	4640      	mov	r0, r8
 800e638:	f7ff fee2 	bl	800e400 <_printf_common>
 800e63c:	3001      	adds	r0, #1
 800e63e:	d14c      	bne.n	800e6da <_printf_i+0x1fe>
 800e640:	f04f 30ff 	mov.w	r0, #4294967295
 800e644:	b004      	add	sp, #16
 800e646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e64a:	4835      	ldr	r0, [pc, #212]	; (800e720 <_printf_i+0x244>)
 800e64c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e650:	6829      	ldr	r1, [r5, #0]
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	f851 6b04 	ldr.w	r6, [r1], #4
 800e658:	6029      	str	r1, [r5, #0]
 800e65a:	061d      	lsls	r5, r3, #24
 800e65c:	d514      	bpl.n	800e688 <_printf_i+0x1ac>
 800e65e:	07df      	lsls	r7, r3, #31
 800e660:	bf44      	itt	mi
 800e662:	f043 0320 	orrmi.w	r3, r3, #32
 800e666:	6023      	strmi	r3, [r4, #0]
 800e668:	b91e      	cbnz	r6, 800e672 <_printf_i+0x196>
 800e66a:	6823      	ldr	r3, [r4, #0]
 800e66c:	f023 0320 	bic.w	r3, r3, #32
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	2310      	movs	r3, #16
 800e674:	e7b0      	b.n	800e5d8 <_printf_i+0xfc>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	f043 0320 	orr.w	r3, r3, #32
 800e67c:	6023      	str	r3, [r4, #0]
 800e67e:	2378      	movs	r3, #120	; 0x78
 800e680:	4828      	ldr	r0, [pc, #160]	; (800e724 <_printf_i+0x248>)
 800e682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e686:	e7e3      	b.n	800e650 <_printf_i+0x174>
 800e688:	0659      	lsls	r1, r3, #25
 800e68a:	bf48      	it	mi
 800e68c:	b2b6      	uxthmi	r6, r6
 800e68e:	e7e6      	b.n	800e65e <_printf_i+0x182>
 800e690:	4615      	mov	r5, r2
 800e692:	e7bb      	b.n	800e60c <_printf_i+0x130>
 800e694:	682b      	ldr	r3, [r5, #0]
 800e696:	6826      	ldr	r6, [r4, #0]
 800e698:	6961      	ldr	r1, [r4, #20]
 800e69a:	1d18      	adds	r0, r3, #4
 800e69c:	6028      	str	r0, [r5, #0]
 800e69e:	0635      	lsls	r5, r6, #24
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	d501      	bpl.n	800e6a8 <_printf_i+0x1cc>
 800e6a4:	6019      	str	r1, [r3, #0]
 800e6a6:	e002      	b.n	800e6ae <_printf_i+0x1d2>
 800e6a8:	0670      	lsls	r0, r6, #25
 800e6aa:	d5fb      	bpl.n	800e6a4 <_printf_i+0x1c8>
 800e6ac:	8019      	strh	r1, [r3, #0]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	6123      	str	r3, [r4, #16]
 800e6b2:	4615      	mov	r5, r2
 800e6b4:	e7ba      	b.n	800e62c <_printf_i+0x150>
 800e6b6:	682b      	ldr	r3, [r5, #0]
 800e6b8:	1d1a      	adds	r2, r3, #4
 800e6ba:	602a      	str	r2, [r5, #0]
 800e6bc:	681d      	ldr	r5, [r3, #0]
 800e6be:	6862      	ldr	r2, [r4, #4]
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	f7f1 fd9c 	bl	8000200 <memchr>
 800e6c8:	b108      	cbz	r0, 800e6ce <_printf_i+0x1f2>
 800e6ca:	1b40      	subs	r0, r0, r5
 800e6cc:	6060      	str	r0, [r4, #4]
 800e6ce:	6863      	ldr	r3, [r4, #4]
 800e6d0:	6123      	str	r3, [r4, #16]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6d8:	e7a8      	b.n	800e62c <_printf_i+0x150>
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	462a      	mov	r2, r5
 800e6de:	4649      	mov	r1, r9
 800e6e0:	4640      	mov	r0, r8
 800e6e2:	47d0      	blx	sl
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d0ab      	beq.n	800e640 <_printf_i+0x164>
 800e6e8:	6823      	ldr	r3, [r4, #0]
 800e6ea:	079b      	lsls	r3, r3, #30
 800e6ec:	d413      	bmi.n	800e716 <_printf_i+0x23a>
 800e6ee:	68e0      	ldr	r0, [r4, #12]
 800e6f0:	9b03      	ldr	r3, [sp, #12]
 800e6f2:	4298      	cmp	r0, r3
 800e6f4:	bfb8      	it	lt
 800e6f6:	4618      	movlt	r0, r3
 800e6f8:	e7a4      	b.n	800e644 <_printf_i+0x168>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4632      	mov	r2, r6
 800e6fe:	4649      	mov	r1, r9
 800e700:	4640      	mov	r0, r8
 800e702:	47d0      	blx	sl
 800e704:	3001      	adds	r0, #1
 800e706:	d09b      	beq.n	800e640 <_printf_i+0x164>
 800e708:	3501      	adds	r5, #1
 800e70a:	68e3      	ldr	r3, [r4, #12]
 800e70c:	9903      	ldr	r1, [sp, #12]
 800e70e:	1a5b      	subs	r3, r3, r1
 800e710:	42ab      	cmp	r3, r5
 800e712:	dcf2      	bgt.n	800e6fa <_printf_i+0x21e>
 800e714:	e7eb      	b.n	800e6ee <_printf_i+0x212>
 800e716:	2500      	movs	r5, #0
 800e718:	f104 0619 	add.w	r6, r4, #25
 800e71c:	e7f5      	b.n	800e70a <_printf_i+0x22e>
 800e71e:	bf00      	nop
 800e720:	08012b00 	.word	0x08012b00
 800e724:	08012b11 	.word	0x08012b11

0800e728 <iprintf>:
 800e728:	b40f      	push	{r0, r1, r2, r3}
 800e72a:	4b0a      	ldr	r3, [pc, #40]	; (800e754 <iprintf+0x2c>)
 800e72c:	b513      	push	{r0, r1, r4, lr}
 800e72e:	681c      	ldr	r4, [r3, #0]
 800e730:	b124      	cbz	r4, 800e73c <iprintf+0x14>
 800e732:	69a3      	ldr	r3, [r4, #24]
 800e734:	b913      	cbnz	r3, 800e73c <iprintf+0x14>
 800e736:	4620      	mov	r0, r4
 800e738:	f001 fb2a 	bl	800fd90 <__sinit>
 800e73c:	ab05      	add	r3, sp, #20
 800e73e:	9a04      	ldr	r2, [sp, #16]
 800e740:	68a1      	ldr	r1, [r4, #8]
 800e742:	9301      	str	r3, [sp, #4]
 800e744:	4620      	mov	r0, r4
 800e746:	f002 fb75 	bl	8010e34 <_vfiprintf_r>
 800e74a:	b002      	add	sp, #8
 800e74c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e750:	b004      	add	sp, #16
 800e752:	4770      	bx	lr
 800e754:	2000000c 	.word	0x2000000c

0800e758 <putchar>:
 800e758:	4b09      	ldr	r3, [pc, #36]	; (800e780 <putchar+0x28>)
 800e75a:	b513      	push	{r0, r1, r4, lr}
 800e75c:	681c      	ldr	r4, [r3, #0]
 800e75e:	4601      	mov	r1, r0
 800e760:	b134      	cbz	r4, 800e770 <putchar+0x18>
 800e762:	69a3      	ldr	r3, [r4, #24]
 800e764:	b923      	cbnz	r3, 800e770 <putchar+0x18>
 800e766:	9001      	str	r0, [sp, #4]
 800e768:	4620      	mov	r0, r4
 800e76a:	f001 fb11 	bl	800fd90 <__sinit>
 800e76e:	9901      	ldr	r1, [sp, #4]
 800e770:	68a2      	ldr	r2, [r4, #8]
 800e772:	4620      	mov	r0, r4
 800e774:	b002      	add	sp, #8
 800e776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e77a:	f002 bddd 	b.w	8011338 <_putc_r>
 800e77e:	bf00      	nop
 800e780:	2000000c 	.word	0x2000000c

0800e784 <_puts_r>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	460e      	mov	r6, r1
 800e788:	4605      	mov	r5, r0
 800e78a:	b118      	cbz	r0, 800e794 <_puts_r+0x10>
 800e78c:	6983      	ldr	r3, [r0, #24]
 800e78e:	b90b      	cbnz	r3, 800e794 <_puts_r+0x10>
 800e790:	f001 fafe 	bl	800fd90 <__sinit>
 800e794:	69ab      	ldr	r3, [r5, #24]
 800e796:	68ac      	ldr	r4, [r5, #8]
 800e798:	b913      	cbnz	r3, 800e7a0 <_puts_r+0x1c>
 800e79a:	4628      	mov	r0, r5
 800e79c:	f001 faf8 	bl	800fd90 <__sinit>
 800e7a0:	4b2c      	ldr	r3, [pc, #176]	; (800e854 <_puts_r+0xd0>)
 800e7a2:	429c      	cmp	r4, r3
 800e7a4:	d120      	bne.n	800e7e8 <_puts_r+0x64>
 800e7a6:	686c      	ldr	r4, [r5, #4]
 800e7a8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e7aa:	07db      	lsls	r3, r3, #31
 800e7ac:	d405      	bmi.n	800e7ba <_puts_r+0x36>
 800e7ae:	89a3      	ldrh	r3, [r4, #12]
 800e7b0:	0598      	lsls	r0, r3, #22
 800e7b2:	d402      	bmi.n	800e7ba <_puts_r+0x36>
 800e7b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e7b6:	f001 fb9b 	bl	800fef0 <__retarget_lock_acquire_recursive>
 800e7ba:	89a3      	ldrh	r3, [r4, #12]
 800e7bc:	0719      	lsls	r1, r3, #28
 800e7be:	d51d      	bpl.n	800e7fc <_puts_r+0x78>
 800e7c0:	6923      	ldr	r3, [r4, #16]
 800e7c2:	b1db      	cbz	r3, 800e7fc <_puts_r+0x78>
 800e7c4:	3e01      	subs	r6, #1
 800e7c6:	68a3      	ldr	r3, [r4, #8]
 800e7c8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e7cc:	3b01      	subs	r3, #1
 800e7ce:	60a3      	str	r3, [r4, #8]
 800e7d0:	bb39      	cbnz	r1, 800e822 <_puts_r+0x9e>
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	da38      	bge.n	800e848 <_puts_r+0xc4>
 800e7d6:	4622      	mov	r2, r4
 800e7d8:	210a      	movs	r1, #10
 800e7da:	4628      	mov	r0, r5
 800e7dc:	f000 fa44 	bl	800ec68 <__swbuf_r>
 800e7e0:	3001      	adds	r0, #1
 800e7e2:	d011      	beq.n	800e808 <_puts_r+0x84>
 800e7e4:	250a      	movs	r5, #10
 800e7e6:	e011      	b.n	800e80c <_puts_r+0x88>
 800e7e8:	4b1b      	ldr	r3, [pc, #108]	; (800e858 <_puts_r+0xd4>)
 800e7ea:	429c      	cmp	r4, r3
 800e7ec:	d101      	bne.n	800e7f2 <_puts_r+0x6e>
 800e7ee:	68ac      	ldr	r4, [r5, #8]
 800e7f0:	e7da      	b.n	800e7a8 <_puts_r+0x24>
 800e7f2:	4b1a      	ldr	r3, [pc, #104]	; (800e85c <_puts_r+0xd8>)
 800e7f4:	429c      	cmp	r4, r3
 800e7f6:	bf08      	it	eq
 800e7f8:	68ec      	ldreq	r4, [r5, #12]
 800e7fa:	e7d5      	b.n	800e7a8 <_puts_r+0x24>
 800e7fc:	4621      	mov	r1, r4
 800e7fe:	4628      	mov	r0, r5
 800e800:	f000 fa96 	bl	800ed30 <__swsetup_r>
 800e804:	2800      	cmp	r0, #0
 800e806:	d0dd      	beq.n	800e7c4 <_puts_r+0x40>
 800e808:	f04f 35ff 	mov.w	r5, #4294967295
 800e80c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e80e:	07da      	lsls	r2, r3, #31
 800e810:	d405      	bmi.n	800e81e <_puts_r+0x9a>
 800e812:	89a3      	ldrh	r3, [r4, #12]
 800e814:	059b      	lsls	r3, r3, #22
 800e816:	d402      	bmi.n	800e81e <_puts_r+0x9a>
 800e818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e81a:	f001 fb6a 	bl	800fef2 <__retarget_lock_release_recursive>
 800e81e:	4628      	mov	r0, r5
 800e820:	bd70      	pop	{r4, r5, r6, pc}
 800e822:	2b00      	cmp	r3, #0
 800e824:	da04      	bge.n	800e830 <_puts_r+0xac>
 800e826:	69a2      	ldr	r2, [r4, #24]
 800e828:	429a      	cmp	r2, r3
 800e82a:	dc06      	bgt.n	800e83a <_puts_r+0xb6>
 800e82c:	290a      	cmp	r1, #10
 800e82e:	d004      	beq.n	800e83a <_puts_r+0xb6>
 800e830:	6823      	ldr	r3, [r4, #0]
 800e832:	1c5a      	adds	r2, r3, #1
 800e834:	6022      	str	r2, [r4, #0]
 800e836:	7019      	strb	r1, [r3, #0]
 800e838:	e7c5      	b.n	800e7c6 <_puts_r+0x42>
 800e83a:	4622      	mov	r2, r4
 800e83c:	4628      	mov	r0, r5
 800e83e:	f000 fa13 	bl	800ec68 <__swbuf_r>
 800e842:	3001      	adds	r0, #1
 800e844:	d1bf      	bne.n	800e7c6 <_puts_r+0x42>
 800e846:	e7df      	b.n	800e808 <_puts_r+0x84>
 800e848:	6823      	ldr	r3, [r4, #0]
 800e84a:	250a      	movs	r5, #10
 800e84c:	1c5a      	adds	r2, r3, #1
 800e84e:	6022      	str	r2, [r4, #0]
 800e850:	701d      	strb	r5, [r3, #0]
 800e852:	e7db      	b.n	800e80c <_puts_r+0x88>
 800e854:	08012c6c 	.word	0x08012c6c
 800e858:	08012c8c 	.word	0x08012c8c
 800e85c:	08012c4c 	.word	0x08012c4c

0800e860 <puts>:
 800e860:	4b02      	ldr	r3, [pc, #8]	; (800e86c <puts+0xc>)
 800e862:	4601      	mov	r1, r0
 800e864:	6818      	ldr	r0, [r3, #0]
 800e866:	f7ff bf8d 	b.w	800e784 <_puts_r>
 800e86a:	bf00      	nop
 800e86c:	2000000c 	.word	0x2000000c

0800e870 <_sbrk_r>:
 800e870:	b538      	push	{r3, r4, r5, lr}
 800e872:	4d06      	ldr	r5, [pc, #24]	; (800e88c <_sbrk_r+0x1c>)
 800e874:	2300      	movs	r3, #0
 800e876:	4604      	mov	r4, r0
 800e878:	4608      	mov	r0, r1
 800e87a:	602b      	str	r3, [r5, #0]
 800e87c:	f7f5 fac4 	bl	8003e08 <_sbrk>
 800e880:	1c43      	adds	r3, r0, #1
 800e882:	d102      	bne.n	800e88a <_sbrk_r+0x1a>
 800e884:	682b      	ldr	r3, [r5, #0]
 800e886:	b103      	cbz	r3, 800e88a <_sbrk_r+0x1a>
 800e888:	6023      	str	r3, [r4, #0]
 800e88a:	bd38      	pop	{r3, r4, r5, pc}
 800e88c:	20001894 	.word	0x20001894

0800e890 <sniprintf>:
 800e890:	b40c      	push	{r2, r3}
 800e892:	b530      	push	{r4, r5, lr}
 800e894:	4b17      	ldr	r3, [pc, #92]	; (800e8f4 <sniprintf+0x64>)
 800e896:	1e0c      	subs	r4, r1, #0
 800e898:	681d      	ldr	r5, [r3, #0]
 800e89a:	b09d      	sub	sp, #116	; 0x74
 800e89c:	da08      	bge.n	800e8b0 <sniprintf+0x20>
 800e89e:	238b      	movs	r3, #139	; 0x8b
 800e8a0:	602b      	str	r3, [r5, #0]
 800e8a2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a6:	b01d      	add	sp, #116	; 0x74
 800e8a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e8ac:	b002      	add	sp, #8
 800e8ae:	4770      	bx	lr
 800e8b0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e8b4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e8b8:	bf14      	ite	ne
 800e8ba:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e8be:	4623      	moveq	r3, r4
 800e8c0:	9304      	str	r3, [sp, #16]
 800e8c2:	9307      	str	r3, [sp, #28]
 800e8c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e8c8:	9002      	str	r0, [sp, #8]
 800e8ca:	9006      	str	r0, [sp, #24]
 800e8cc:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e8d0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e8d2:	ab21      	add	r3, sp, #132	; 0x84
 800e8d4:	a902      	add	r1, sp, #8
 800e8d6:	4628      	mov	r0, r5
 800e8d8:	9301      	str	r3, [sp, #4]
 800e8da:	f001 ffaf 	bl	801083c <_svfiprintf_r>
 800e8de:	1c43      	adds	r3, r0, #1
 800e8e0:	bfbc      	itt	lt
 800e8e2:	238b      	movlt	r3, #139	; 0x8b
 800e8e4:	602b      	strlt	r3, [r5, #0]
 800e8e6:	2c00      	cmp	r4, #0
 800e8e8:	d0dd      	beq.n	800e8a6 <sniprintf+0x16>
 800e8ea:	9b02      	ldr	r3, [sp, #8]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	701a      	strb	r2, [r3, #0]
 800e8f0:	e7d9      	b.n	800e8a6 <sniprintf+0x16>
 800e8f2:	bf00      	nop
 800e8f4:	2000000c 	.word	0x2000000c

0800e8f8 <siprintf>:
 800e8f8:	b40e      	push	{r1, r2, r3}
 800e8fa:	b500      	push	{lr}
 800e8fc:	b09c      	sub	sp, #112	; 0x70
 800e8fe:	ab1d      	add	r3, sp, #116	; 0x74
 800e900:	9002      	str	r0, [sp, #8]
 800e902:	9006      	str	r0, [sp, #24]
 800e904:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e908:	4809      	ldr	r0, [pc, #36]	; (800e930 <siprintf+0x38>)
 800e90a:	9107      	str	r1, [sp, #28]
 800e90c:	9104      	str	r1, [sp, #16]
 800e90e:	4909      	ldr	r1, [pc, #36]	; (800e934 <siprintf+0x3c>)
 800e910:	f853 2b04 	ldr.w	r2, [r3], #4
 800e914:	9105      	str	r1, [sp, #20]
 800e916:	6800      	ldr	r0, [r0, #0]
 800e918:	9301      	str	r3, [sp, #4]
 800e91a:	a902      	add	r1, sp, #8
 800e91c:	f001 ff8e 	bl	801083c <_svfiprintf_r>
 800e920:	9b02      	ldr	r3, [sp, #8]
 800e922:	2200      	movs	r2, #0
 800e924:	701a      	strb	r2, [r3, #0]
 800e926:	b01c      	add	sp, #112	; 0x70
 800e928:	f85d eb04 	ldr.w	lr, [sp], #4
 800e92c:	b003      	add	sp, #12
 800e92e:	4770      	bx	lr
 800e930:	2000000c 	.word	0x2000000c
 800e934:	ffff0208 	.word	0xffff0208

0800e938 <siscanf>:
 800e938:	b40e      	push	{r1, r2, r3}
 800e93a:	b510      	push	{r4, lr}
 800e93c:	b09f      	sub	sp, #124	; 0x7c
 800e93e:	ac21      	add	r4, sp, #132	; 0x84
 800e940:	f44f 7101 	mov.w	r1, #516	; 0x204
 800e944:	f854 2b04 	ldr.w	r2, [r4], #4
 800e948:	9201      	str	r2, [sp, #4]
 800e94a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800e94e:	9004      	str	r0, [sp, #16]
 800e950:	9008      	str	r0, [sp, #32]
 800e952:	f7f1 fc47 	bl	80001e4 <strlen>
 800e956:	4b0c      	ldr	r3, [pc, #48]	; (800e988 <siscanf+0x50>)
 800e958:	9005      	str	r0, [sp, #20]
 800e95a:	9009      	str	r0, [sp, #36]	; 0x24
 800e95c:	930d      	str	r3, [sp, #52]	; 0x34
 800e95e:	480b      	ldr	r0, [pc, #44]	; (800e98c <siscanf+0x54>)
 800e960:	9a01      	ldr	r2, [sp, #4]
 800e962:	6800      	ldr	r0, [r0, #0]
 800e964:	9403      	str	r4, [sp, #12]
 800e966:	2300      	movs	r3, #0
 800e968:	9311      	str	r3, [sp, #68]	; 0x44
 800e96a:	9316      	str	r3, [sp, #88]	; 0x58
 800e96c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e970:	f8ad 301e 	strh.w	r3, [sp, #30]
 800e974:	a904      	add	r1, sp, #16
 800e976:	4623      	mov	r3, r4
 800e978:	f002 f8ba 	bl	8010af0 <__ssvfiscanf_r>
 800e97c:	b01f      	add	sp, #124	; 0x7c
 800e97e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e982:	b003      	add	sp, #12
 800e984:	4770      	bx	lr
 800e986:	bf00      	nop
 800e988:	0800e9b3 	.word	0x0800e9b3
 800e98c:	2000000c 	.word	0x2000000c

0800e990 <__sread>:
 800e990:	b510      	push	{r4, lr}
 800e992:	460c      	mov	r4, r1
 800e994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e998:	f002 fd16 	bl	80113c8 <_read_r>
 800e99c:	2800      	cmp	r0, #0
 800e99e:	bfab      	itete	ge
 800e9a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e9a2:	89a3      	ldrhlt	r3, [r4, #12]
 800e9a4:	181b      	addge	r3, r3, r0
 800e9a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e9aa:	bfac      	ite	ge
 800e9ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800e9ae:	81a3      	strhlt	r3, [r4, #12]
 800e9b0:	bd10      	pop	{r4, pc}

0800e9b2 <__seofread>:
 800e9b2:	2000      	movs	r0, #0
 800e9b4:	4770      	bx	lr

0800e9b6 <__swrite>:
 800e9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ba:	461f      	mov	r7, r3
 800e9bc:	898b      	ldrh	r3, [r1, #12]
 800e9be:	05db      	lsls	r3, r3, #23
 800e9c0:	4605      	mov	r5, r0
 800e9c2:	460c      	mov	r4, r1
 800e9c4:	4616      	mov	r6, r2
 800e9c6:	d505      	bpl.n	800e9d4 <__swrite+0x1e>
 800e9c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9cc:	2302      	movs	r3, #2
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f001 fa90 	bl	800fef4 <_lseek_r>
 800e9d4:	89a3      	ldrh	r3, [r4, #12]
 800e9d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e9da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e9de:	81a3      	strh	r3, [r4, #12]
 800e9e0:	4632      	mov	r2, r6
 800e9e2:	463b      	mov	r3, r7
 800e9e4:	4628      	mov	r0, r5
 800e9e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e9ea:	f000 b98f 	b.w	800ed0c <_write_r>

0800e9ee <__sseek>:
 800e9ee:	b510      	push	{r4, lr}
 800e9f0:	460c      	mov	r4, r1
 800e9f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f6:	f001 fa7d 	bl	800fef4 <_lseek_r>
 800e9fa:	1c43      	adds	r3, r0, #1
 800e9fc:	89a3      	ldrh	r3, [r4, #12]
 800e9fe:	bf15      	itete	ne
 800ea00:	6560      	strne	r0, [r4, #84]	; 0x54
 800ea02:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ea06:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ea0a:	81a3      	strheq	r3, [r4, #12]
 800ea0c:	bf18      	it	ne
 800ea0e:	81a3      	strhne	r3, [r4, #12]
 800ea10:	bd10      	pop	{r4, pc}

0800ea12 <__sclose>:
 800ea12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ea16:	f000 ba17 	b.w	800ee48 <_close_r>

0800ea1a <strncmp>:
 800ea1a:	b510      	push	{r4, lr}
 800ea1c:	b17a      	cbz	r2, 800ea3e <strncmp+0x24>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	3901      	subs	r1, #1
 800ea22:	1884      	adds	r4, r0, r2
 800ea24:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ea2c:	4290      	cmp	r0, r2
 800ea2e:	d101      	bne.n	800ea34 <strncmp+0x1a>
 800ea30:	42a3      	cmp	r3, r4
 800ea32:	d101      	bne.n	800ea38 <strncmp+0x1e>
 800ea34:	1a80      	subs	r0, r0, r2
 800ea36:	bd10      	pop	{r4, pc}
 800ea38:	2800      	cmp	r0, #0
 800ea3a:	d1f3      	bne.n	800ea24 <strncmp+0xa>
 800ea3c:	e7fa      	b.n	800ea34 <strncmp+0x1a>
 800ea3e:	4610      	mov	r0, r2
 800ea40:	e7f9      	b.n	800ea36 <strncmp+0x1c>

0800ea42 <strncpy>:
 800ea42:	b510      	push	{r4, lr}
 800ea44:	3901      	subs	r1, #1
 800ea46:	4603      	mov	r3, r0
 800ea48:	b132      	cbz	r2, 800ea58 <strncpy+0x16>
 800ea4a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800ea4e:	f803 4b01 	strb.w	r4, [r3], #1
 800ea52:	3a01      	subs	r2, #1
 800ea54:	2c00      	cmp	r4, #0
 800ea56:	d1f7      	bne.n	800ea48 <strncpy+0x6>
 800ea58:	441a      	add	r2, r3
 800ea5a:	2100      	movs	r1, #0
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d100      	bne.n	800ea62 <strncpy+0x20>
 800ea60:	bd10      	pop	{r4, pc}
 800ea62:	f803 1b01 	strb.w	r1, [r3], #1
 800ea66:	e7f9      	b.n	800ea5c <strncpy+0x1a>

0800ea68 <strstr>:
 800ea68:	780a      	ldrb	r2, [r1, #0]
 800ea6a:	b570      	push	{r4, r5, r6, lr}
 800ea6c:	b96a      	cbnz	r2, 800ea8a <strstr+0x22>
 800ea6e:	bd70      	pop	{r4, r5, r6, pc}
 800ea70:	429a      	cmp	r2, r3
 800ea72:	d109      	bne.n	800ea88 <strstr+0x20>
 800ea74:	460c      	mov	r4, r1
 800ea76:	4605      	mov	r5, r0
 800ea78:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d0f6      	beq.n	800ea6e <strstr+0x6>
 800ea80:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800ea84:	429e      	cmp	r6, r3
 800ea86:	d0f7      	beq.n	800ea78 <strstr+0x10>
 800ea88:	3001      	adds	r0, #1
 800ea8a:	7803      	ldrb	r3, [r0, #0]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1ef      	bne.n	800ea70 <strstr+0x8>
 800ea90:	4618      	mov	r0, r3
 800ea92:	e7ec      	b.n	800ea6e <strstr+0x6>

0800ea94 <strtok>:
 800ea94:	4b16      	ldr	r3, [pc, #88]	; (800eaf0 <strtok+0x5c>)
 800ea96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ea98:	681e      	ldr	r6, [r3, #0]
 800ea9a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ea9c:	4605      	mov	r5, r0
 800ea9e:	b9fc      	cbnz	r4, 800eae0 <strtok+0x4c>
 800eaa0:	2050      	movs	r0, #80	; 0x50
 800eaa2:	9101      	str	r1, [sp, #4]
 800eaa4:	f7ff f890 	bl	800dbc8 <malloc>
 800eaa8:	9901      	ldr	r1, [sp, #4]
 800eaaa:	65b0      	str	r0, [r6, #88]	; 0x58
 800eaac:	4602      	mov	r2, r0
 800eaae:	b920      	cbnz	r0, 800eaba <strtok+0x26>
 800eab0:	4b10      	ldr	r3, [pc, #64]	; (800eaf4 <strtok+0x60>)
 800eab2:	4811      	ldr	r0, [pc, #68]	; (800eaf8 <strtok+0x64>)
 800eab4:	2157      	movs	r1, #87	; 0x57
 800eab6:	f000 f9a9 	bl	800ee0c <__assert_func>
 800eaba:	e9c0 4400 	strd	r4, r4, [r0]
 800eabe:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800eac2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800eac6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800eaca:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800eace:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ead2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ead6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800eada:	6184      	str	r4, [r0, #24]
 800eadc:	7704      	strb	r4, [r0, #28]
 800eade:	6244      	str	r4, [r0, #36]	; 0x24
 800eae0:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800eae2:	2301      	movs	r3, #1
 800eae4:	4628      	mov	r0, r5
 800eae6:	b002      	add	sp, #8
 800eae8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eaec:	f000 b806 	b.w	800eafc <__strtok_r>
 800eaf0:	2000000c 	.word	0x2000000c
 800eaf4:	08012b22 	.word	0x08012b22
 800eaf8:	08012b39 	.word	0x08012b39

0800eafc <__strtok_r>:
 800eafc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eafe:	b908      	cbnz	r0, 800eb04 <__strtok_r+0x8>
 800eb00:	6810      	ldr	r0, [r2, #0]
 800eb02:	b188      	cbz	r0, 800eb28 <__strtok_r+0x2c>
 800eb04:	4604      	mov	r4, r0
 800eb06:	4620      	mov	r0, r4
 800eb08:	f814 5b01 	ldrb.w	r5, [r4], #1
 800eb0c:	460f      	mov	r7, r1
 800eb0e:	f817 6b01 	ldrb.w	r6, [r7], #1
 800eb12:	b91e      	cbnz	r6, 800eb1c <__strtok_r+0x20>
 800eb14:	b965      	cbnz	r5, 800eb30 <__strtok_r+0x34>
 800eb16:	6015      	str	r5, [r2, #0]
 800eb18:	4628      	mov	r0, r5
 800eb1a:	e005      	b.n	800eb28 <__strtok_r+0x2c>
 800eb1c:	42b5      	cmp	r5, r6
 800eb1e:	d1f6      	bne.n	800eb0e <__strtok_r+0x12>
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d1f0      	bne.n	800eb06 <__strtok_r+0xa>
 800eb24:	6014      	str	r4, [r2, #0]
 800eb26:	7003      	strb	r3, [r0, #0]
 800eb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800eb2a:	461c      	mov	r4, r3
 800eb2c:	e00c      	b.n	800eb48 <__strtok_r+0x4c>
 800eb2e:	b915      	cbnz	r5, 800eb36 <__strtok_r+0x3a>
 800eb30:	f814 3b01 	ldrb.w	r3, [r4], #1
 800eb34:	460e      	mov	r6, r1
 800eb36:	f816 5b01 	ldrb.w	r5, [r6], #1
 800eb3a:	42ab      	cmp	r3, r5
 800eb3c:	d1f7      	bne.n	800eb2e <__strtok_r+0x32>
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d0f3      	beq.n	800eb2a <__strtok_r+0x2e>
 800eb42:	2300      	movs	r3, #0
 800eb44:	f804 3c01 	strb.w	r3, [r4, #-1]
 800eb48:	6014      	str	r4, [r2, #0]
 800eb4a:	e7ed      	b.n	800eb28 <__strtok_r+0x2c>

0800eb4c <_strtol_l.constprop.0>:
 800eb4c:	2b01      	cmp	r3, #1
 800eb4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb52:	d001      	beq.n	800eb58 <_strtol_l.constprop.0+0xc>
 800eb54:	2b24      	cmp	r3, #36	; 0x24
 800eb56:	d906      	bls.n	800eb66 <_strtol_l.constprop.0+0x1a>
 800eb58:	f7ff f808 	bl	800db6c <__errno>
 800eb5c:	2316      	movs	r3, #22
 800eb5e:	6003      	str	r3, [r0, #0]
 800eb60:	2000      	movs	r0, #0
 800eb62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ec4c <_strtol_l.constprop.0+0x100>
 800eb6a:	460d      	mov	r5, r1
 800eb6c:	462e      	mov	r6, r5
 800eb6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800eb72:	f814 700c 	ldrb.w	r7, [r4, ip]
 800eb76:	f017 0708 	ands.w	r7, r7, #8
 800eb7a:	d1f7      	bne.n	800eb6c <_strtol_l.constprop.0+0x20>
 800eb7c:	2c2d      	cmp	r4, #45	; 0x2d
 800eb7e:	d132      	bne.n	800ebe6 <_strtol_l.constprop.0+0x9a>
 800eb80:	782c      	ldrb	r4, [r5, #0]
 800eb82:	2701      	movs	r7, #1
 800eb84:	1cb5      	adds	r5, r6, #2
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d05b      	beq.n	800ec42 <_strtol_l.constprop.0+0xf6>
 800eb8a:	2b10      	cmp	r3, #16
 800eb8c:	d109      	bne.n	800eba2 <_strtol_l.constprop.0+0x56>
 800eb8e:	2c30      	cmp	r4, #48	; 0x30
 800eb90:	d107      	bne.n	800eba2 <_strtol_l.constprop.0+0x56>
 800eb92:	782c      	ldrb	r4, [r5, #0]
 800eb94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800eb98:	2c58      	cmp	r4, #88	; 0x58
 800eb9a:	d14d      	bne.n	800ec38 <_strtol_l.constprop.0+0xec>
 800eb9c:	786c      	ldrb	r4, [r5, #1]
 800eb9e:	2310      	movs	r3, #16
 800eba0:	3502      	adds	r5, #2
 800eba2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800eba6:	f108 38ff 	add.w	r8, r8, #4294967295
 800ebaa:	f04f 0c00 	mov.w	ip, #0
 800ebae:	fbb8 f9f3 	udiv	r9, r8, r3
 800ebb2:	4666      	mov	r6, ip
 800ebb4:	fb03 8a19 	mls	sl, r3, r9, r8
 800ebb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ebbc:	f1be 0f09 	cmp.w	lr, #9
 800ebc0:	d816      	bhi.n	800ebf0 <_strtol_l.constprop.0+0xa4>
 800ebc2:	4674      	mov	r4, lr
 800ebc4:	42a3      	cmp	r3, r4
 800ebc6:	dd24      	ble.n	800ec12 <_strtol_l.constprop.0+0xc6>
 800ebc8:	f1bc 0f00 	cmp.w	ip, #0
 800ebcc:	db1e      	blt.n	800ec0c <_strtol_l.constprop.0+0xc0>
 800ebce:	45b1      	cmp	r9, r6
 800ebd0:	d31c      	bcc.n	800ec0c <_strtol_l.constprop.0+0xc0>
 800ebd2:	d101      	bne.n	800ebd8 <_strtol_l.constprop.0+0x8c>
 800ebd4:	45a2      	cmp	sl, r4
 800ebd6:	db19      	blt.n	800ec0c <_strtol_l.constprop.0+0xc0>
 800ebd8:	fb06 4603 	mla	r6, r6, r3, r4
 800ebdc:	f04f 0c01 	mov.w	ip, #1
 800ebe0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ebe4:	e7e8      	b.n	800ebb8 <_strtol_l.constprop.0+0x6c>
 800ebe6:	2c2b      	cmp	r4, #43	; 0x2b
 800ebe8:	bf04      	itt	eq
 800ebea:	782c      	ldrbeq	r4, [r5, #0]
 800ebec:	1cb5      	addeq	r5, r6, #2
 800ebee:	e7ca      	b.n	800eb86 <_strtol_l.constprop.0+0x3a>
 800ebf0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ebf4:	f1be 0f19 	cmp.w	lr, #25
 800ebf8:	d801      	bhi.n	800ebfe <_strtol_l.constprop.0+0xb2>
 800ebfa:	3c37      	subs	r4, #55	; 0x37
 800ebfc:	e7e2      	b.n	800ebc4 <_strtol_l.constprop.0+0x78>
 800ebfe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ec02:	f1be 0f19 	cmp.w	lr, #25
 800ec06:	d804      	bhi.n	800ec12 <_strtol_l.constprop.0+0xc6>
 800ec08:	3c57      	subs	r4, #87	; 0x57
 800ec0a:	e7db      	b.n	800ebc4 <_strtol_l.constprop.0+0x78>
 800ec0c:	f04f 3cff 	mov.w	ip, #4294967295
 800ec10:	e7e6      	b.n	800ebe0 <_strtol_l.constprop.0+0x94>
 800ec12:	f1bc 0f00 	cmp.w	ip, #0
 800ec16:	da05      	bge.n	800ec24 <_strtol_l.constprop.0+0xd8>
 800ec18:	2322      	movs	r3, #34	; 0x22
 800ec1a:	6003      	str	r3, [r0, #0]
 800ec1c:	4646      	mov	r6, r8
 800ec1e:	b942      	cbnz	r2, 800ec32 <_strtol_l.constprop.0+0xe6>
 800ec20:	4630      	mov	r0, r6
 800ec22:	e79e      	b.n	800eb62 <_strtol_l.constprop.0+0x16>
 800ec24:	b107      	cbz	r7, 800ec28 <_strtol_l.constprop.0+0xdc>
 800ec26:	4276      	negs	r6, r6
 800ec28:	2a00      	cmp	r2, #0
 800ec2a:	d0f9      	beq.n	800ec20 <_strtol_l.constprop.0+0xd4>
 800ec2c:	f1bc 0f00 	cmp.w	ip, #0
 800ec30:	d000      	beq.n	800ec34 <_strtol_l.constprop.0+0xe8>
 800ec32:	1e69      	subs	r1, r5, #1
 800ec34:	6011      	str	r1, [r2, #0]
 800ec36:	e7f3      	b.n	800ec20 <_strtol_l.constprop.0+0xd4>
 800ec38:	2430      	movs	r4, #48	; 0x30
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d1b1      	bne.n	800eba2 <_strtol_l.constprop.0+0x56>
 800ec3e:	2308      	movs	r3, #8
 800ec40:	e7af      	b.n	800eba2 <_strtol_l.constprop.0+0x56>
 800ec42:	2c30      	cmp	r4, #48	; 0x30
 800ec44:	d0a5      	beq.n	800eb92 <_strtol_l.constprop.0+0x46>
 800ec46:	230a      	movs	r3, #10
 800ec48:	e7ab      	b.n	800eba2 <_strtol_l.constprop.0+0x56>
 800ec4a:	bf00      	nop
 800ec4c:	080129e9 	.word	0x080129e9

0800ec50 <_strtol_r>:
 800ec50:	f7ff bf7c 	b.w	800eb4c <_strtol_l.constprop.0>

0800ec54 <strtol>:
 800ec54:	4613      	mov	r3, r2
 800ec56:	460a      	mov	r2, r1
 800ec58:	4601      	mov	r1, r0
 800ec5a:	4802      	ldr	r0, [pc, #8]	; (800ec64 <strtol+0x10>)
 800ec5c:	6800      	ldr	r0, [r0, #0]
 800ec5e:	f7ff bf75 	b.w	800eb4c <_strtol_l.constprop.0>
 800ec62:	bf00      	nop
 800ec64:	2000000c 	.word	0x2000000c

0800ec68 <__swbuf_r>:
 800ec68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec6a:	460e      	mov	r6, r1
 800ec6c:	4614      	mov	r4, r2
 800ec6e:	4605      	mov	r5, r0
 800ec70:	b118      	cbz	r0, 800ec7a <__swbuf_r+0x12>
 800ec72:	6983      	ldr	r3, [r0, #24]
 800ec74:	b90b      	cbnz	r3, 800ec7a <__swbuf_r+0x12>
 800ec76:	f001 f88b 	bl	800fd90 <__sinit>
 800ec7a:	4b21      	ldr	r3, [pc, #132]	; (800ed00 <__swbuf_r+0x98>)
 800ec7c:	429c      	cmp	r4, r3
 800ec7e:	d12b      	bne.n	800ecd8 <__swbuf_r+0x70>
 800ec80:	686c      	ldr	r4, [r5, #4]
 800ec82:	69a3      	ldr	r3, [r4, #24]
 800ec84:	60a3      	str	r3, [r4, #8]
 800ec86:	89a3      	ldrh	r3, [r4, #12]
 800ec88:	071a      	lsls	r2, r3, #28
 800ec8a:	d52f      	bpl.n	800ecec <__swbuf_r+0x84>
 800ec8c:	6923      	ldr	r3, [r4, #16]
 800ec8e:	b36b      	cbz	r3, 800ecec <__swbuf_r+0x84>
 800ec90:	6923      	ldr	r3, [r4, #16]
 800ec92:	6820      	ldr	r0, [r4, #0]
 800ec94:	1ac0      	subs	r0, r0, r3
 800ec96:	6963      	ldr	r3, [r4, #20]
 800ec98:	b2f6      	uxtb	r6, r6
 800ec9a:	4283      	cmp	r3, r0
 800ec9c:	4637      	mov	r7, r6
 800ec9e:	dc04      	bgt.n	800ecaa <__swbuf_r+0x42>
 800eca0:	4621      	mov	r1, r4
 800eca2:	4628      	mov	r0, r5
 800eca4:	f000 ffe0 	bl	800fc68 <_fflush_r>
 800eca8:	bb30      	cbnz	r0, 800ecf8 <__swbuf_r+0x90>
 800ecaa:	68a3      	ldr	r3, [r4, #8]
 800ecac:	3b01      	subs	r3, #1
 800ecae:	60a3      	str	r3, [r4, #8]
 800ecb0:	6823      	ldr	r3, [r4, #0]
 800ecb2:	1c5a      	adds	r2, r3, #1
 800ecb4:	6022      	str	r2, [r4, #0]
 800ecb6:	701e      	strb	r6, [r3, #0]
 800ecb8:	6963      	ldr	r3, [r4, #20]
 800ecba:	3001      	adds	r0, #1
 800ecbc:	4283      	cmp	r3, r0
 800ecbe:	d004      	beq.n	800ecca <__swbuf_r+0x62>
 800ecc0:	89a3      	ldrh	r3, [r4, #12]
 800ecc2:	07db      	lsls	r3, r3, #31
 800ecc4:	d506      	bpl.n	800ecd4 <__swbuf_r+0x6c>
 800ecc6:	2e0a      	cmp	r6, #10
 800ecc8:	d104      	bne.n	800ecd4 <__swbuf_r+0x6c>
 800ecca:	4621      	mov	r1, r4
 800eccc:	4628      	mov	r0, r5
 800ecce:	f000 ffcb 	bl	800fc68 <_fflush_r>
 800ecd2:	b988      	cbnz	r0, 800ecf8 <__swbuf_r+0x90>
 800ecd4:	4638      	mov	r0, r7
 800ecd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecd8:	4b0a      	ldr	r3, [pc, #40]	; (800ed04 <__swbuf_r+0x9c>)
 800ecda:	429c      	cmp	r4, r3
 800ecdc:	d101      	bne.n	800ece2 <__swbuf_r+0x7a>
 800ecde:	68ac      	ldr	r4, [r5, #8]
 800ece0:	e7cf      	b.n	800ec82 <__swbuf_r+0x1a>
 800ece2:	4b09      	ldr	r3, [pc, #36]	; (800ed08 <__swbuf_r+0xa0>)
 800ece4:	429c      	cmp	r4, r3
 800ece6:	bf08      	it	eq
 800ece8:	68ec      	ldreq	r4, [r5, #12]
 800ecea:	e7ca      	b.n	800ec82 <__swbuf_r+0x1a>
 800ecec:	4621      	mov	r1, r4
 800ecee:	4628      	mov	r0, r5
 800ecf0:	f000 f81e 	bl	800ed30 <__swsetup_r>
 800ecf4:	2800      	cmp	r0, #0
 800ecf6:	d0cb      	beq.n	800ec90 <__swbuf_r+0x28>
 800ecf8:	f04f 37ff 	mov.w	r7, #4294967295
 800ecfc:	e7ea      	b.n	800ecd4 <__swbuf_r+0x6c>
 800ecfe:	bf00      	nop
 800ed00:	08012c6c 	.word	0x08012c6c
 800ed04:	08012c8c 	.word	0x08012c8c
 800ed08:	08012c4c 	.word	0x08012c4c

0800ed0c <_write_r>:
 800ed0c:	b538      	push	{r3, r4, r5, lr}
 800ed0e:	4d07      	ldr	r5, [pc, #28]	; (800ed2c <_write_r+0x20>)
 800ed10:	4604      	mov	r4, r0
 800ed12:	4608      	mov	r0, r1
 800ed14:	4611      	mov	r1, r2
 800ed16:	2200      	movs	r2, #0
 800ed18:	602a      	str	r2, [r5, #0]
 800ed1a:	461a      	mov	r2, r3
 800ed1c:	f7f3 fbbc 	bl	8002498 <_write>
 800ed20:	1c43      	adds	r3, r0, #1
 800ed22:	d102      	bne.n	800ed2a <_write_r+0x1e>
 800ed24:	682b      	ldr	r3, [r5, #0]
 800ed26:	b103      	cbz	r3, 800ed2a <_write_r+0x1e>
 800ed28:	6023      	str	r3, [r4, #0]
 800ed2a:	bd38      	pop	{r3, r4, r5, pc}
 800ed2c:	20001894 	.word	0x20001894

0800ed30 <__swsetup_r>:
 800ed30:	4b32      	ldr	r3, [pc, #200]	; (800edfc <__swsetup_r+0xcc>)
 800ed32:	b570      	push	{r4, r5, r6, lr}
 800ed34:	681d      	ldr	r5, [r3, #0]
 800ed36:	4606      	mov	r6, r0
 800ed38:	460c      	mov	r4, r1
 800ed3a:	b125      	cbz	r5, 800ed46 <__swsetup_r+0x16>
 800ed3c:	69ab      	ldr	r3, [r5, #24]
 800ed3e:	b913      	cbnz	r3, 800ed46 <__swsetup_r+0x16>
 800ed40:	4628      	mov	r0, r5
 800ed42:	f001 f825 	bl	800fd90 <__sinit>
 800ed46:	4b2e      	ldr	r3, [pc, #184]	; (800ee00 <__swsetup_r+0xd0>)
 800ed48:	429c      	cmp	r4, r3
 800ed4a:	d10f      	bne.n	800ed6c <__swsetup_r+0x3c>
 800ed4c:	686c      	ldr	r4, [r5, #4]
 800ed4e:	89a3      	ldrh	r3, [r4, #12]
 800ed50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed54:	0719      	lsls	r1, r3, #28
 800ed56:	d42c      	bmi.n	800edb2 <__swsetup_r+0x82>
 800ed58:	06dd      	lsls	r5, r3, #27
 800ed5a:	d411      	bmi.n	800ed80 <__swsetup_r+0x50>
 800ed5c:	2309      	movs	r3, #9
 800ed5e:	6033      	str	r3, [r6, #0]
 800ed60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ed64:	81a3      	strh	r3, [r4, #12]
 800ed66:	f04f 30ff 	mov.w	r0, #4294967295
 800ed6a:	e03e      	b.n	800edea <__swsetup_r+0xba>
 800ed6c:	4b25      	ldr	r3, [pc, #148]	; (800ee04 <__swsetup_r+0xd4>)
 800ed6e:	429c      	cmp	r4, r3
 800ed70:	d101      	bne.n	800ed76 <__swsetup_r+0x46>
 800ed72:	68ac      	ldr	r4, [r5, #8]
 800ed74:	e7eb      	b.n	800ed4e <__swsetup_r+0x1e>
 800ed76:	4b24      	ldr	r3, [pc, #144]	; (800ee08 <__swsetup_r+0xd8>)
 800ed78:	429c      	cmp	r4, r3
 800ed7a:	bf08      	it	eq
 800ed7c:	68ec      	ldreq	r4, [r5, #12]
 800ed7e:	e7e6      	b.n	800ed4e <__swsetup_r+0x1e>
 800ed80:	0758      	lsls	r0, r3, #29
 800ed82:	d512      	bpl.n	800edaa <__swsetup_r+0x7a>
 800ed84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ed86:	b141      	cbz	r1, 800ed9a <__swsetup_r+0x6a>
 800ed88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ed8c:	4299      	cmp	r1, r3
 800ed8e:	d002      	beq.n	800ed96 <__swsetup_r+0x66>
 800ed90:	4630      	mov	r0, r6
 800ed92:	f7fe ff7f 	bl	800dc94 <_free_r>
 800ed96:	2300      	movs	r3, #0
 800ed98:	6363      	str	r3, [r4, #52]	; 0x34
 800ed9a:	89a3      	ldrh	r3, [r4, #12]
 800ed9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800eda0:	81a3      	strh	r3, [r4, #12]
 800eda2:	2300      	movs	r3, #0
 800eda4:	6063      	str	r3, [r4, #4]
 800eda6:	6923      	ldr	r3, [r4, #16]
 800eda8:	6023      	str	r3, [r4, #0]
 800edaa:	89a3      	ldrh	r3, [r4, #12]
 800edac:	f043 0308 	orr.w	r3, r3, #8
 800edb0:	81a3      	strh	r3, [r4, #12]
 800edb2:	6923      	ldr	r3, [r4, #16]
 800edb4:	b94b      	cbnz	r3, 800edca <__swsetup_r+0x9a>
 800edb6:	89a3      	ldrh	r3, [r4, #12]
 800edb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800edbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800edc0:	d003      	beq.n	800edca <__swsetup_r+0x9a>
 800edc2:	4621      	mov	r1, r4
 800edc4:	4630      	mov	r0, r6
 800edc6:	f001 f8cd 	bl	800ff64 <__smakebuf_r>
 800edca:	89a0      	ldrh	r0, [r4, #12]
 800edcc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800edd0:	f010 0301 	ands.w	r3, r0, #1
 800edd4:	d00a      	beq.n	800edec <__swsetup_r+0xbc>
 800edd6:	2300      	movs	r3, #0
 800edd8:	60a3      	str	r3, [r4, #8]
 800edda:	6963      	ldr	r3, [r4, #20]
 800eddc:	425b      	negs	r3, r3
 800edde:	61a3      	str	r3, [r4, #24]
 800ede0:	6923      	ldr	r3, [r4, #16]
 800ede2:	b943      	cbnz	r3, 800edf6 <__swsetup_r+0xc6>
 800ede4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ede8:	d1ba      	bne.n	800ed60 <__swsetup_r+0x30>
 800edea:	bd70      	pop	{r4, r5, r6, pc}
 800edec:	0781      	lsls	r1, r0, #30
 800edee:	bf58      	it	pl
 800edf0:	6963      	ldrpl	r3, [r4, #20]
 800edf2:	60a3      	str	r3, [r4, #8]
 800edf4:	e7f4      	b.n	800ede0 <__swsetup_r+0xb0>
 800edf6:	2000      	movs	r0, #0
 800edf8:	e7f7      	b.n	800edea <__swsetup_r+0xba>
 800edfa:	bf00      	nop
 800edfc:	2000000c 	.word	0x2000000c
 800ee00:	08012c6c 	.word	0x08012c6c
 800ee04:	08012c8c 	.word	0x08012c8c
 800ee08:	08012c4c 	.word	0x08012c4c

0800ee0c <__assert_func>:
 800ee0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ee0e:	4614      	mov	r4, r2
 800ee10:	461a      	mov	r2, r3
 800ee12:	4b09      	ldr	r3, [pc, #36]	; (800ee38 <__assert_func+0x2c>)
 800ee14:	681b      	ldr	r3, [r3, #0]
 800ee16:	4605      	mov	r5, r0
 800ee18:	68d8      	ldr	r0, [r3, #12]
 800ee1a:	b14c      	cbz	r4, 800ee30 <__assert_func+0x24>
 800ee1c:	4b07      	ldr	r3, [pc, #28]	; (800ee3c <__assert_func+0x30>)
 800ee1e:	9100      	str	r1, [sp, #0]
 800ee20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ee24:	4906      	ldr	r1, [pc, #24]	; (800ee40 <__assert_func+0x34>)
 800ee26:	462b      	mov	r3, r5
 800ee28:	f001 f830 	bl	800fe8c <fiprintf>
 800ee2c:	f002 fbd1 	bl	80115d2 <abort>
 800ee30:	4b04      	ldr	r3, [pc, #16]	; (800ee44 <__assert_func+0x38>)
 800ee32:	461c      	mov	r4, r3
 800ee34:	e7f3      	b.n	800ee1e <__assert_func+0x12>
 800ee36:	bf00      	nop
 800ee38:	2000000c 	.word	0x2000000c
 800ee3c:	08012b96 	.word	0x08012b96
 800ee40:	08012ba3 	.word	0x08012ba3
 800ee44:	08012bd1 	.word	0x08012bd1

0800ee48 <_close_r>:
 800ee48:	b538      	push	{r3, r4, r5, lr}
 800ee4a:	4d06      	ldr	r5, [pc, #24]	; (800ee64 <_close_r+0x1c>)
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	4604      	mov	r4, r0
 800ee50:	4608      	mov	r0, r1
 800ee52:	602b      	str	r3, [r5, #0]
 800ee54:	f7f4 ffa3 	bl	8003d9e <_close>
 800ee58:	1c43      	adds	r3, r0, #1
 800ee5a:	d102      	bne.n	800ee62 <_close_r+0x1a>
 800ee5c:	682b      	ldr	r3, [r5, #0]
 800ee5e:	b103      	cbz	r3, 800ee62 <_close_r+0x1a>
 800ee60:	6023      	str	r3, [r4, #0]
 800ee62:	bd38      	pop	{r3, r4, r5, pc}
 800ee64:	20001894 	.word	0x20001894

0800ee68 <quorem>:
 800ee68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee6c:	6903      	ldr	r3, [r0, #16]
 800ee6e:	690c      	ldr	r4, [r1, #16]
 800ee70:	42a3      	cmp	r3, r4
 800ee72:	4607      	mov	r7, r0
 800ee74:	f2c0 8081 	blt.w	800ef7a <quorem+0x112>
 800ee78:	3c01      	subs	r4, #1
 800ee7a:	f101 0814 	add.w	r8, r1, #20
 800ee7e:	f100 0514 	add.w	r5, r0, #20
 800ee82:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ee86:	9301      	str	r3, [sp, #4]
 800ee88:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ee8c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ee90:	3301      	adds	r3, #1
 800ee92:	429a      	cmp	r2, r3
 800ee94:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ee98:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ee9c:	fbb2 f6f3 	udiv	r6, r2, r3
 800eea0:	d331      	bcc.n	800ef06 <quorem+0x9e>
 800eea2:	f04f 0e00 	mov.w	lr, #0
 800eea6:	4640      	mov	r0, r8
 800eea8:	46ac      	mov	ip, r5
 800eeaa:	46f2      	mov	sl, lr
 800eeac:	f850 2b04 	ldr.w	r2, [r0], #4
 800eeb0:	b293      	uxth	r3, r2
 800eeb2:	fb06 e303 	mla	r3, r6, r3, lr
 800eeb6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800eeba:	b29b      	uxth	r3, r3
 800eebc:	ebaa 0303 	sub.w	r3, sl, r3
 800eec0:	f8dc a000 	ldr.w	sl, [ip]
 800eec4:	0c12      	lsrs	r2, r2, #16
 800eec6:	fa13 f38a 	uxtah	r3, r3, sl
 800eeca:	fb06 e202 	mla	r2, r6, r2, lr
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	9b00      	ldr	r3, [sp, #0]
 800eed2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800eed6:	b292      	uxth	r2, r2
 800eed8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800eedc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800eee0:	f8bd 3000 	ldrh.w	r3, [sp]
 800eee4:	4581      	cmp	r9, r0
 800eee6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eeea:	f84c 3b04 	str.w	r3, [ip], #4
 800eeee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800eef2:	d2db      	bcs.n	800eeac <quorem+0x44>
 800eef4:	f855 300b 	ldr.w	r3, [r5, fp]
 800eef8:	b92b      	cbnz	r3, 800ef06 <quorem+0x9e>
 800eefa:	9b01      	ldr	r3, [sp, #4]
 800eefc:	3b04      	subs	r3, #4
 800eefe:	429d      	cmp	r5, r3
 800ef00:	461a      	mov	r2, r3
 800ef02:	d32e      	bcc.n	800ef62 <quorem+0xfa>
 800ef04:	613c      	str	r4, [r7, #16]
 800ef06:	4638      	mov	r0, r7
 800ef08:	f001 fb0c 	bl	8010524 <__mcmp>
 800ef0c:	2800      	cmp	r0, #0
 800ef0e:	db24      	blt.n	800ef5a <quorem+0xf2>
 800ef10:	3601      	adds	r6, #1
 800ef12:	4628      	mov	r0, r5
 800ef14:	f04f 0c00 	mov.w	ip, #0
 800ef18:	f858 2b04 	ldr.w	r2, [r8], #4
 800ef1c:	f8d0 e000 	ldr.w	lr, [r0]
 800ef20:	b293      	uxth	r3, r2
 800ef22:	ebac 0303 	sub.w	r3, ip, r3
 800ef26:	0c12      	lsrs	r2, r2, #16
 800ef28:	fa13 f38e 	uxtah	r3, r3, lr
 800ef2c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ef30:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ef34:	b29b      	uxth	r3, r3
 800ef36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ef3a:	45c1      	cmp	r9, r8
 800ef3c:	f840 3b04 	str.w	r3, [r0], #4
 800ef40:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ef44:	d2e8      	bcs.n	800ef18 <quorem+0xb0>
 800ef46:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef4a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef4e:	b922      	cbnz	r2, 800ef5a <quorem+0xf2>
 800ef50:	3b04      	subs	r3, #4
 800ef52:	429d      	cmp	r5, r3
 800ef54:	461a      	mov	r2, r3
 800ef56:	d30a      	bcc.n	800ef6e <quorem+0x106>
 800ef58:	613c      	str	r4, [r7, #16]
 800ef5a:	4630      	mov	r0, r6
 800ef5c:	b003      	add	sp, #12
 800ef5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef62:	6812      	ldr	r2, [r2, #0]
 800ef64:	3b04      	subs	r3, #4
 800ef66:	2a00      	cmp	r2, #0
 800ef68:	d1cc      	bne.n	800ef04 <quorem+0x9c>
 800ef6a:	3c01      	subs	r4, #1
 800ef6c:	e7c7      	b.n	800eefe <quorem+0x96>
 800ef6e:	6812      	ldr	r2, [r2, #0]
 800ef70:	3b04      	subs	r3, #4
 800ef72:	2a00      	cmp	r2, #0
 800ef74:	d1f0      	bne.n	800ef58 <quorem+0xf0>
 800ef76:	3c01      	subs	r4, #1
 800ef78:	e7eb      	b.n	800ef52 <quorem+0xea>
 800ef7a:	2000      	movs	r0, #0
 800ef7c:	e7ee      	b.n	800ef5c <quorem+0xf4>
	...

0800ef80 <_dtoa_r>:
 800ef80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef84:	ed2d 8b04 	vpush	{d8-d9}
 800ef88:	ec57 6b10 	vmov	r6, r7, d0
 800ef8c:	b093      	sub	sp, #76	; 0x4c
 800ef8e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ef90:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ef94:	9106      	str	r1, [sp, #24]
 800ef96:	ee10 aa10 	vmov	sl, s0
 800ef9a:	4604      	mov	r4, r0
 800ef9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ef9e:	930c      	str	r3, [sp, #48]	; 0x30
 800efa0:	46bb      	mov	fp, r7
 800efa2:	b975      	cbnz	r5, 800efc2 <_dtoa_r+0x42>
 800efa4:	2010      	movs	r0, #16
 800efa6:	f7fe fe0f 	bl	800dbc8 <malloc>
 800efaa:	4602      	mov	r2, r0
 800efac:	6260      	str	r0, [r4, #36]	; 0x24
 800efae:	b920      	cbnz	r0, 800efba <_dtoa_r+0x3a>
 800efb0:	4ba7      	ldr	r3, [pc, #668]	; (800f250 <_dtoa_r+0x2d0>)
 800efb2:	21ea      	movs	r1, #234	; 0xea
 800efb4:	48a7      	ldr	r0, [pc, #668]	; (800f254 <_dtoa_r+0x2d4>)
 800efb6:	f7ff ff29 	bl	800ee0c <__assert_func>
 800efba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800efbe:	6005      	str	r5, [r0, #0]
 800efc0:	60c5      	str	r5, [r0, #12]
 800efc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efc4:	6819      	ldr	r1, [r3, #0]
 800efc6:	b151      	cbz	r1, 800efde <_dtoa_r+0x5e>
 800efc8:	685a      	ldr	r2, [r3, #4]
 800efca:	604a      	str	r2, [r1, #4]
 800efcc:	2301      	movs	r3, #1
 800efce:	4093      	lsls	r3, r2
 800efd0:	608b      	str	r3, [r1, #8]
 800efd2:	4620      	mov	r0, r4
 800efd4:	f001 f864 	bl	80100a0 <_Bfree>
 800efd8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800efda:	2200      	movs	r2, #0
 800efdc:	601a      	str	r2, [r3, #0]
 800efde:	1e3b      	subs	r3, r7, #0
 800efe0:	bfaa      	itet	ge
 800efe2:	2300      	movge	r3, #0
 800efe4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800efe8:	f8c8 3000 	strge.w	r3, [r8]
 800efec:	4b9a      	ldr	r3, [pc, #616]	; (800f258 <_dtoa_r+0x2d8>)
 800efee:	bfbc      	itt	lt
 800eff0:	2201      	movlt	r2, #1
 800eff2:	f8c8 2000 	strlt.w	r2, [r8]
 800eff6:	ea33 030b 	bics.w	r3, r3, fp
 800effa:	d11b      	bne.n	800f034 <_dtoa_r+0xb4>
 800effc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800effe:	f242 730f 	movw	r3, #9999	; 0x270f
 800f002:	6013      	str	r3, [r2, #0]
 800f004:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f008:	4333      	orrs	r3, r6
 800f00a:	f000 8592 	beq.w	800fb32 <_dtoa_r+0xbb2>
 800f00e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f010:	b963      	cbnz	r3, 800f02c <_dtoa_r+0xac>
 800f012:	4b92      	ldr	r3, [pc, #584]	; (800f25c <_dtoa_r+0x2dc>)
 800f014:	e022      	b.n	800f05c <_dtoa_r+0xdc>
 800f016:	4b92      	ldr	r3, [pc, #584]	; (800f260 <_dtoa_r+0x2e0>)
 800f018:	9301      	str	r3, [sp, #4]
 800f01a:	3308      	adds	r3, #8
 800f01c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f01e:	6013      	str	r3, [r2, #0]
 800f020:	9801      	ldr	r0, [sp, #4]
 800f022:	b013      	add	sp, #76	; 0x4c
 800f024:	ecbd 8b04 	vpop	{d8-d9}
 800f028:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f02c:	4b8b      	ldr	r3, [pc, #556]	; (800f25c <_dtoa_r+0x2dc>)
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	3303      	adds	r3, #3
 800f032:	e7f3      	b.n	800f01c <_dtoa_r+0x9c>
 800f034:	2200      	movs	r2, #0
 800f036:	2300      	movs	r3, #0
 800f038:	4650      	mov	r0, sl
 800f03a:	4659      	mov	r1, fp
 800f03c:	f7f1 fd54 	bl	8000ae8 <__aeabi_dcmpeq>
 800f040:	ec4b ab19 	vmov	d9, sl, fp
 800f044:	4680      	mov	r8, r0
 800f046:	b158      	cbz	r0, 800f060 <_dtoa_r+0xe0>
 800f048:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800f04a:	2301      	movs	r3, #1
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f050:	2b00      	cmp	r3, #0
 800f052:	f000 856b 	beq.w	800fb2c <_dtoa_r+0xbac>
 800f056:	4883      	ldr	r0, [pc, #524]	; (800f264 <_dtoa_r+0x2e4>)
 800f058:	6018      	str	r0, [r3, #0]
 800f05a:	1e43      	subs	r3, r0, #1
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	e7df      	b.n	800f020 <_dtoa_r+0xa0>
 800f060:	ec4b ab10 	vmov	d0, sl, fp
 800f064:	aa10      	add	r2, sp, #64	; 0x40
 800f066:	a911      	add	r1, sp, #68	; 0x44
 800f068:	4620      	mov	r0, r4
 800f06a:	f001 fb01 	bl	8010670 <__d2b>
 800f06e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800f072:	ee08 0a10 	vmov	s16, r0
 800f076:	2d00      	cmp	r5, #0
 800f078:	f000 8084 	beq.w	800f184 <_dtoa_r+0x204>
 800f07c:	ee19 3a90 	vmov	r3, s19
 800f080:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f084:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800f088:	4656      	mov	r6, sl
 800f08a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800f08e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f092:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800f096:	4b74      	ldr	r3, [pc, #464]	; (800f268 <_dtoa_r+0x2e8>)
 800f098:	2200      	movs	r2, #0
 800f09a:	4630      	mov	r0, r6
 800f09c:	4639      	mov	r1, r7
 800f09e:	f7f1 f903 	bl	80002a8 <__aeabi_dsub>
 800f0a2:	a365      	add	r3, pc, #404	; (adr r3, 800f238 <_dtoa_r+0x2b8>)
 800f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a8:	f7f1 fab6 	bl	8000618 <__aeabi_dmul>
 800f0ac:	a364      	add	r3, pc, #400	; (adr r3, 800f240 <_dtoa_r+0x2c0>)
 800f0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0b2:	f7f1 f8fb 	bl	80002ac <__adddf3>
 800f0b6:	4606      	mov	r6, r0
 800f0b8:	4628      	mov	r0, r5
 800f0ba:	460f      	mov	r7, r1
 800f0bc:	f7f1 fa42 	bl	8000544 <__aeabi_i2d>
 800f0c0:	a361      	add	r3, pc, #388	; (adr r3, 800f248 <_dtoa_r+0x2c8>)
 800f0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0c6:	f7f1 faa7 	bl	8000618 <__aeabi_dmul>
 800f0ca:	4602      	mov	r2, r0
 800f0cc:	460b      	mov	r3, r1
 800f0ce:	4630      	mov	r0, r6
 800f0d0:	4639      	mov	r1, r7
 800f0d2:	f7f1 f8eb 	bl	80002ac <__adddf3>
 800f0d6:	4606      	mov	r6, r0
 800f0d8:	460f      	mov	r7, r1
 800f0da:	f7f1 fd4d 	bl	8000b78 <__aeabi_d2iz>
 800f0de:	2200      	movs	r2, #0
 800f0e0:	9000      	str	r0, [sp, #0]
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	4630      	mov	r0, r6
 800f0e6:	4639      	mov	r1, r7
 800f0e8:	f7f1 fd08 	bl	8000afc <__aeabi_dcmplt>
 800f0ec:	b150      	cbz	r0, 800f104 <_dtoa_r+0x184>
 800f0ee:	9800      	ldr	r0, [sp, #0]
 800f0f0:	f7f1 fa28 	bl	8000544 <__aeabi_i2d>
 800f0f4:	4632      	mov	r2, r6
 800f0f6:	463b      	mov	r3, r7
 800f0f8:	f7f1 fcf6 	bl	8000ae8 <__aeabi_dcmpeq>
 800f0fc:	b910      	cbnz	r0, 800f104 <_dtoa_r+0x184>
 800f0fe:	9b00      	ldr	r3, [sp, #0]
 800f100:	3b01      	subs	r3, #1
 800f102:	9300      	str	r3, [sp, #0]
 800f104:	9b00      	ldr	r3, [sp, #0]
 800f106:	2b16      	cmp	r3, #22
 800f108:	d85a      	bhi.n	800f1c0 <_dtoa_r+0x240>
 800f10a:	9a00      	ldr	r2, [sp, #0]
 800f10c:	4b57      	ldr	r3, [pc, #348]	; (800f26c <_dtoa_r+0x2ec>)
 800f10e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f112:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f116:	ec51 0b19 	vmov	r0, r1, d9
 800f11a:	f7f1 fcef 	bl	8000afc <__aeabi_dcmplt>
 800f11e:	2800      	cmp	r0, #0
 800f120:	d050      	beq.n	800f1c4 <_dtoa_r+0x244>
 800f122:	9b00      	ldr	r3, [sp, #0]
 800f124:	3b01      	subs	r3, #1
 800f126:	9300      	str	r3, [sp, #0]
 800f128:	2300      	movs	r3, #0
 800f12a:	930b      	str	r3, [sp, #44]	; 0x2c
 800f12c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f12e:	1b5d      	subs	r5, r3, r5
 800f130:	1e6b      	subs	r3, r5, #1
 800f132:	9305      	str	r3, [sp, #20]
 800f134:	bf45      	ittet	mi
 800f136:	f1c5 0301 	rsbmi	r3, r5, #1
 800f13a:	9304      	strmi	r3, [sp, #16]
 800f13c:	2300      	movpl	r3, #0
 800f13e:	2300      	movmi	r3, #0
 800f140:	bf4c      	ite	mi
 800f142:	9305      	strmi	r3, [sp, #20]
 800f144:	9304      	strpl	r3, [sp, #16]
 800f146:	9b00      	ldr	r3, [sp, #0]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	db3d      	blt.n	800f1c8 <_dtoa_r+0x248>
 800f14c:	9b05      	ldr	r3, [sp, #20]
 800f14e:	9a00      	ldr	r2, [sp, #0]
 800f150:	920a      	str	r2, [sp, #40]	; 0x28
 800f152:	4413      	add	r3, r2
 800f154:	9305      	str	r3, [sp, #20]
 800f156:	2300      	movs	r3, #0
 800f158:	9307      	str	r3, [sp, #28]
 800f15a:	9b06      	ldr	r3, [sp, #24]
 800f15c:	2b09      	cmp	r3, #9
 800f15e:	f200 8089 	bhi.w	800f274 <_dtoa_r+0x2f4>
 800f162:	2b05      	cmp	r3, #5
 800f164:	bfc4      	itt	gt
 800f166:	3b04      	subgt	r3, #4
 800f168:	9306      	strgt	r3, [sp, #24]
 800f16a:	9b06      	ldr	r3, [sp, #24]
 800f16c:	f1a3 0302 	sub.w	r3, r3, #2
 800f170:	bfcc      	ite	gt
 800f172:	2500      	movgt	r5, #0
 800f174:	2501      	movle	r5, #1
 800f176:	2b03      	cmp	r3, #3
 800f178:	f200 8087 	bhi.w	800f28a <_dtoa_r+0x30a>
 800f17c:	e8df f003 	tbb	[pc, r3]
 800f180:	59383a2d 	.word	0x59383a2d
 800f184:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f188:	441d      	add	r5, r3
 800f18a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f18e:	2b20      	cmp	r3, #32
 800f190:	bfc1      	itttt	gt
 800f192:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f196:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800f19a:	fa0b f303 	lslgt.w	r3, fp, r3
 800f19e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800f1a2:	bfda      	itte	le
 800f1a4:	f1c3 0320 	rsble	r3, r3, #32
 800f1a8:	fa06 f003 	lslle.w	r0, r6, r3
 800f1ac:	4318      	orrgt	r0, r3
 800f1ae:	f7f1 f9b9 	bl	8000524 <__aeabi_ui2d>
 800f1b2:	2301      	movs	r3, #1
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800f1ba:	3d01      	subs	r5, #1
 800f1bc:	930e      	str	r3, [sp, #56]	; 0x38
 800f1be:	e76a      	b.n	800f096 <_dtoa_r+0x116>
 800f1c0:	2301      	movs	r3, #1
 800f1c2:	e7b2      	b.n	800f12a <_dtoa_r+0x1aa>
 800f1c4:	900b      	str	r0, [sp, #44]	; 0x2c
 800f1c6:	e7b1      	b.n	800f12c <_dtoa_r+0x1ac>
 800f1c8:	9b04      	ldr	r3, [sp, #16]
 800f1ca:	9a00      	ldr	r2, [sp, #0]
 800f1cc:	1a9b      	subs	r3, r3, r2
 800f1ce:	9304      	str	r3, [sp, #16]
 800f1d0:	4253      	negs	r3, r2
 800f1d2:	9307      	str	r3, [sp, #28]
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	930a      	str	r3, [sp, #40]	; 0x28
 800f1d8:	e7bf      	b.n	800f15a <_dtoa_r+0x1da>
 800f1da:	2300      	movs	r3, #0
 800f1dc:	9308      	str	r3, [sp, #32]
 800f1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	dc55      	bgt.n	800f290 <_dtoa_r+0x310>
 800f1e4:	2301      	movs	r3, #1
 800f1e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f1ea:	461a      	mov	r2, r3
 800f1ec:	9209      	str	r2, [sp, #36]	; 0x24
 800f1ee:	e00c      	b.n	800f20a <_dtoa_r+0x28a>
 800f1f0:	2301      	movs	r3, #1
 800f1f2:	e7f3      	b.n	800f1dc <_dtoa_r+0x25c>
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f1f8:	9308      	str	r3, [sp, #32]
 800f1fa:	9b00      	ldr	r3, [sp, #0]
 800f1fc:	4413      	add	r3, r2
 800f1fe:	9302      	str	r3, [sp, #8]
 800f200:	3301      	adds	r3, #1
 800f202:	2b01      	cmp	r3, #1
 800f204:	9303      	str	r3, [sp, #12]
 800f206:	bfb8      	it	lt
 800f208:	2301      	movlt	r3, #1
 800f20a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800f20c:	2200      	movs	r2, #0
 800f20e:	6042      	str	r2, [r0, #4]
 800f210:	2204      	movs	r2, #4
 800f212:	f102 0614 	add.w	r6, r2, #20
 800f216:	429e      	cmp	r6, r3
 800f218:	6841      	ldr	r1, [r0, #4]
 800f21a:	d93d      	bls.n	800f298 <_dtoa_r+0x318>
 800f21c:	4620      	mov	r0, r4
 800f21e:	f000 feff 	bl	8010020 <_Balloc>
 800f222:	9001      	str	r0, [sp, #4]
 800f224:	2800      	cmp	r0, #0
 800f226:	d13b      	bne.n	800f2a0 <_dtoa_r+0x320>
 800f228:	4b11      	ldr	r3, [pc, #68]	; (800f270 <_dtoa_r+0x2f0>)
 800f22a:	4602      	mov	r2, r0
 800f22c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f230:	e6c0      	b.n	800efb4 <_dtoa_r+0x34>
 800f232:	2301      	movs	r3, #1
 800f234:	e7df      	b.n	800f1f6 <_dtoa_r+0x276>
 800f236:	bf00      	nop
 800f238:	636f4361 	.word	0x636f4361
 800f23c:	3fd287a7 	.word	0x3fd287a7
 800f240:	8b60c8b3 	.word	0x8b60c8b3
 800f244:	3fc68a28 	.word	0x3fc68a28
 800f248:	509f79fb 	.word	0x509f79fb
 800f24c:	3fd34413 	.word	0x3fd34413
 800f250:	08012b22 	.word	0x08012b22
 800f254:	08012bdf 	.word	0x08012bdf
 800f258:	7ff00000 	.word	0x7ff00000
 800f25c:	08012bdb 	.word	0x08012bdb
 800f260:	08012bd2 	.word	0x08012bd2
 800f264:	08012e2a 	.word	0x08012e2a
 800f268:	3ff80000 	.word	0x3ff80000
 800f26c:	08012d40 	.word	0x08012d40
 800f270:	08012c3a 	.word	0x08012c3a
 800f274:	2501      	movs	r5, #1
 800f276:	2300      	movs	r3, #0
 800f278:	9306      	str	r3, [sp, #24]
 800f27a:	9508      	str	r5, [sp, #32]
 800f27c:	f04f 33ff 	mov.w	r3, #4294967295
 800f280:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f284:	2200      	movs	r2, #0
 800f286:	2312      	movs	r3, #18
 800f288:	e7b0      	b.n	800f1ec <_dtoa_r+0x26c>
 800f28a:	2301      	movs	r3, #1
 800f28c:	9308      	str	r3, [sp, #32]
 800f28e:	e7f5      	b.n	800f27c <_dtoa_r+0x2fc>
 800f290:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f292:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800f296:	e7b8      	b.n	800f20a <_dtoa_r+0x28a>
 800f298:	3101      	adds	r1, #1
 800f29a:	6041      	str	r1, [r0, #4]
 800f29c:	0052      	lsls	r2, r2, #1
 800f29e:	e7b8      	b.n	800f212 <_dtoa_r+0x292>
 800f2a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f2a2:	9a01      	ldr	r2, [sp, #4]
 800f2a4:	601a      	str	r2, [r3, #0]
 800f2a6:	9b03      	ldr	r3, [sp, #12]
 800f2a8:	2b0e      	cmp	r3, #14
 800f2aa:	f200 809d 	bhi.w	800f3e8 <_dtoa_r+0x468>
 800f2ae:	2d00      	cmp	r5, #0
 800f2b0:	f000 809a 	beq.w	800f3e8 <_dtoa_r+0x468>
 800f2b4:	9b00      	ldr	r3, [sp, #0]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	dd32      	ble.n	800f320 <_dtoa_r+0x3a0>
 800f2ba:	4ab7      	ldr	r2, [pc, #732]	; (800f598 <_dtoa_r+0x618>)
 800f2bc:	f003 030f 	and.w	r3, r3, #15
 800f2c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f2c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2c8:	9b00      	ldr	r3, [sp, #0]
 800f2ca:	05d8      	lsls	r0, r3, #23
 800f2cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800f2d0:	d516      	bpl.n	800f300 <_dtoa_r+0x380>
 800f2d2:	4bb2      	ldr	r3, [pc, #712]	; (800f59c <_dtoa_r+0x61c>)
 800f2d4:	ec51 0b19 	vmov	r0, r1, d9
 800f2d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f2dc:	f7f1 fac6 	bl	800086c <__aeabi_ddiv>
 800f2e0:	f007 070f 	and.w	r7, r7, #15
 800f2e4:	4682      	mov	sl, r0
 800f2e6:	468b      	mov	fp, r1
 800f2e8:	2503      	movs	r5, #3
 800f2ea:	4eac      	ldr	r6, [pc, #688]	; (800f59c <_dtoa_r+0x61c>)
 800f2ec:	b957      	cbnz	r7, 800f304 <_dtoa_r+0x384>
 800f2ee:	4642      	mov	r2, r8
 800f2f0:	464b      	mov	r3, r9
 800f2f2:	4650      	mov	r0, sl
 800f2f4:	4659      	mov	r1, fp
 800f2f6:	f7f1 fab9 	bl	800086c <__aeabi_ddiv>
 800f2fa:	4682      	mov	sl, r0
 800f2fc:	468b      	mov	fp, r1
 800f2fe:	e028      	b.n	800f352 <_dtoa_r+0x3d2>
 800f300:	2502      	movs	r5, #2
 800f302:	e7f2      	b.n	800f2ea <_dtoa_r+0x36a>
 800f304:	07f9      	lsls	r1, r7, #31
 800f306:	d508      	bpl.n	800f31a <_dtoa_r+0x39a>
 800f308:	4640      	mov	r0, r8
 800f30a:	4649      	mov	r1, r9
 800f30c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f310:	f7f1 f982 	bl	8000618 <__aeabi_dmul>
 800f314:	3501      	adds	r5, #1
 800f316:	4680      	mov	r8, r0
 800f318:	4689      	mov	r9, r1
 800f31a:	107f      	asrs	r7, r7, #1
 800f31c:	3608      	adds	r6, #8
 800f31e:	e7e5      	b.n	800f2ec <_dtoa_r+0x36c>
 800f320:	f000 809b 	beq.w	800f45a <_dtoa_r+0x4da>
 800f324:	9b00      	ldr	r3, [sp, #0]
 800f326:	4f9d      	ldr	r7, [pc, #628]	; (800f59c <_dtoa_r+0x61c>)
 800f328:	425e      	negs	r6, r3
 800f32a:	4b9b      	ldr	r3, [pc, #620]	; (800f598 <_dtoa_r+0x618>)
 800f32c:	f006 020f 	and.w	r2, r6, #15
 800f330:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f338:	ec51 0b19 	vmov	r0, r1, d9
 800f33c:	f7f1 f96c 	bl	8000618 <__aeabi_dmul>
 800f340:	1136      	asrs	r6, r6, #4
 800f342:	4682      	mov	sl, r0
 800f344:	468b      	mov	fp, r1
 800f346:	2300      	movs	r3, #0
 800f348:	2502      	movs	r5, #2
 800f34a:	2e00      	cmp	r6, #0
 800f34c:	d17a      	bne.n	800f444 <_dtoa_r+0x4c4>
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1d3      	bne.n	800f2fa <_dtoa_r+0x37a>
 800f352:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f354:	2b00      	cmp	r3, #0
 800f356:	f000 8082 	beq.w	800f45e <_dtoa_r+0x4de>
 800f35a:	4b91      	ldr	r3, [pc, #580]	; (800f5a0 <_dtoa_r+0x620>)
 800f35c:	2200      	movs	r2, #0
 800f35e:	4650      	mov	r0, sl
 800f360:	4659      	mov	r1, fp
 800f362:	f7f1 fbcb 	bl	8000afc <__aeabi_dcmplt>
 800f366:	2800      	cmp	r0, #0
 800f368:	d079      	beq.n	800f45e <_dtoa_r+0x4de>
 800f36a:	9b03      	ldr	r3, [sp, #12]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d076      	beq.n	800f45e <_dtoa_r+0x4de>
 800f370:	9b02      	ldr	r3, [sp, #8]
 800f372:	2b00      	cmp	r3, #0
 800f374:	dd36      	ble.n	800f3e4 <_dtoa_r+0x464>
 800f376:	9b00      	ldr	r3, [sp, #0]
 800f378:	4650      	mov	r0, sl
 800f37a:	4659      	mov	r1, fp
 800f37c:	1e5f      	subs	r7, r3, #1
 800f37e:	2200      	movs	r2, #0
 800f380:	4b88      	ldr	r3, [pc, #544]	; (800f5a4 <_dtoa_r+0x624>)
 800f382:	f7f1 f949 	bl	8000618 <__aeabi_dmul>
 800f386:	9e02      	ldr	r6, [sp, #8]
 800f388:	4682      	mov	sl, r0
 800f38a:	468b      	mov	fp, r1
 800f38c:	3501      	adds	r5, #1
 800f38e:	4628      	mov	r0, r5
 800f390:	f7f1 f8d8 	bl	8000544 <__aeabi_i2d>
 800f394:	4652      	mov	r2, sl
 800f396:	465b      	mov	r3, fp
 800f398:	f7f1 f93e 	bl	8000618 <__aeabi_dmul>
 800f39c:	4b82      	ldr	r3, [pc, #520]	; (800f5a8 <_dtoa_r+0x628>)
 800f39e:	2200      	movs	r2, #0
 800f3a0:	f7f0 ff84 	bl	80002ac <__adddf3>
 800f3a4:	46d0      	mov	r8, sl
 800f3a6:	46d9      	mov	r9, fp
 800f3a8:	4682      	mov	sl, r0
 800f3aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800f3ae:	2e00      	cmp	r6, #0
 800f3b0:	d158      	bne.n	800f464 <_dtoa_r+0x4e4>
 800f3b2:	4b7e      	ldr	r3, [pc, #504]	; (800f5ac <_dtoa_r+0x62c>)
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	4640      	mov	r0, r8
 800f3b8:	4649      	mov	r1, r9
 800f3ba:	f7f0 ff75 	bl	80002a8 <__aeabi_dsub>
 800f3be:	4652      	mov	r2, sl
 800f3c0:	465b      	mov	r3, fp
 800f3c2:	4680      	mov	r8, r0
 800f3c4:	4689      	mov	r9, r1
 800f3c6:	f7f1 fbb7 	bl	8000b38 <__aeabi_dcmpgt>
 800f3ca:	2800      	cmp	r0, #0
 800f3cc:	f040 8295 	bne.w	800f8fa <_dtoa_r+0x97a>
 800f3d0:	4652      	mov	r2, sl
 800f3d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f3d6:	4640      	mov	r0, r8
 800f3d8:	4649      	mov	r1, r9
 800f3da:	f7f1 fb8f 	bl	8000afc <__aeabi_dcmplt>
 800f3de:	2800      	cmp	r0, #0
 800f3e0:	f040 8289 	bne.w	800f8f6 <_dtoa_r+0x976>
 800f3e4:	ec5b ab19 	vmov	sl, fp, d9
 800f3e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	f2c0 8148 	blt.w	800f680 <_dtoa_r+0x700>
 800f3f0:	9a00      	ldr	r2, [sp, #0]
 800f3f2:	2a0e      	cmp	r2, #14
 800f3f4:	f300 8144 	bgt.w	800f680 <_dtoa_r+0x700>
 800f3f8:	4b67      	ldr	r3, [pc, #412]	; (800f598 <_dtoa_r+0x618>)
 800f3fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f3fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f402:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f404:	2b00      	cmp	r3, #0
 800f406:	f280 80d5 	bge.w	800f5b4 <_dtoa_r+0x634>
 800f40a:	9b03      	ldr	r3, [sp, #12]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	f300 80d1 	bgt.w	800f5b4 <_dtoa_r+0x634>
 800f412:	f040 826f 	bne.w	800f8f4 <_dtoa_r+0x974>
 800f416:	4b65      	ldr	r3, [pc, #404]	; (800f5ac <_dtoa_r+0x62c>)
 800f418:	2200      	movs	r2, #0
 800f41a:	4640      	mov	r0, r8
 800f41c:	4649      	mov	r1, r9
 800f41e:	f7f1 f8fb 	bl	8000618 <__aeabi_dmul>
 800f422:	4652      	mov	r2, sl
 800f424:	465b      	mov	r3, fp
 800f426:	f7f1 fb7d 	bl	8000b24 <__aeabi_dcmpge>
 800f42a:	9e03      	ldr	r6, [sp, #12]
 800f42c:	4637      	mov	r7, r6
 800f42e:	2800      	cmp	r0, #0
 800f430:	f040 8245 	bne.w	800f8be <_dtoa_r+0x93e>
 800f434:	9d01      	ldr	r5, [sp, #4]
 800f436:	2331      	movs	r3, #49	; 0x31
 800f438:	f805 3b01 	strb.w	r3, [r5], #1
 800f43c:	9b00      	ldr	r3, [sp, #0]
 800f43e:	3301      	adds	r3, #1
 800f440:	9300      	str	r3, [sp, #0]
 800f442:	e240      	b.n	800f8c6 <_dtoa_r+0x946>
 800f444:	07f2      	lsls	r2, r6, #31
 800f446:	d505      	bpl.n	800f454 <_dtoa_r+0x4d4>
 800f448:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f44c:	f7f1 f8e4 	bl	8000618 <__aeabi_dmul>
 800f450:	3501      	adds	r5, #1
 800f452:	2301      	movs	r3, #1
 800f454:	1076      	asrs	r6, r6, #1
 800f456:	3708      	adds	r7, #8
 800f458:	e777      	b.n	800f34a <_dtoa_r+0x3ca>
 800f45a:	2502      	movs	r5, #2
 800f45c:	e779      	b.n	800f352 <_dtoa_r+0x3d2>
 800f45e:	9f00      	ldr	r7, [sp, #0]
 800f460:	9e03      	ldr	r6, [sp, #12]
 800f462:	e794      	b.n	800f38e <_dtoa_r+0x40e>
 800f464:	9901      	ldr	r1, [sp, #4]
 800f466:	4b4c      	ldr	r3, [pc, #304]	; (800f598 <_dtoa_r+0x618>)
 800f468:	4431      	add	r1, r6
 800f46a:	910d      	str	r1, [sp, #52]	; 0x34
 800f46c:	9908      	ldr	r1, [sp, #32]
 800f46e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f472:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f476:	2900      	cmp	r1, #0
 800f478:	d043      	beq.n	800f502 <_dtoa_r+0x582>
 800f47a:	494d      	ldr	r1, [pc, #308]	; (800f5b0 <_dtoa_r+0x630>)
 800f47c:	2000      	movs	r0, #0
 800f47e:	f7f1 f9f5 	bl	800086c <__aeabi_ddiv>
 800f482:	4652      	mov	r2, sl
 800f484:	465b      	mov	r3, fp
 800f486:	f7f0 ff0f 	bl	80002a8 <__aeabi_dsub>
 800f48a:	9d01      	ldr	r5, [sp, #4]
 800f48c:	4682      	mov	sl, r0
 800f48e:	468b      	mov	fp, r1
 800f490:	4649      	mov	r1, r9
 800f492:	4640      	mov	r0, r8
 800f494:	f7f1 fb70 	bl	8000b78 <__aeabi_d2iz>
 800f498:	4606      	mov	r6, r0
 800f49a:	f7f1 f853 	bl	8000544 <__aeabi_i2d>
 800f49e:	4602      	mov	r2, r0
 800f4a0:	460b      	mov	r3, r1
 800f4a2:	4640      	mov	r0, r8
 800f4a4:	4649      	mov	r1, r9
 800f4a6:	f7f0 feff 	bl	80002a8 <__aeabi_dsub>
 800f4aa:	3630      	adds	r6, #48	; 0x30
 800f4ac:	f805 6b01 	strb.w	r6, [r5], #1
 800f4b0:	4652      	mov	r2, sl
 800f4b2:	465b      	mov	r3, fp
 800f4b4:	4680      	mov	r8, r0
 800f4b6:	4689      	mov	r9, r1
 800f4b8:	f7f1 fb20 	bl	8000afc <__aeabi_dcmplt>
 800f4bc:	2800      	cmp	r0, #0
 800f4be:	d163      	bne.n	800f588 <_dtoa_r+0x608>
 800f4c0:	4642      	mov	r2, r8
 800f4c2:	464b      	mov	r3, r9
 800f4c4:	4936      	ldr	r1, [pc, #216]	; (800f5a0 <_dtoa_r+0x620>)
 800f4c6:	2000      	movs	r0, #0
 800f4c8:	f7f0 feee 	bl	80002a8 <__aeabi_dsub>
 800f4cc:	4652      	mov	r2, sl
 800f4ce:	465b      	mov	r3, fp
 800f4d0:	f7f1 fb14 	bl	8000afc <__aeabi_dcmplt>
 800f4d4:	2800      	cmp	r0, #0
 800f4d6:	f040 80b5 	bne.w	800f644 <_dtoa_r+0x6c4>
 800f4da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f4dc:	429d      	cmp	r5, r3
 800f4de:	d081      	beq.n	800f3e4 <_dtoa_r+0x464>
 800f4e0:	4b30      	ldr	r3, [pc, #192]	; (800f5a4 <_dtoa_r+0x624>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	4650      	mov	r0, sl
 800f4e6:	4659      	mov	r1, fp
 800f4e8:	f7f1 f896 	bl	8000618 <__aeabi_dmul>
 800f4ec:	4b2d      	ldr	r3, [pc, #180]	; (800f5a4 <_dtoa_r+0x624>)
 800f4ee:	4682      	mov	sl, r0
 800f4f0:	468b      	mov	fp, r1
 800f4f2:	4640      	mov	r0, r8
 800f4f4:	4649      	mov	r1, r9
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f7f1 f88e 	bl	8000618 <__aeabi_dmul>
 800f4fc:	4680      	mov	r8, r0
 800f4fe:	4689      	mov	r9, r1
 800f500:	e7c6      	b.n	800f490 <_dtoa_r+0x510>
 800f502:	4650      	mov	r0, sl
 800f504:	4659      	mov	r1, fp
 800f506:	f7f1 f887 	bl	8000618 <__aeabi_dmul>
 800f50a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f50c:	9d01      	ldr	r5, [sp, #4]
 800f50e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f510:	4682      	mov	sl, r0
 800f512:	468b      	mov	fp, r1
 800f514:	4649      	mov	r1, r9
 800f516:	4640      	mov	r0, r8
 800f518:	f7f1 fb2e 	bl	8000b78 <__aeabi_d2iz>
 800f51c:	4606      	mov	r6, r0
 800f51e:	f7f1 f811 	bl	8000544 <__aeabi_i2d>
 800f522:	3630      	adds	r6, #48	; 0x30
 800f524:	4602      	mov	r2, r0
 800f526:	460b      	mov	r3, r1
 800f528:	4640      	mov	r0, r8
 800f52a:	4649      	mov	r1, r9
 800f52c:	f7f0 febc 	bl	80002a8 <__aeabi_dsub>
 800f530:	f805 6b01 	strb.w	r6, [r5], #1
 800f534:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f536:	429d      	cmp	r5, r3
 800f538:	4680      	mov	r8, r0
 800f53a:	4689      	mov	r9, r1
 800f53c:	f04f 0200 	mov.w	r2, #0
 800f540:	d124      	bne.n	800f58c <_dtoa_r+0x60c>
 800f542:	4b1b      	ldr	r3, [pc, #108]	; (800f5b0 <_dtoa_r+0x630>)
 800f544:	4650      	mov	r0, sl
 800f546:	4659      	mov	r1, fp
 800f548:	f7f0 feb0 	bl	80002ac <__adddf3>
 800f54c:	4602      	mov	r2, r0
 800f54e:	460b      	mov	r3, r1
 800f550:	4640      	mov	r0, r8
 800f552:	4649      	mov	r1, r9
 800f554:	f7f1 faf0 	bl	8000b38 <__aeabi_dcmpgt>
 800f558:	2800      	cmp	r0, #0
 800f55a:	d173      	bne.n	800f644 <_dtoa_r+0x6c4>
 800f55c:	4652      	mov	r2, sl
 800f55e:	465b      	mov	r3, fp
 800f560:	4913      	ldr	r1, [pc, #76]	; (800f5b0 <_dtoa_r+0x630>)
 800f562:	2000      	movs	r0, #0
 800f564:	f7f0 fea0 	bl	80002a8 <__aeabi_dsub>
 800f568:	4602      	mov	r2, r0
 800f56a:	460b      	mov	r3, r1
 800f56c:	4640      	mov	r0, r8
 800f56e:	4649      	mov	r1, r9
 800f570:	f7f1 fac4 	bl	8000afc <__aeabi_dcmplt>
 800f574:	2800      	cmp	r0, #0
 800f576:	f43f af35 	beq.w	800f3e4 <_dtoa_r+0x464>
 800f57a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f57c:	1e6b      	subs	r3, r5, #1
 800f57e:	930f      	str	r3, [sp, #60]	; 0x3c
 800f580:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f584:	2b30      	cmp	r3, #48	; 0x30
 800f586:	d0f8      	beq.n	800f57a <_dtoa_r+0x5fa>
 800f588:	9700      	str	r7, [sp, #0]
 800f58a:	e049      	b.n	800f620 <_dtoa_r+0x6a0>
 800f58c:	4b05      	ldr	r3, [pc, #20]	; (800f5a4 <_dtoa_r+0x624>)
 800f58e:	f7f1 f843 	bl	8000618 <__aeabi_dmul>
 800f592:	4680      	mov	r8, r0
 800f594:	4689      	mov	r9, r1
 800f596:	e7bd      	b.n	800f514 <_dtoa_r+0x594>
 800f598:	08012d40 	.word	0x08012d40
 800f59c:	08012d18 	.word	0x08012d18
 800f5a0:	3ff00000 	.word	0x3ff00000
 800f5a4:	40240000 	.word	0x40240000
 800f5a8:	401c0000 	.word	0x401c0000
 800f5ac:	40140000 	.word	0x40140000
 800f5b0:	3fe00000 	.word	0x3fe00000
 800f5b4:	9d01      	ldr	r5, [sp, #4]
 800f5b6:	4656      	mov	r6, sl
 800f5b8:	465f      	mov	r7, fp
 800f5ba:	4642      	mov	r2, r8
 800f5bc:	464b      	mov	r3, r9
 800f5be:	4630      	mov	r0, r6
 800f5c0:	4639      	mov	r1, r7
 800f5c2:	f7f1 f953 	bl	800086c <__aeabi_ddiv>
 800f5c6:	f7f1 fad7 	bl	8000b78 <__aeabi_d2iz>
 800f5ca:	4682      	mov	sl, r0
 800f5cc:	f7f0 ffba 	bl	8000544 <__aeabi_i2d>
 800f5d0:	4642      	mov	r2, r8
 800f5d2:	464b      	mov	r3, r9
 800f5d4:	f7f1 f820 	bl	8000618 <__aeabi_dmul>
 800f5d8:	4602      	mov	r2, r0
 800f5da:	460b      	mov	r3, r1
 800f5dc:	4630      	mov	r0, r6
 800f5de:	4639      	mov	r1, r7
 800f5e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800f5e4:	f7f0 fe60 	bl	80002a8 <__aeabi_dsub>
 800f5e8:	f805 6b01 	strb.w	r6, [r5], #1
 800f5ec:	9e01      	ldr	r6, [sp, #4]
 800f5ee:	9f03      	ldr	r7, [sp, #12]
 800f5f0:	1bae      	subs	r6, r5, r6
 800f5f2:	42b7      	cmp	r7, r6
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	d135      	bne.n	800f666 <_dtoa_r+0x6e6>
 800f5fa:	f7f0 fe57 	bl	80002ac <__adddf3>
 800f5fe:	4642      	mov	r2, r8
 800f600:	464b      	mov	r3, r9
 800f602:	4606      	mov	r6, r0
 800f604:	460f      	mov	r7, r1
 800f606:	f7f1 fa97 	bl	8000b38 <__aeabi_dcmpgt>
 800f60a:	b9d0      	cbnz	r0, 800f642 <_dtoa_r+0x6c2>
 800f60c:	4642      	mov	r2, r8
 800f60e:	464b      	mov	r3, r9
 800f610:	4630      	mov	r0, r6
 800f612:	4639      	mov	r1, r7
 800f614:	f7f1 fa68 	bl	8000ae8 <__aeabi_dcmpeq>
 800f618:	b110      	cbz	r0, 800f620 <_dtoa_r+0x6a0>
 800f61a:	f01a 0f01 	tst.w	sl, #1
 800f61e:	d110      	bne.n	800f642 <_dtoa_r+0x6c2>
 800f620:	4620      	mov	r0, r4
 800f622:	ee18 1a10 	vmov	r1, s16
 800f626:	f000 fd3b 	bl	80100a0 <_Bfree>
 800f62a:	2300      	movs	r3, #0
 800f62c:	9800      	ldr	r0, [sp, #0]
 800f62e:	702b      	strb	r3, [r5, #0]
 800f630:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f632:	3001      	adds	r0, #1
 800f634:	6018      	str	r0, [r3, #0]
 800f636:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f638:	2b00      	cmp	r3, #0
 800f63a:	f43f acf1 	beq.w	800f020 <_dtoa_r+0xa0>
 800f63e:	601d      	str	r5, [r3, #0]
 800f640:	e4ee      	b.n	800f020 <_dtoa_r+0xa0>
 800f642:	9f00      	ldr	r7, [sp, #0]
 800f644:	462b      	mov	r3, r5
 800f646:	461d      	mov	r5, r3
 800f648:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f64c:	2a39      	cmp	r2, #57	; 0x39
 800f64e:	d106      	bne.n	800f65e <_dtoa_r+0x6de>
 800f650:	9a01      	ldr	r2, [sp, #4]
 800f652:	429a      	cmp	r2, r3
 800f654:	d1f7      	bne.n	800f646 <_dtoa_r+0x6c6>
 800f656:	9901      	ldr	r1, [sp, #4]
 800f658:	2230      	movs	r2, #48	; 0x30
 800f65a:	3701      	adds	r7, #1
 800f65c:	700a      	strb	r2, [r1, #0]
 800f65e:	781a      	ldrb	r2, [r3, #0]
 800f660:	3201      	adds	r2, #1
 800f662:	701a      	strb	r2, [r3, #0]
 800f664:	e790      	b.n	800f588 <_dtoa_r+0x608>
 800f666:	4ba6      	ldr	r3, [pc, #664]	; (800f900 <_dtoa_r+0x980>)
 800f668:	2200      	movs	r2, #0
 800f66a:	f7f0 ffd5 	bl	8000618 <__aeabi_dmul>
 800f66e:	2200      	movs	r2, #0
 800f670:	2300      	movs	r3, #0
 800f672:	4606      	mov	r6, r0
 800f674:	460f      	mov	r7, r1
 800f676:	f7f1 fa37 	bl	8000ae8 <__aeabi_dcmpeq>
 800f67a:	2800      	cmp	r0, #0
 800f67c:	d09d      	beq.n	800f5ba <_dtoa_r+0x63a>
 800f67e:	e7cf      	b.n	800f620 <_dtoa_r+0x6a0>
 800f680:	9a08      	ldr	r2, [sp, #32]
 800f682:	2a00      	cmp	r2, #0
 800f684:	f000 80d7 	beq.w	800f836 <_dtoa_r+0x8b6>
 800f688:	9a06      	ldr	r2, [sp, #24]
 800f68a:	2a01      	cmp	r2, #1
 800f68c:	f300 80ba 	bgt.w	800f804 <_dtoa_r+0x884>
 800f690:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f692:	2a00      	cmp	r2, #0
 800f694:	f000 80b2 	beq.w	800f7fc <_dtoa_r+0x87c>
 800f698:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f69c:	9e07      	ldr	r6, [sp, #28]
 800f69e:	9d04      	ldr	r5, [sp, #16]
 800f6a0:	9a04      	ldr	r2, [sp, #16]
 800f6a2:	441a      	add	r2, r3
 800f6a4:	9204      	str	r2, [sp, #16]
 800f6a6:	9a05      	ldr	r2, [sp, #20]
 800f6a8:	2101      	movs	r1, #1
 800f6aa:	441a      	add	r2, r3
 800f6ac:	4620      	mov	r0, r4
 800f6ae:	9205      	str	r2, [sp, #20]
 800f6b0:	f000 fdae 	bl	8010210 <__i2b>
 800f6b4:	4607      	mov	r7, r0
 800f6b6:	2d00      	cmp	r5, #0
 800f6b8:	dd0c      	ble.n	800f6d4 <_dtoa_r+0x754>
 800f6ba:	9b05      	ldr	r3, [sp, #20]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	dd09      	ble.n	800f6d4 <_dtoa_r+0x754>
 800f6c0:	42ab      	cmp	r3, r5
 800f6c2:	9a04      	ldr	r2, [sp, #16]
 800f6c4:	bfa8      	it	ge
 800f6c6:	462b      	movge	r3, r5
 800f6c8:	1ad2      	subs	r2, r2, r3
 800f6ca:	9204      	str	r2, [sp, #16]
 800f6cc:	9a05      	ldr	r2, [sp, #20]
 800f6ce:	1aed      	subs	r5, r5, r3
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	9305      	str	r3, [sp, #20]
 800f6d4:	9b07      	ldr	r3, [sp, #28]
 800f6d6:	b31b      	cbz	r3, 800f720 <_dtoa_r+0x7a0>
 800f6d8:	9b08      	ldr	r3, [sp, #32]
 800f6da:	2b00      	cmp	r3, #0
 800f6dc:	f000 80af 	beq.w	800f83e <_dtoa_r+0x8be>
 800f6e0:	2e00      	cmp	r6, #0
 800f6e2:	dd13      	ble.n	800f70c <_dtoa_r+0x78c>
 800f6e4:	4639      	mov	r1, r7
 800f6e6:	4632      	mov	r2, r6
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	f000 fe51 	bl	8010390 <__pow5mult>
 800f6ee:	ee18 2a10 	vmov	r2, s16
 800f6f2:	4601      	mov	r1, r0
 800f6f4:	4607      	mov	r7, r0
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	f000 fda0 	bl	801023c <__multiply>
 800f6fc:	ee18 1a10 	vmov	r1, s16
 800f700:	4680      	mov	r8, r0
 800f702:	4620      	mov	r0, r4
 800f704:	f000 fccc 	bl	80100a0 <_Bfree>
 800f708:	ee08 8a10 	vmov	s16, r8
 800f70c:	9b07      	ldr	r3, [sp, #28]
 800f70e:	1b9a      	subs	r2, r3, r6
 800f710:	d006      	beq.n	800f720 <_dtoa_r+0x7a0>
 800f712:	ee18 1a10 	vmov	r1, s16
 800f716:	4620      	mov	r0, r4
 800f718:	f000 fe3a 	bl	8010390 <__pow5mult>
 800f71c:	ee08 0a10 	vmov	s16, r0
 800f720:	2101      	movs	r1, #1
 800f722:	4620      	mov	r0, r4
 800f724:	f000 fd74 	bl	8010210 <__i2b>
 800f728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	4606      	mov	r6, r0
 800f72e:	f340 8088 	ble.w	800f842 <_dtoa_r+0x8c2>
 800f732:	461a      	mov	r2, r3
 800f734:	4601      	mov	r1, r0
 800f736:	4620      	mov	r0, r4
 800f738:	f000 fe2a 	bl	8010390 <__pow5mult>
 800f73c:	9b06      	ldr	r3, [sp, #24]
 800f73e:	2b01      	cmp	r3, #1
 800f740:	4606      	mov	r6, r0
 800f742:	f340 8081 	ble.w	800f848 <_dtoa_r+0x8c8>
 800f746:	f04f 0800 	mov.w	r8, #0
 800f74a:	6933      	ldr	r3, [r6, #16]
 800f74c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800f750:	6918      	ldr	r0, [r3, #16]
 800f752:	f000 fd0d 	bl	8010170 <__hi0bits>
 800f756:	f1c0 0020 	rsb	r0, r0, #32
 800f75a:	9b05      	ldr	r3, [sp, #20]
 800f75c:	4418      	add	r0, r3
 800f75e:	f010 001f 	ands.w	r0, r0, #31
 800f762:	f000 8092 	beq.w	800f88a <_dtoa_r+0x90a>
 800f766:	f1c0 0320 	rsb	r3, r0, #32
 800f76a:	2b04      	cmp	r3, #4
 800f76c:	f340 808a 	ble.w	800f884 <_dtoa_r+0x904>
 800f770:	f1c0 001c 	rsb	r0, r0, #28
 800f774:	9b04      	ldr	r3, [sp, #16]
 800f776:	4403      	add	r3, r0
 800f778:	9304      	str	r3, [sp, #16]
 800f77a:	9b05      	ldr	r3, [sp, #20]
 800f77c:	4403      	add	r3, r0
 800f77e:	4405      	add	r5, r0
 800f780:	9305      	str	r3, [sp, #20]
 800f782:	9b04      	ldr	r3, [sp, #16]
 800f784:	2b00      	cmp	r3, #0
 800f786:	dd07      	ble.n	800f798 <_dtoa_r+0x818>
 800f788:	ee18 1a10 	vmov	r1, s16
 800f78c:	461a      	mov	r2, r3
 800f78e:	4620      	mov	r0, r4
 800f790:	f000 fe58 	bl	8010444 <__lshift>
 800f794:	ee08 0a10 	vmov	s16, r0
 800f798:	9b05      	ldr	r3, [sp, #20]
 800f79a:	2b00      	cmp	r3, #0
 800f79c:	dd05      	ble.n	800f7aa <_dtoa_r+0x82a>
 800f79e:	4631      	mov	r1, r6
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	4620      	mov	r0, r4
 800f7a4:	f000 fe4e 	bl	8010444 <__lshift>
 800f7a8:	4606      	mov	r6, r0
 800f7aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d06e      	beq.n	800f88e <_dtoa_r+0x90e>
 800f7b0:	ee18 0a10 	vmov	r0, s16
 800f7b4:	4631      	mov	r1, r6
 800f7b6:	f000 feb5 	bl	8010524 <__mcmp>
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	da67      	bge.n	800f88e <_dtoa_r+0x90e>
 800f7be:	9b00      	ldr	r3, [sp, #0]
 800f7c0:	3b01      	subs	r3, #1
 800f7c2:	ee18 1a10 	vmov	r1, s16
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	220a      	movs	r2, #10
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	4620      	mov	r0, r4
 800f7ce:	f000 fc89 	bl	80100e4 <__multadd>
 800f7d2:	9b08      	ldr	r3, [sp, #32]
 800f7d4:	ee08 0a10 	vmov	s16, r0
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f000 81b1 	beq.w	800fb40 <_dtoa_r+0xbc0>
 800f7de:	2300      	movs	r3, #0
 800f7e0:	4639      	mov	r1, r7
 800f7e2:	220a      	movs	r2, #10
 800f7e4:	4620      	mov	r0, r4
 800f7e6:	f000 fc7d 	bl	80100e4 <__multadd>
 800f7ea:	9b02      	ldr	r3, [sp, #8]
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	4607      	mov	r7, r0
 800f7f0:	f300 808e 	bgt.w	800f910 <_dtoa_r+0x990>
 800f7f4:	9b06      	ldr	r3, [sp, #24]
 800f7f6:	2b02      	cmp	r3, #2
 800f7f8:	dc51      	bgt.n	800f89e <_dtoa_r+0x91e>
 800f7fa:	e089      	b.n	800f910 <_dtoa_r+0x990>
 800f7fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f7fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f802:	e74b      	b.n	800f69c <_dtoa_r+0x71c>
 800f804:	9b03      	ldr	r3, [sp, #12]
 800f806:	1e5e      	subs	r6, r3, #1
 800f808:	9b07      	ldr	r3, [sp, #28]
 800f80a:	42b3      	cmp	r3, r6
 800f80c:	bfbf      	itttt	lt
 800f80e:	9b07      	ldrlt	r3, [sp, #28]
 800f810:	9607      	strlt	r6, [sp, #28]
 800f812:	1af2      	sublt	r2, r6, r3
 800f814:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f816:	bfb6      	itet	lt
 800f818:	189b      	addlt	r3, r3, r2
 800f81a:	1b9e      	subge	r6, r3, r6
 800f81c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f81e:	9b03      	ldr	r3, [sp, #12]
 800f820:	bfb8      	it	lt
 800f822:	2600      	movlt	r6, #0
 800f824:	2b00      	cmp	r3, #0
 800f826:	bfb7      	itett	lt
 800f828:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f82c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f830:	1a9d      	sublt	r5, r3, r2
 800f832:	2300      	movlt	r3, #0
 800f834:	e734      	b.n	800f6a0 <_dtoa_r+0x720>
 800f836:	9e07      	ldr	r6, [sp, #28]
 800f838:	9d04      	ldr	r5, [sp, #16]
 800f83a:	9f08      	ldr	r7, [sp, #32]
 800f83c:	e73b      	b.n	800f6b6 <_dtoa_r+0x736>
 800f83e:	9a07      	ldr	r2, [sp, #28]
 800f840:	e767      	b.n	800f712 <_dtoa_r+0x792>
 800f842:	9b06      	ldr	r3, [sp, #24]
 800f844:	2b01      	cmp	r3, #1
 800f846:	dc18      	bgt.n	800f87a <_dtoa_r+0x8fa>
 800f848:	f1ba 0f00 	cmp.w	sl, #0
 800f84c:	d115      	bne.n	800f87a <_dtoa_r+0x8fa>
 800f84e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f852:	b993      	cbnz	r3, 800f87a <_dtoa_r+0x8fa>
 800f854:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f858:	0d1b      	lsrs	r3, r3, #20
 800f85a:	051b      	lsls	r3, r3, #20
 800f85c:	b183      	cbz	r3, 800f880 <_dtoa_r+0x900>
 800f85e:	9b04      	ldr	r3, [sp, #16]
 800f860:	3301      	adds	r3, #1
 800f862:	9304      	str	r3, [sp, #16]
 800f864:	9b05      	ldr	r3, [sp, #20]
 800f866:	3301      	adds	r3, #1
 800f868:	9305      	str	r3, [sp, #20]
 800f86a:	f04f 0801 	mov.w	r8, #1
 800f86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f870:	2b00      	cmp	r3, #0
 800f872:	f47f af6a 	bne.w	800f74a <_dtoa_r+0x7ca>
 800f876:	2001      	movs	r0, #1
 800f878:	e76f      	b.n	800f75a <_dtoa_r+0x7da>
 800f87a:	f04f 0800 	mov.w	r8, #0
 800f87e:	e7f6      	b.n	800f86e <_dtoa_r+0x8ee>
 800f880:	4698      	mov	r8, r3
 800f882:	e7f4      	b.n	800f86e <_dtoa_r+0x8ee>
 800f884:	f43f af7d 	beq.w	800f782 <_dtoa_r+0x802>
 800f888:	4618      	mov	r0, r3
 800f88a:	301c      	adds	r0, #28
 800f88c:	e772      	b.n	800f774 <_dtoa_r+0x7f4>
 800f88e:	9b03      	ldr	r3, [sp, #12]
 800f890:	2b00      	cmp	r3, #0
 800f892:	dc37      	bgt.n	800f904 <_dtoa_r+0x984>
 800f894:	9b06      	ldr	r3, [sp, #24]
 800f896:	2b02      	cmp	r3, #2
 800f898:	dd34      	ble.n	800f904 <_dtoa_r+0x984>
 800f89a:	9b03      	ldr	r3, [sp, #12]
 800f89c:	9302      	str	r3, [sp, #8]
 800f89e:	9b02      	ldr	r3, [sp, #8]
 800f8a0:	b96b      	cbnz	r3, 800f8be <_dtoa_r+0x93e>
 800f8a2:	4631      	mov	r1, r6
 800f8a4:	2205      	movs	r2, #5
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	f000 fc1c 	bl	80100e4 <__multadd>
 800f8ac:	4601      	mov	r1, r0
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	ee18 0a10 	vmov	r0, s16
 800f8b4:	f000 fe36 	bl	8010524 <__mcmp>
 800f8b8:	2800      	cmp	r0, #0
 800f8ba:	f73f adbb 	bgt.w	800f434 <_dtoa_r+0x4b4>
 800f8be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c0:	9d01      	ldr	r5, [sp, #4]
 800f8c2:	43db      	mvns	r3, r3
 800f8c4:	9300      	str	r3, [sp, #0]
 800f8c6:	f04f 0800 	mov.w	r8, #0
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	f000 fbe7 	bl	80100a0 <_Bfree>
 800f8d2:	2f00      	cmp	r7, #0
 800f8d4:	f43f aea4 	beq.w	800f620 <_dtoa_r+0x6a0>
 800f8d8:	f1b8 0f00 	cmp.w	r8, #0
 800f8dc:	d005      	beq.n	800f8ea <_dtoa_r+0x96a>
 800f8de:	45b8      	cmp	r8, r7
 800f8e0:	d003      	beq.n	800f8ea <_dtoa_r+0x96a>
 800f8e2:	4641      	mov	r1, r8
 800f8e4:	4620      	mov	r0, r4
 800f8e6:	f000 fbdb 	bl	80100a0 <_Bfree>
 800f8ea:	4639      	mov	r1, r7
 800f8ec:	4620      	mov	r0, r4
 800f8ee:	f000 fbd7 	bl	80100a0 <_Bfree>
 800f8f2:	e695      	b.n	800f620 <_dtoa_r+0x6a0>
 800f8f4:	2600      	movs	r6, #0
 800f8f6:	4637      	mov	r7, r6
 800f8f8:	e7e1      	b.n	800f8be <_dtoa_r+0x93e>
 800f8fa:	9700      	str	r7, [sp, #0]
 800f8fc:	4637      	mov	r7, r6
 800f8fe:	e599      	b.n	800f434 <_dtoa_r+0x4b4>
 800f900:	40240000 	.word	0x40240000
 800f904:	9b08      	ldr	r3, [sp, #32]
 800f906:	2b00      	cmp	r3, #0
 800f908:	f000 80ca 	beq.w	800faa0 <_dtoa_r+0xb20>
 800f90c:	9b03      	ldr	r3, [sp, #12]
 800f90e:	9302      	str	r3, [sp, #8]
 800f910:	2d00      	cmp	r5, #0
 800f912:	dd05      	ble.n	800f920 <_dtoa_r+0x9a0>
 800f914:	4639      	mov	r1, r7
 800f916:	462a      	mov	r2, r5
 800f918:	4620      	mov	r0, r4
 800f91a:	f000 fd93 	bl	8010444 <__lshift>
 800f91e:	4607      	mov	r7, r0
 800f920:	f1b8 0f00 	cmp.w	r8, #0
 800f924:	d05b      	beq.n	800f9de <_dtoa_r+0xa5e>
 800f926:	6879      	ldr	r1, [r7, #4]
 800f928:	4620      	mov	r0, r4
 800f92a:	f000 fb79 	bl	8010020 <_Balloc>
 800f92e:	4605      	mov	r5, r0
 800f930:	b928      	cbnz	r0, 800f93e <_dtoa_r+0x9be>
 800f932:	4b87      	ldr	r3, [pc, #540]	; (800fb50 <_dtoa_r+0xbd0>)
 800f934:	4602      	mov	r2, r0
 800f936:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f93a:	f7ff bb3b 	b.w	800efb4 <_dtoa_r+0x34>
 800f93e:	693a      	ldr	r2, [r7, #16]
 800f940:	3202      	adds	r2, #2
 800f942:	0092      	lsls	r2, r2, #2
 800f944:	f107 010c 	add.w	r1, r7, #12
 800f948:	300c      	adds	r0, #12
 800f94a:	f7fe f95d 	bl	800dc08 <memcpy>
 800f94e:	2201      	movs	r2, #1
 800f950:	4629      	mov	r1, r5
 800f952:	4620      	mov	r0, r4
 800f954:	f000 fd76 	bl	8010444 <__lshift>
 800f958:	9b01      	ldr	r3, [sp, #4]
 800f95a:	f103 0901 	add.w	r9, r3, #1
 800f95e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f962:	4413      	add	r3, r2
 800f964:	9305      	str	r3, [sp, #20]
 800f966:	f00a 0301 	and.w	r3, sl, #1
 800f96a:	46b8      	mov	r8, r7
 800f96c:	9304      	str	r3, [sp, #16]
 800f96e:	4607      	mov	r7, r0
 800f970:	4631      	mov	r1, r6
 800f972:	ee18 0a10 	vmov	r0, s16
 800f976:	f7ff fa77 	bl	800ee68 <quorem>
 800f97a:	4641      	mov	r1, r8
 800f97c:	9002      	str	r0, [sp, #8]
 800f97e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f982:	ee18 0a10 	vmov	r0, s16
 800f986:	f000 fdcd 	bl	8010524 <__mcmp>
 800f98a:	463a      	mov	r2, r7
 800f98c:	9003      	str	r0, [sp, #12]
 800f98e:	4631      	mov	r1, r6
 800f990:	4620      	mov	r0, r4
 800f992:	f000 fde3 	bl	801055c <__mdiff>
 800f996:	68c2      	ldr	r2, [r0, #12]
 800f998:	f109 3bff 	add.w	fp, r9, #4294967295
 800f99c:	4605      	mov	r5, r0
 800f99e:	bb02      	cbnz	r2, 800f9e2 <_dtoa_r+0xa62>
 800f9a0:	4601      	mov	r1, r0
 800f9a2:	ee18 0a10 	vmov	r0, s16
 800f9a6:	f000 fdbd 	bl	8010524 <__mcmp>
 800f9aa:	4602      	mov	r2, r0
 800f9ac:	4629      	mov	r1, r5
 800f9ae:	4620      	mov	r0, r4
 800f9b0:	9207      	str	r2, [sp, #28]
 800f9b2:	f000 fb75 	bl	80100a0 <_Bfree>
 800f9b6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f9ba:	ea43 0102 	orr.w	r1, r3, r2
 800f9be:	9b04      	ldr	r3, [sp, #16]
 800f9c0:	430b      	orrs	r3, r1
 800f9c2:	464d      	mov	r5, r9
 800f9c4:	d10f      	bne.n	800f9e6 <_dtoa_r+0xa66>
 800f9c6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f9ca:	d02a      	beq.n	800fa22 <_dtoa_r+0xaa2>
 800f9cc:	9b03      	ldr	r3, [sp, #12]
 800f9ce:	2b00      	cmp	r3, #0
 800f9d0:	dd02      	ble.n	800f9d8 <_dtoa_r+0xa58>
 800f9d2:	9b02      	ldr	r3, [sp, #8]
 800f9d4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f9d8:	f88b a000 	strb.w	sl, [fp]
 800f9dc:	e775      	b.n	800f8ca <_dtoa_r+0x94a>
 800f9de:	4638      	mov	r0, r7
 800f9e0:	e7ba      	b.n	800f958 <_dtoa_r+0x9d8>
 800f9e2:	2201      	movs	r2, #1
 800f9e4:	e7e2      	b.n	800f9ac <_dtoa_r+0xa2c>
 800f9e6:	9b03      	ldr	r3, [sp, #12]
 800f9e8:	2b00      	cmp	r3, #0
 800f9ea:	db04      	blt.n	800f9f6 <_dtoa_r+0xa76>
 800f9ec:	9906      	ldr	r1, [sp, #24]
 800f9ee:	430b      	orrs	r3, r1
 800f9f0:	9904      	ldr	r1, [sp, #16]
 800f9f2:	430b      	orrs	r3, r1
 800f9f4:	d122      	bne.n	800fa3c <_dtoa_r+0xabc>
 800f9f6:	2a00      	cmp	r2, #0
 800f9f8:	ddee      	ble.n	800f9d8 <_dtoa_r+0xa58>
 800f9fa:	ee18 1a10 	vmov	r1, s16
 800f9fe:	2201      	movs	r2, #1
 800fa00:	4620      	mov	r0, r4
 800fa02:	f000 fd1f 	bl	8010444 <__lshift>
 800fa06:	4631      	mov	r1, r6
 800fa08:	ee08 0a10 	vmov	s16, r0
 800fa0c:	f000 fd8a 	bl	8010524 <__mcmp>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	dc03      	bgt.n	800fa1c <_dtoa_r+0xa9c>
 800fa14:	d1e0      	bne.n	800f9d8 <_dtoa_r+0xa58>
 800fa16:	f01a 0f01 	tst.w	sl, #1
 800fa1a:	d0dd      	beq.n	800f9d8 <_dtoa_r+0xa58>
 800fa1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa20:	d1d7      	bne.n	800f9d2 <_dtoa_r+0xa52>
 800fa22:	2339      	movs	r3, #57	; 0x39
 800fa24:	f88b 3000 	strb.w	r3, [fp]
 800fa28:	462b      	mov	r3, r5
 800fa2a:	461d      	mov	r5, r3
 800fa2c:	3b01      	subs	r3, #1
 800fa2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fa32:	2a39      	cmp	r2, #57	; 0x39
 800fa34:	d071      	beq.n	800fb1a <_dtoa_r+0xb9a>
 800fa36:	3201      	adds	r2, #1
 800fa38:	701a      	strb	r2, [r3, #0]
 800fa3a:	e746      	b.n	800f8ca <_dtoa_r+0x94a>
 800fa3c:	2a00      	cmp	r2, #0
 800fa3e:	dd07      	ble.n	800fa50 <_dtoa_r+0xad0>
 800fa40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800fa44:	d0ed      	beq.n	800fa22 <_dtoa_r+0xaa2>
 800fa46:	f10a 0301 	add.w	r3, sl, #1
 800fa4a:	f88b 3000 	strb.w	r3, [fp]
 800fa4e:	e73c      	b.n	800f8ca <_dtoa_r+0x94a>
 800fa50:	9b05      	ldr	r3, [sp, #20]
 800fa52:	f809 ac01 	strb.w	sl, [r9, #-1]
 800fa56:	4599      	cmp	r9, r3
 800fa58:	d047      	beq.n	800faea <_dtoa_r+0xb6a>
 800fa5a:	ee18 1a10 	vmov	r1, s16
 800fa5e:	2300      	movs	r3, #0
 800fa60:	220a      	movs	r2, #10
 800fa62:	4620      	mov	r0, r4
 800fa64:	f000 fb3e 	bl	80100e4 <__multadd>
 800fa68:	45b8      	cmp	r8, r7
 800fa6a:	ee08 0a10 	vmov	s16, r0
 800fa6e:	f04f 0300 	mov.w	r3, #0
 800fa72:	f04f 020a 	mov.w	r2, #10
 800fa76:	4641      	mov	r1, r8
 800fa78:	4620      	mov	r0, r4
 800fa7a:	d106      	bne.n	800fa8a <_dtoa_r+0xb0a>
 800fa7c:	f000 fb32 	bl	80100e4 <__multadd>
 800fa80:	4680      	mov	r8, r0
 800fa82:	4607      	mov	r7, r0
 800fa84:	f109 0901 	add.w	r9, r9, #1
 800fa88:	e772      	b.n	800f970 <_dtoa_r+0x9f0>
 800fa8a:	f000 fb2b 	bl	80100e4 <__multadd>
 800fa8e:	4639      	mov	r1, r7
 800fa90:	4680      	mov	r8, r0
 800fa92:	2300      	movs	r3, #0
 800fa94:	220a      	movs	r2, #10
 800fa96:	4620      	mov	r0, r4
 800fa98:	f000 fb24 	bl	80100e4 <__multadd>
 800fa9c:	4607      	mov	r7, r0
 800fa9e:	e7f1      	b.n	800fa84 <_dtoa_r+0xb04>
 800faa0:	9b03      	ldr	r3, [sp, #12]
 800faa2:	9302      	str	r3, [sp, #8]
 800faa4:	9d01      	ldr	r5, [sp, #4]
 800faa6:	ee18 0a10 	vmov	r0, s16
 800faaa:	4631      	mov	r1, r6
 800faac:	f7ff f9dc 	bl	800ee68 <quorem>
 800fab0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800fab4:	9b01      	ldr	r3, [sp, #4]
 800fab6:	f805 ab01 	strb.w	sl, [r5], #1
 800faba:	1aea      	subs	r2, r5, r3
 800fabc:	9b02      	ldr	r3, [sp, #8]
 800fabe:	4293      	cmp	r3, r2
 800fac0:	dd09      	ble.n	800fad6 <_dtoa_r+0xb56>
 800fac2:	ee18 1a10 	vmov	r1, s16
 800fac6:	2300      	movs	r3, #0
 800fac8:	220a      	movs	r2, #10
 800faca:	4620      	mov	r0, r4
 800facc:	f000 fb0a 	bl	80100e4 <__multadd>
 800fad0:	ee08 0a10 	vmov	s16, r0
 800fad4:	e7e7      	b.n	800faa6 <_dtoa_r+0xb26>
 800fad6:	9b02      	ldr	r3, [sp, #8]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	bfc8      	it	gt
 800fadc:	461d      	movgt	r5, r3
 800fade:	9b01      	ldr	r3, [sp, #4]
 800fae0:	bfd8      	it	le
 800fae2:	2501      	movle	r5, #1
 800fae4:	441d      	add	r5, r3
 800fae6:	f04f 0800 	mov.w	r8, #0
 800faea:	ee18 1a10 	vmov	r1, s16
 800faee:	2201      	movs	r2, #1
 800faf0:	4620      	mov	r0, r4
 800faf2:	f000 fca7 	bl	8010444 <__lshift>
 800faf6:	4631      	mov	r1, r6
 800faf8:	ee08 0a10 	vmov	s16, r0
 800fafc:	f000 fd12 	bl	8010524 <__mcmp>
 800fb00:	2800      	cmp	r0, #0
 800fb02:	dc91      	bgt.n	800fa28 <_dtoa_r+0xaa8>
 800fb04:	d102      	bne.n	800fb0c <_dtoa_r+0xb8c>
 800fb06:	f01a 0f01 	tst.w	sl, #1
 800fb0a:	d18d      	bne.n	800fa28 <_dtoa_r+0xaa8>
 800fb0c:	462b      	mov	r3, r5
 800fb0e:	461d      	mov	r5, r3
 800fb10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb14:	2a30      	cmp	r2, #48	; 0x30
 800fb16:	d0fa      	beq.n	800fb0e <_dtoa_r+0xb8e>
 800fb18:	e6d7      	b.n	800f8ca <_dtoa_r+0x94a>
 800fb1a:	9a01      	ldr	r2, [sp, #4]
 800fb1c:	429a      	cmp	r2, r3
 800fb1e:	d184      	bne.n	800fa2a <_dtoa_r+0xaaa>
 800fb20:	9b00      	ldr	r3, [sp, #0]
 800fb22:	3301      	adds	r3, #1
 800fb24:	9300      	str	r3, [sp, #0]
 800fb26:	2331      	movs	r3, #49	; 0x31
 800fb28:	7013      	strb	r3, [r2, #0]
 800fb2a:	e6ce      	b.n	800f8ca <_dtoa_r+0x94a>
 800fb2c:	4b09      	ldr	r3, [pc, #36]	; (800fb54 <_dtoa_r+0xbd4>)
 800fb2e:	f7ff ba95 	b.w	800f05c <_dtoa_r+0xdc>
 800fb32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f47f aa6e 	bne.w	800f016 <_dtoa_r+0x96>
 800fb3a:	4b07      	ldr	r3, [pc, #28]	; (800fb58 <_dtoa_r+0xbd8>)
 800fb3c:	f7ff ba8e 	b.w	800f05c <_dtoa_r+0xdc>
 800fb40:	9b02      	ldr	r3, [sp, #8]
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	dcae      	bgt.n	800faa4 <_dtoa_r+0xb24>
 800fb46:	9b06      	ldr	r3, [sp, #24]
 800fb48:	2b02      	cmp	r3, #2
 800fb4a:	f73f aea8 	bgt.w	800f89e <_dtoa_r+0x91e>
 800fb4e:	e7a9      	b.n	800faa4 <_dtoa_r+0xb24>
 800fb50:	08012c3a 	.word	0x08012c3a
 800fb54:	08012e29 	.word	0x08012e29
 800fb58:	08012bd2 	.word	0x08012bd2

0800fb5c <__sflush_r>:
 800fb5c:	898a      	ldrh	r2, [r1, #12]
 800fb5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb62:	4605      	mov	r5, r0
 800fb64:	0710      	lsls	r0, r2, #28
 800fb66:	460c      	mov	r4, r1
 800fb68:	d458      	bmi.n	800fc1c <__sflush_r+0xc0>
 800fb6a:	684b      	ldr	r3, [r1, #4]
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	dc05      	bgt.n	800fb7c <__sflush_r+0x20>
 800fb70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	dc02      	bgt.n	800fb7c <__sflush_r+0x20>
 800fb76:	2000      	movs	r0, #0
 800fb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fb7e:	2e00      	cmp	r6, #0
 800fb80:	d0f9      	beq.n	800fb76 <__sflush_r+0x1a>
 800fb82:	2300      	movs	r3, #0
 800fb84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fb88:	682f      	ldr	r7, [r5, #0]
 800fb8a:	602b      	str	r3, [r5, #0]
 800fb8c:	d032      	beq.n	800fbf4 <__sflush_r+0x98>
 800fb8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fb90:	89a3      	ldrh	r3, [r4, #12]
 800fb92:	075a      	lsls	r2, r3, #29
 800fb94:	d505      	bpl.n	800fba2 <__sflush_r+0x46>
 800fb96:	6863      	ldr	r3, [r4, #4]
 800fb98:	1ac0      	subs	r0, r0, r3
 800fb9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fb9c:	b10b      	cbz	r3, 800fba2 <__sflush_r+0x46>
 800fb9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fba0:	1ac0      	subs	r0, r0, r3
 800fba2:	2300      	movs	r3, #0
 800fba4:	4602      	mov	r2, r0
 800fba6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fba8:	6a21      	ldr	r1, [r4, #32]
 800fbaa:	4628      	mov	r0, r5
 800fbac:	47b0      	blx	r6
 800fbae:	1c43      	adds	r3, r0, #1
 800fbb0:	89a3      	ldrh	r3, [r4, #12]
 800fbb2:	d106      	bne.n	800fbc2 <__sflush_r+0x66>
 800fbb4:	6829      	ldr	r1, [r5, #0]
 800fbb6:	291d      	cmp	r1, #29
 800fbb8:	d82c      	bhi.n	800fc14 <__sflush_r+0xb8>
 800fbba:	4a2a      	ldr	r2, [pc, #168]	; (800fc64 <__sflush_r+0x108>)
 800fbbc:	40ca      	lsrs	r2, r1
 800fbbe:	07d6      	lsls	r6, r2, #31
 800fbc0:	d528      	bpl.n	800fc14 <__sflush_r+0xb8>
 800fbc2:	2200      	movs	r2, #0
 800fbc4:	6062      	str	r2, [r4, #4]
 800fbc6:	04d9      	lsls	r1, r3, #19
 800fbc8:	6922      	ldr	r2, [r4, #16]
 800fbca:	6022      	str	r2, [r4, #0]
 800fbcc:	d504      	bpl.n	800fbd8 <__sflush_r+0x7c>
 800fbce:	1c42      	adds	r2, r0, #1
 800fbd0:	d101      	bne.n	800fbd6 <__sflush_r+0x7a>
 800fbd2:	682b      	ldr	r3, [r5, #0]
 800fbd4:	b903      	cbnz	r3, 800fbd8 <__sflush_r+0x7c>
 800fbd6:	6560      	str	r0, [r4, #84]	; 0x54
 800fbd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fbda:	602f      	str	r7, [r5, #0]
 800fbdc:	2900      	cmp	r1, #0
 800fbde:	d0ca      	beq.n	800fb76 <__sflush_r+0x1a>
 800fbe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fbe4:	4299      	cmp	r1, r3
 800fbe6:	d002      	beq.n	800fbee <__sflush_r+0x92>
 800fbe8:	4628      	mov	r0, r5
 800fbea:	f7fe f853 	bl	800dc94 <_free_r>
 800fbee:	2000      	movs	r0, #0
 800fbf0:	6360      	str	r0, [r4, #52]	; 0x34
 800fbf2:	e7c1      	b.n	800fb78 <__sflush_r+0x1c>
 800fbf4:	6a21      	ldr	r1, [r4, #32]
 800fbf6:	2301      	movs	r3, #1
 800fbf8:	4628      	mov	r0, r5
 800fbfa:	47b0      	blx	r6
 800fbfc:	1c41      	adds	r1, r0, #1
 800fbfe:	d1c7      	bne.n	800fb90 <__sflush_r+0x34>
 800fc00:	682b      	ldr	r3, [r5, #0]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d0c4      	beq.n	800fb90 <__sflush_r+0x34>
 800fc06:	2b1d      	cmp	r3, #29
 800fc08:	d001      	beq.n	800fc0e <__sflush_r+0xb2>
 800fc0a:	2b16      	cmp	r3, #22
 800fc0c:	d101      	bne.n	800fc12 <__sflush_r+0xb6>
 800fc0e:	602f      	str	r7, [r5, #0]
 800fc10:	e7b1      	b.n	800fb76 <__sflush_r+0x1a>
 800fc12:	89a3      	ldrh	r3, [r4, #12]
 800fc14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc18:	81a3      	strh	r3, [r4, #12]
 800fc1a:	e7ad      	b.n	800fb78 <__sflush_r+0x1c>
 800fc1c:	690f      	ldr	r7, [r1, #16]
 800fc1e:	2f00      	cmp	r7, #0
 800fc20:	d0a9      	beq.n	800fb76 <__sflush_r+0x1a>
 800fc22:	0793      	lsls	r3, r2, #30
 800fc24:	680e      	ldr	r6, [r1, #0]
 800fc26:	bf08      	it	eq
 800fc28:	694b      	ldreq	r3, [r1, #20]
 800fc2a:	600f      	str	r7, [r1, #0]
 800fc2c:	bf18      	it	ne
 800fc2e:	2300      	movne	r3, #0
 800fc30:	eba6 0807 	sub.w	r8, r6, r7
 800fc34:	608b      	str	r3, [r1, #8]
 800fc36:	f1b8 0f00 	cmp.w	r8, #0
 800fc3a:	dd9c      	ble.n	800fb76 <__sflush_r+0x1a>
 800fc3c:	6a21      	ldr	r1, [r4, #32]
 800fc3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fc40:	4643      	mov	r3, r8
 800fc42:	463a      	mov	r2, r7
 800fc44:	4628      	mov	r0, r5
 800fc46:	47b0      	blx	r6
 800fc48:	2800      	cmp	r0, #0
 800fc4a:	dc06      	bgt.n	800fc5a <__sflush_r+0xfe>
 800fc4c:	89a3      	ldrh	r3, [r4, #12]
 800fc4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fc52:	81a3      	strh	r3, [r4, #12]
 800fc54:	f04f 30ff 	mov.w	r0, #4294967295
 800fc58:	e78e      	b.n	800fb78 <__sflush_r+0x1c>
 800fc5a:	4407      	add	r7, r0
 800fc5c:	eba8 0800 	sub.w	r8, r8, r0
 800fc60:	e7e9      	b.n	800fc36 <__sflush_r+0xda>
 800fc62:	bf00      	nop
 800fc64:	20400001 	.word	0x20400001

0800fc68 <_fflush_r>:
 800fc68:	b538      	push	{r3, r4, r5, lr}
 800fc6a:	690b      	ldr	r3, [r1, #16]
 800fc6c:	4605      	mov	r5, r0
 800fc6e:	460c      	mov	r4, r1
 800fc70:	b913      	cbnz	r3, 800fc78 <_fflush_r+0x10>
 800fc72:	2500      	movs	r5, #0
 800fc74:	4628      	mov	r0, r5
 800fc76:	bd38      	pop	{r3, r4, r5, pc}
 800fc78:	b118      	cbz	r0, 800fc82 <_fflush_r+0x1a>
 800fc7a:	6983      	ldr	r3, [r0, #24]
 800fc7c:	b90b      	cbnz	r3, 800fc82 <_fflush_r+0x1a>
 800fc7e:	f000 f887 	bl	800fd90 <__sinit>
 800fc82:	4b14      	ldr	r3, [pc, #80]	; (800fcd4 <_fflush_r+0x6c>)
 800fc84:	429c      	cmp	r4, r3
 800fc86:	d11b      	bne.n	800fcc0 <_fflush_r+0x58>
 800fc88:	686c      	ldr	r4, [r5, #4]
 800fc8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d0ef      	beq.n	800fc72 <_fflush_r+0xa>
 800fc92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800fc94:	07d0      	lsls	r0, r2, #31
 800fc96:	d404      	bmi.n	800fca2 <_fflush_r+0x3a>
 800fc98:	0599      	lsls	r1, r3, #22
 800fc9a:	d402      	bmi.n	800fca2 <_fflush_r+0x3a>
 800fc9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fc9e:	f000 f927 	bl	800fef0 <__retarget_lock_acquire_recursive>
 800fca2:	4628      	mov	r0, r5
 800fca4:	4621      	mov	r1, r4
 800fca6:	f7ff ff59 	bl	800fb5c <__sflush_r>
 800fcaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fcac:	07da      	lsls	r2, r3, #31
 800fcae:	4605      	mov	r5, r0
 800fcb0:	d4e0      	bmi.n	800fc74 <_fflush_r+0xc>
 800fcb2:	89a3      	ldrh	r3, [r4, #12]
 800fcb4:	059b      	lsls	r3, r3, #22
 800fcb6:	d4dd      	bmi.n	800fc74 <_fflush_r+0xc>
 800fcb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fcba:	f000 f91a 	bl	800fef2 <__retarget_lock_release_recursive>
 800fcbe:	e7d9      	b.n	800fc74 <_fflush_r+0xc>
 800fcc0:	4b05      	ldr	r3, [pc, #20]	; (800fcd8 <_fflush_r+0x70>)
 800fcc2:	429c      	cmp	r4, r3
 800fcc4:	d101      	bne.n	800fcca <_fflush_r+0x62>
 800fcc6:	68ac      	ldr	r4, [r5, #8]
 800fcc8:	e7df      	b.n	800fc8a <_fflush_r+0x22>
 800fcca:	4b04      	ldr	r3, [pc, #16]	; (800fcdc <_fflush_r+0x74>)
 800fccc:	429c      	cmp	r4, r3
 800fcce:	bf08      	it	eq
 800fcd0:	68ec      	ldreq	r4, [r5, #12]
 800fcd2:	e7da      	b.n	800fc8a <_fflush_r+0x22>
 800fcd4:	08012c6c 	.word	0x08012c6c
 800fcd8:	08012c8c 	.word	0x08012c8c
 800fcdc:	08012c4c 	.word	0x08012c4c

0800fce0 <std>:
 800fce0:	2300      	movs	r3, #0
 800fce2:	b510      	push	{r4, lr}
 800fce4:	4604      	mov	r4, r0
 800fce6:	e9c0 3300 	strd	r3, r3, [r0]
 800fcea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fcee:	6083      	str	r3, [r0, #8]
 800fcf0:	8181      	strh	r1, [r0, #12]
 800fcf2:	6643      	str	r3, [r0, #100]	; 0x64
 800fcf4:	81c2      	strh	r2, [r0, #14]
 800fcf6:	6183      	str	r3, [r0, #24]
 800fcf8:	4619      	mov	r1, r3
 800fcfa:	2208      	movs	r2, #8
 800fcfc:	305c      	adds	r0, #92	; 0x5c
 800fcfe:	f7fd ffab 	bl	800dc58 <memset>
 800fd02:	4b05      	ldr	r3, [pc, #20]	; (800fd18 <std+0x38>)
 800fd04:	6263      	str	r3, [r4, #36]	; 0x24
 800fd06:	4b05      	ldr	r3, [pc, #20]	; (800fd1c <std+0x3c>)
 800fd08:	62a3      	str	r3, [r4, #40]	; 0x28
 800fd0a:	4b05      	ldr	r3, [pc, #20]	; (800fd20 <std+0x40>)
 800fd0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800fd0e:	4b05      	ldr	r3, [pc, #20]	; (800fd24 <std+0x44>)
 800fd10:	6224      	str	r4, [r4, #32]
 800fd12:	6323      	str	r3, [r4, #48]	; 0x30
 800fd14:	bd10      	pop	{r4, pc}
 800fd16:	bf00      	nop
 800fd18:	0800e991 	.word	0x0800e991
 800fd1c:	0800e9b7 	.word	0x0800e9b7
 800fd20:	0800e9ef 	.word	0x0800e9ef
 800fd24:	0800ea13 	.word	0x0800ea13

0800fd28 <_cleanup_r>:
 800fd28:	4901      	ldr	r1, [pc, #4]	; (800fd30 <_cleanup_r+0x8>)
 800fd2a:	f000 b8c1 	b.w	800feb0 <_fwalk_reent>
 800fd2e:	bf00      	nop
 800fd30:	0800fc69 	.word	0x0800fc69

0800fd34 <__sfmoreglue>:
 800fd34:	b570      	push	{r4, r5, r6, lr}
 800fd36:	2268      	movs	r2, #104	; 0x68
 800fd38:	1e4d      	subs	r5, r1, #1
 800fd3a:	4355      	muls	r5, r2
 800fd3c:	460e      	mov	r6, r1
 800fd3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800fd42:	f7fe f813 	bl	800dd6c <_malloc_r>
 800fd46:	4604      	mov	r4, r0
 800fd48:	b140      	cbz	r0, 800fd5c <__sfmoreglue+0x28>
 800fd4a:	2100      	movs	r1, #0
 800fd4c:	e9c0 1600 	strd	r1, r6, [r0]
 800fd50:	300c      	adds	r0, #12
 800fd52:	60a0      	str	r0, [r4, #8]
 800fd54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800fd58:	f7fd ff7e 	bl	800dc58 <memset>
 800fd5c:	4620      	mov	r0, r4
 800fd5e:	bd70      	pop	{r4, r5, r6, pc}

0800fd60 <__sfp_lock_acquire>:
 800fd60:	4801      	ldr	r0, [pc, #4]	; (800fd68 <__sfp_lock_acquire+0x8>)
 800fd62:	f000 b8c5 	b.w	800fef0 <__retarget_lock_acquire_recursive>
 800fd66:	bf00      	nop
 800fd68:	20001891 	.word	0x20001891

0800fd6c <__sfp_lock_release>:
 800fd6c:	4801      	ldr	r0, [pc, #4]	; (800fd74 <__sfp_lock_release+0x8>)
 800fd6e:	f000 b8c0 	b.w	800fef2 <__retarget_lock_release_recursive>
 800fd72:	bf00      	nop
 800fd74:	20001891 	.word	0x20001891

0800fd78 <__sinit_lock_acquire>:
 800fd78:	4801      	ldr	r0, [pc, #4]	; (800fd80 <__sinit_lock_acquire+0x8>)
 800fd7a:	f000 b8b9 	b.w	800fef0 <__retarget_lock_acquire_recursive>
 800fd7e:	bf00      	nop
 800fd80:	20001892 	.word	0x20001892

0800fd84 <__sinit_lock_release>:
 800fd84:	4801      	ldr	r0, [pc, #4]	; (800fd8c <__sinit_lock_release+0x8>)
 800fd86:	f000 b8b4 	b.w	800fef2 <__retarget_lock_release_recursive>
 800fd8a:	bf00      	nop
 800fd8c:	20001892 	.word	0x20001892

0800fd90 <__sinit>:
 800fd90:	b510      	push	{r4, lr}
 800fd92:	4604      	mov	r4, r0
 800fd94:	f7ff fff0 	bl	800fd78 <__sinit_lock_acquire>
 800fd98:	69a3      	ldr	r3, [r4, #24]
 800fd9a:	b11b      	cbz	r3, 800fda4 <__sinit+0x14>
 800fd9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fda0:	f7ff bff0 	b.w	800fd84 <__sinit_lock_release>
 800fda4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fda8:	6523      	str	r3, [r4, #80]	; 0x50
 800fdaa:	4b13      	ldr	r3, [pc, #76]	; (800fdf8 <__sinit+0x68>)
 800fdac:	4a13      	ldr	r2, [pc, #76]	; (800fdfc <__sinit+0x6c>)
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	62a2      	str	r2, [r4, #40]	; 0x28
 800fdb2:	42a3      	cmp	r3, r4
 800fdb4:	bf04      	itt	eq
 800fdb6:	2301      	moveq	r3, #1
 800fdb8:	61a3      	streq	r3, [r4, #24]
 800fdba:	4620      	mov	r0, r4
 800fdbc:	f000 f820 	bl	800fe00 <__sfp>
 800fdc0:	6060      	str	r0, [r4, #4]
 800fdc2:	4620      	mov	r0, r4
 800fdc4:	f000 f81c 	bl	800fe00 <__sfp>
 800fdc8:	60a0      	str	r0, [r4, #8]
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 f818 	bl	800fe00 <__sfp>
 800fdd0:	2200      	movs	r2, #0
 800fdd2:	60e0      	str	r0, [r4, #12]
 800fdd4:	2104      	movs	r1, #4
 800fdd6:	6860      	ldr	r0, [r4, #4]
 800fdd8:	f7ff ff82 	bl	800fce0 <std>
 800fddc:	68a0      	ldr	r0, [r4, #8]
 800fdde:	2201      	movs	r2, #1
 800fde0:	2109      	movs	r1, #9
 800fde2:	f7ff ff7d 	bl	800fce0 <std>
 800fde6:	68e0      	ldr	r0, [r4, #12]
 800fde8:	2202      	movs	r2, #2
 800fdea:	2112      	movs	r1, #18
 800fdec:	f7ff ff78 	bl	800fce0 <std>
 800fdf0:	2301      	movs	r3, #1
 800fdf2:	61a3      	str	r3, [r4, #24]
 800fdf4:	e7d2      	b.n	800fd9c <__sinit+0xc>
 800fdf6:	bf00      	nop
 800fdf8:	08012aec 	.word	0x08012aec
 800fdfc:	0800fd29 	.word	0x0800fd29

0800fe00 <__sfp>:
 800fe00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe02:	4607      	mov	r7, r0
 800fe04:	f7ff ffac 	bl	800fd60 <__sfp_lock_acquire>
 800fe08:	4b1e      	ldr	r3, [pc, #120]	; (800fe84 <__sfp+0x84>)
 800fe0a:	681e      	ldr	r6, [r3, #0]
 800fe0c:	69b3      	ldr	r3, [r6, #24]
 800fe0e:	b913      	cbnz	r3, 800fe16 <__sfp+0x16>
 800fe10:	4630      	mov	r0, r6
 800fe12:	f7ff ffbd 	bl	800fd90 <__sinit>
 800fe16:	3648      	adds	r6, #72	; 0x48
 800fe18:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800fe1c:	3b01      	subs	r3, #1
 800fe1e:	d503      	bpl.n	800fe28 <__sfp+0x28>
 800fe20:	6833      	ldr	r3, [r6, #0]
 800fe22:	b30b      	cbz	r3, 800fe68 <__sfp+0x68>
 800fe24:	6836      	ldr	r6, [r6, #0]
 800fe26:	e7f7      	b.n	800fe18 <__sfp+0x18>
 800fe28:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fe2c:	b9d5      	cbnz	r5, 800fe64 <__sfp+0x64>
 800fe2e:	4b16      	ldr	r3, [pc, #88]	; (800fe88 <__sfp+0x88>)
 800fe30:	60e3      	str	r3, [r4, #12]
 800fe32:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800fe36:	6665      	str	r5, [r4, #100]	; 0x64
 800fe38:	f000 f859 	bl	800feee <__retarget_lock_init_recursive>
 800fe3c:	f7ff ff96 	bl	800fd6c <__sfp_lock_release>
 800fe40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800fe44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800fe48:	6025      	str	r5, [r4, #0]
 800fe4a:	61a5      	str	r5, [r4, #24]
 800fe4c:	2208      	movs	r2, #8
 800fe4e:	4629      	mov	r1, r5
 800fe50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800fe54:	f7fd ff00 	bl	800dc58 <memset>
 800fe58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800fe5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800fe60:	4620      	mov	r0, r4
 800fe62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fe64:	3468      	adds	r4, #104	; 0x68
 800fe66:	e7d9      	b.n	800fe1c <__sfp+0x1c>
 800fe68:	2104      	movs	r1, #4
 800fe6a:	4638      	mov	r0, r7
 800fe6c:	f7ff ff62 	bl	800fd34 <__sfmoreglue>
 800fe70:	4604      	mov	r4, r0
 800fe72:	6030      	str	r0, [r6, #0]
 800fe74:	2800      	cmp	r0, #0
 800fe76:	d1d5      	bne.n	800fe24 <__sfp+0x24>
 800fe78:	f7ff ff78 	bl	800fd6c <__sfp_lock_release>
 800fe7c:	230c      	movs	r3, #12
 800fe7e:	603b      	str	r3, [r7, #0]
 800fe80:	e7ee      	b.n	800fe60 <__sfp+0x60>
 800fe82:	bf00      	nop
 800fe84:	08012aec 	.word	0x08012aec
 800fe88:	ffff0001 	.word	0xffff0001

0800fe8c <fiprintf>:
 800fe8c:	b40e      	push	{r1, r2, r3}
 800fe8e:	b503      	push	{r0, r1, lr}
 800fe90:	4601      	mov	r1, r0
 800fe92:	ab03      	add	r3, sp, #12
 800fe94:	4805      	ldr	r0, [pc, #20]	; (800feac <fiprintf+0x20>)
 800fe96:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe9a:	6800      	ldr	r0, [r0, #0]
 800fe9c:	9301      	str	r3, [sp, #4]
 800fe9e:	f000 ffc9 	bl	8010e34 <_vfiprintf_r>
 800fea2:	b002      	add	sp, #8
 800fea4:	f85d eb04 	ldr.w	lr, [sp], #4
 800fea8:	b003      	add	sp, #12
 800feaa:	4770      	bx	lr
 800feac:	2000000c 	.word	0x2000000c

0800feb0 <_fwalk_reent>:
 800feb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800feb4:	4606      	mov	r6, r0
 800feb6:	4688      	mov	r8, r1
 800feb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800febc:	2700      	movs	r7, #0
 800febe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800fec2:	f1b9 0901 	subs.w	r9, r9, #1
 800fec6:	d505      	bpl.n	800fed4 <_fwalk_reent+0x24>
 800fec8:	6824      	ldr	r4, [r4, #0]
 800feca:	2c00      	cmp	r4, #0
 800fecc:	d1f7      	bne.n	800febe <_fwalk_reent+0xe>
 800fece:	4638      	mov	r0, r7
 800fed0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fed4:	89ab      	ldrh	r3, [r5, #12]
 800fed6:	2b01      	cmp	r3, #1
 800fed8:	d907      	bls.n	800feea <_fwalk_reent+0x3a>
 800feda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800fede:	3301      	adds	r3, #1
 800fee0:	d003      	beq.n	800feea <_fwalk_reent+0x3a>
 800fee2:	4629      	mov	r1, r5
 800fee4:	4630      	mov	r0, r6
 800fee6:	47c0      	blx	r8
 800fee8:	4307      	orrs	r7, r0
 800feea:	3568      	adds	r5, #104	; 0x68
 800feec:	e7e9      	b.n	800fec2 <_fwalk_reent+0x12>

0800feee <__retarget_lock_init_recursive>:
 800feee:	4770      	bx	lr

0800fef0 <__retarget_lock_acquire_recursive>:
 800fef0:	4770      	bx	lr

0800fef2 <__retarget_lock_release_recursive>:
 800fef2:	4770      	bx	lr

0800fef4 <_lseek_r>:
 800fef4:	b538      	push	{r3, r4, r5, lr}
 800fef6:	4d07      	ldr	r5, [pc, #28]	; (800ff14 <_lseek_r+0x20>)
 800fef8:	4604      	mov	r4, r0
 800fefa:	4608      	mov	r0, r1
 800fefc:	4611      	mov	r1, r2
 800fefe:	2200      	movs	r2, #0
 800ff00:	602a      	str	r2, [r5, #0]
 800ff02:	461a      	mov	r2, r3
 800ff04:	f7f3 ff72 	bl	8003dec <_lseek>
 800ff08:	1c43      	adds	r3, r0, #1
 800ff0a:	d102      	bne.n	800ff12 <_lseek_r+0x1e>
 800ff0c:	682b      	ldr	r3, [r5, #0]
 800ff0e:	b103      	cbz	r3, 800ff12 <_lseek_r+0x1e>
 800ff10:	6023      	str	r3, [r4, #0]
 800ff12:	bd38      	pop	{r3, r4, r5, pc}
 800ff14:	20001894 	.word	0x20001894

0800ff18 <__swhatbuf_r>:
 800ff18:	b570      	push	{r4, r5, r6, lr}
 800ff1a:	460e      	mov	r6, r1
 800ff1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ff20:	2900      	cmp	r1, #0
 800ff22:	b096      	sub	sp, #88	; 0x58
 800ff24:	4614      	mov	r4, r2
 800ff26:	461d      	mov	r5, r3
 800ff28:	da08      	bge.n	800ff3c <__swhatbuf_r+0x24>
 800ff2a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ff2e:	2200      	movs	r2, #0
 800ff30:	602a      	str	r2, [r5, #0]
 800ff32:	061a      	lsls	r2, r3, #24
 800ff34:	d410      	bmi.n	800ff58 <__swhatbuf_r+0x40>
 800ff36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ff3a:	e00e      	b.n	800ff5a <__swhatbuf_r+0x42>
 800ff3c:	466a      	mov	r2, sp
 800ff3e:	f001 fb4f 	bl	80115e0 <_fstat_r>
 800ff42:	2800      	cmp	r0, #0
 800ff44:	dbf1      	blt.n	800ff2a <__swhatbuf_r+0x12>
 800ff46:	9a01      	ldr	r2, [sp, #4]
 800ff48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ff4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ff50:	425a      	negs	r2, r3
 800ff52:	415a      	adcs	r2, r3
 800ff54:	602a      	str	r2, [r5, #0]
 800ff56:	e7ee      	b.n	800ff36 <__swhatbuf_r+0x1e>
 800ff58:	2340      	movs	r3, #64	; 0x40
 800ff5a:	2000      	movs	r0, #0
 800ff5c:	6023      	str	r3, [r4, #0]
 800ff5e:	b016      	add	sp, #88	; 0x58
 800ff60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ff64 <__smakebuf_r>:
 800ff64:	898b      	ldrh	r3, [r1, #12]
 800ff66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ff68:	079d      	lsls	r5, r3, #30
 800ff6a:	4606      	mov	r6, r0
 800ff6c:	460c      	mov	r4, r1
 800ff6e:	d507      	bpl.n	800ff80 <__smakebuf_r+0x1c>
 800ff70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ff74:	6023      	str	r3, [r4, #0]
 800ff76:	6123      	str	r3, [r4, #16]
 800ff78:	2301      	movs	r3, #1
 800ff7a:	6163      	str	r3, [r4, #20]
 800ff7c:	b002      	add	sp, #8
 800ff7e:	bd70      	pop	{r4, r5, r6, pc}
 800ff80:	ab01      	add	r3, sp, #4
 800ff82:	466a      	mov	r2, sp
 800ff84:	f7ff ffc8 	bl	800ff18 <__swhatbuf_r>
 800ff88:	9900      	ldr	r1, [sp, #0]
 800ff8a:	4605      	mov	r5, r0
 800ff8c:	4630      	mov	r0, r6
 800ff8e:	f7fd feed 	bl	800dd6c <_malloc_r>
 800ff92:	b948      	cbnz	r0, 800ffa8 <__smakebuf_r+0x44>
 800ff94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff98:	059a      	lsls	r2, r3, #22
 800ff9a:	d4ef      	bmi.n	800ff7c <__smakebuf_r+0x18>
 800ff9c:	f023 0303 	bic.w	r3, r3, #3
 800ffa0:	f043 0302 	orr.w	r3, r3, #2
 800ffa4:	81a3      	strh	r3, [r4, #12]
 800ffa6:	e7e3      	b.n	800ff70 <__smakebuf_r+0xc>
 800ffa8:	4b0d      	ldr	r3, [pc, #52]	; (800ffe0 <__smakebuf_r+0x7c>)
 800ffaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800ffac:	89a3      	ldrh	r3, [r4, #12]
 800ffae:	6020      	str	r0, [r4, #0]
 800ffb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffb4:	81a3      	strh	r3, [r4, #12]
 800ffb6:	9b00      	ldr	r3, [sp, #0]
 800ffb8:	6163      	str	r3, [r4, #20]
 800ffba:	9b01      	ldr	r3, [sp, #4]
 800ffbc:	6120      	str	r0, [r4, #16]
 800ffbe:	b15b      	cbz	r3, 800ffd8 <__smakebuf_r+0x74>
 800ffc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ffc4:	4630      	mov	r0, r6
 800ffc6:	f001 fb1d 	bl	8011604 <_isatty_r>
 800ffca:	b128      	cbz	r0, 800ffd8 <__smakebuf_r+0x74>
 800ffcc:	89a3      	ldrh	r3, [r4, #12]
 800ffce:	f023 0303 	bic.w	r3, r3, #3
 800ffd2:	f043 0301 	orr.w	r3, r3, #1
 800ffd6:	81a3      	strh	r3, [r4, #12]
 800ffd8:	89a0      	ldrh	r0, [r4, #12]
 800ffda:	4305      	orrs	r5, r0
 800ffdc:	81a5      	strh	r5, [r4, #12]
 800ffde:	e7cd      	b.n	800ff7c <__smakebuf_r+0x18>
 800ffe0:	0800fd29 	.word	0x0800fd29

0800ffe4 <__ascii_mbtowc>:
 800ffe4:	b082      	sub	sp, #8
 800ffe6:	b901      	cbnz	r1, 800ffea <__ascii_mbtowc+0x6>
 800ffe8:	a901      	add	r1, sp, #4
 800ffea:	b142      	cbz	r2, 800fffe <__ascii_mbtowc+0x1a>
 800ffec:	b14b      	cbz	r3, 8010002 <__ascii_mbtowc+0x1e>
 800ffee:	7813      	ldrb	r3, [r2, #0]
 800fff0:	600b      	str	r3, [r1, #0]
 800fff2:	7812      	ldrb	r2, [r2, #0]
 800fff4:	1e10      	subs	r0, r2, #0
 800fff6:	bf18      	it	ne
 800fff8:	2001      	movne	r0, #1
 800fffa:	b002      	add	sp, #8
 800fffc:	4770      	bx	lr
 800fffe:	4610      	mov	r0, r2
 8010000:	e7fb      	b.n	800fffa <__ascii_mbtowc+0x16>
 8010002:	f06f 0001 	mvn.w	r0, #1
 8010006:	e7f8      	b.n	800fffa <__ascii_mbtowc+0x16>

08010008 <__malloc_lock>:
 8010008:	4801      	ldr	r0, [pc, #4]	; (8010010 <__malloc_lock+0x8>)
 801000a:	f7ff bf71 	b.w	800fef0 <__retarget_lock_acquire_recursive>
 801000e:	bf00      	nop
 8010010:	20001890 	.word	0x20001890

08010014 <__malloc_unlock>:
 8010014:	4801      	ldr	r0, [pc, #4]	; (801001c <__malloc_unlock+0x8>)
 8010016:	f7ff bf6c 	b.w	800fef2 <__retarget_lock_release_recursive>
 801001a:	bf00      	nop
 801001c:	20001890 	.word	0x20001890

08010020 <_Balloc>:
 8010020:	b570      	push	{r4, r5, r6, lr}
 8010022:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8010024:	4604      	mov	r4, r0
 8010026:	460d      	mov	r5, r1
 8010028:	b976      	cbnz	r6, 8010048 <_Balloc+0x28>
 801002a:	2010      	movs	r0, #16
 801002c:	f7fd fdcc 	bl	800dbc8 <malloc>
 8010030:	4602      	mov	r2, r0
 8010032:	6260      	str	r0, [r4, #36]	; 0x24
 8010034:	b920      	cbnz	r0, 8010040 <_Balloc+0x20>
 8010036:	4b18      	ldr	r3, [pc, #96]	; (8010098 <_Balloc+0x78>)
 8010038:	4818      	ldr	r0, [pc, #96]	; (801009c <_Balloc+0x7c>)
 801003a:	2166      	movs	r1, #102	; 0x66
 801003c:	f7fe fee6 	bl	800ee0c <__assert_func>
 8010040:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010044:	6006      	str	r6, [r0, #0]
 8010046:	60c6      	str	r6, [r0, #12]
 8010048:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801004a:	68f3      	ldr	r3, [r6, #12]
 801004c:	b183      	cbz	r3, 8010070 <_Balloc+0x50>
 801004e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010050:	68db      	ldr	r3, [r3, #12]
 8010052:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010056:	b9b8      	cbnz	r0, 8010088 <_Balloc+0x68>
 8010058:	2101      	movs	r1, #1
 801005a:	fa01 f605 	lsl.w	r6, r1, r5
 801005e:	1d72      	adds	r2, r6, #5
 8010060:	0092      	lsls	r2, r2, #2
 8010062:	4620      	mov	r0, r4
 8010064:	f7fd fe00 	bl	800dc68 <_calloc_r>
 8010068:	b160      	cbz	r0, 8010084 <_Balloc+0x64>
 801006a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801006e:	e00e      	b.n	801008e <_Balloc+0x6e>
 8010070:	2221      	movs	r2, #33	; 0x21
 8010072:	2104      	movs	r1, #4
 8010074:	4620      	mov	r0, r4
 8010076:	f7fd fdf7 	bl	800dc68 <_calloc_r>
 801007a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801007c:	60f0      	str	r0, [r6, #12]
 801007e:	68db      	ldr	r3, [r3, #12]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d1e4      	bne.n	801004e <_Balloc+0x2e>
 8010084:	2000      	movs	r0, #0
 8010086:	bd70      	pop	{r4, r5, r6, pc}
 8010088:	6802      	ldr	r2, [r0, #0]
 801008a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801008e:	2300      	movs	r3, #0
 8010090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010094:	e7f7      	b.n	8010086 <_Balloc+0x66>
 8010096:	bf00      	nop
 8010098:	08012b22 	.word	0x08012b22
 801009c:	08012cb6 	.word	0x08012cb6

080100a0 <_Bfree>:
 80100a0:	b570      	push	{r4, r5, r6, lr}
 80100a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80100a4:	4605      	mov	r5, r0
 80100a6:	460c      	mov	r4, r1
 80100a8:	b976      	cbnz	r6, 80100c8 <_Bfree+0x28>
 80100aa:	2010      	movs	r0, #16
 80100ac:	f7fd fd8c 	bl	800dbc8 <malloc>
 80100b0:	4602      	mov	r2, r0
 80100b2:	6268      	str	r0, [r5, #36]	; 0x24
 80100b4:	b920      	cbnz	r0, 80100c0 <_Bfree+0x20>
 80100b6:	4b09      	ldr	r3, [pc, #36]	; (80100dc <_Bfree+0x3c>)
 80100b8:	4809      	ldr	r0, [pc, #36]	; (80100e0 <_Bfree+0x40>)
 80100ba:	218a      	movs	r1, #138	; 0x8a
 80100bc:	f7fe fea6 	bl	800ee0c <__assert_func>
 80100c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80100c4:	6006      	str	r6, [r0, #0]
 80100c6:	60c6      	str	r6, [r0, #12]
 80100c8:	b13c      	cbz	r4, 80100da <_Bfree+0x3a>
 80100ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80100cc:	6862      	ldr	r2, [r4, #4]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80100d4:	6021      	str	r1, [r4, #0]
 80100d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80100da:	bd70      	pop	{r4, r5, r6, pc}
 80100dc:	08012b22 	.word	0x08012b22
 80100e0:	08012cb6 	.word	0x08012cb6

080100e4 <__multadd>:
 80100e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100e8:	690d      	ldr	r5, [r1, #16]
 80100ea:	4607      	mov	r7, r0
 80100ec:	460c      	mov	r4, r1
 80100ee:	461e      	mov	r6, r3
 80100f0:	f101 0c14 	add.w	ip, r1, #20
 80100f4:	2000      	movs	r0, #0
 80100f6:	f8dc 3000 	ldr.w	r3, [ip]
 80100fa:	b299      	uxth	r1, r3
 80100fc:	fb02 6101 	mla	r1, r2, r1, r6
 8010100:	0c1e      	lsrs	r6, r3, #16
 8010102:	0c0b      	lsrs	r3, r1, #16
 8010104:	fb02 3306 	mla	r3, r2, r6, r3
 8010108:	b289      	uxth	r1, r1
 801010a:	3001      	adds	r0, #1
 801010c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010110:	4285      	cmp	r5, r0
 8010112:	f84c 1b04 	str.w	r1, [ip], #4
 8010116:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801011a:	dcec      	bgt.n	80100f6 <__multadd+0x12>
 801011c:	b30e      	cbz	r6, 8010162 <__multadd+0x7e>
 801011e:	68a3      	ldr	r3, [r4, #8]
 8010120:	42ab      	cmp	r3, r5
 8010122:	dc19      	bgt.n	8010158 <__multadd+0x74>
 8010124:	6861      	ldr	r1, [r4, #4]
 8010126:	4638      	mov	r0, r7
 8010128:	3101      	adds	r1, #1
 801012a:	f7ff ff79 	bl	8010020 <_Balloc>
 801012e:	4680      	mov	r8, r0
 8010130:	b928      	cbnz	r0, 801013e <__multadd+0x5a>
 8010132:	4602      	mov	r2, r0
 8010134:	4b0c      	ldr	r3, [pc, #48]	; (8010168 <__multadd+0x84>)
 8010136:	480d      	ldr	r0, [pc, #52]	; (801016c <__multadd+0x88>)
 8010138:	21b5      	movs	r1, #181	; 0xb5
 801013a:	f7fe fe67 	bl	800ee0c <__assert_func>
 801013e:	6922      	ldr	r2, [r4, #16]
 8010140:	3202      	adds	r2, #2
 8010142:	f104 010c 	add.w	r1, r4, #12
 8010146:	0092      	lsls	r2, r2, #2
 8010148:	300c      	adds	r0, #12
 801014a:	f7fd fd5d 	bl	800dc08 <memcpy>
 801014e:	4621      	mov	r1, r4
 8010150:	4638      	mov	r0, r7
 8010152:	f7ff ffa5 	bl	80100a0 <_Bfree>
 8010156:	4644      	mov	r4, r8
 8010158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801015c:	3501      	adds	r5, #1
 801015e:	615e      	str	r6, [r3, #20]
 8010160:	6125      	str	r5, [r4, #16]
 8010162:	4620      	mov	r0, r4
 8010164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010168:	08012c3a 	.word	0x08012c3a
 801016c:	08012cb6 	.word	0x08012cb6

08010170 <__hi0bits>:
 8010170:	0c03      	lsrs	r3, r0, #16
 8010172:	041b      	lsls	r3, r3, #16
 8010174:	b9d3      	cbnz	r3, 80101ac <__hi0bits+0x3c>
 8010176:	0400      	lsls	r0, r0, #16
 8010178:	2310      	movs	r3, #16
 801017a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801017e:	bf04      	itt	eq
 8010180:	0200      	lsleq	r0, r0, #8
 8010182:	3308      	addeq	r3, #8
 8010184:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010188:	bf04      	itt	eq
 801018a:	0100      	lsleq	r0, r0, #4
 801018c:	3304      	addeq	r3, #4
 801018e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010192:	bf04      	itt	eq
 8010194:	0080      	lsleq	r0, r0, #2
 8010196:	3302      	addeq	r3, #2
 8010198:	2800      	cmp	r0, #0
 801019a:	db05      	blt.n	80101a8 <__hi0bits+0x38>
 801019c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80101a0:	f103 0301 	add.w	r3, r3, #1
 80101a4:	bf08      	it	eq
 80101a6:	2320      	moveq	r3, #32
 80101a8:	4618      	mov	r0, r3
 80101aa:	4770      	bx	lr
 80101ac:	2300      	movs	r3, #0
 80101ae:	e7e4      	b.n	801017a <__hi0bits+0xa>

080101b0 <__lo0bits>:
 80101b0:	6803      	ldr	r3, [r0, #0]
 80101b2:	f013 0207 	ands.w	r2, r3, #7
 80101b6:	4601      	mov	r1, r0
 80101b8:	d00b      	beq.n	80101d2 <__lo0bits+0x22>
 80101ba:	07da      	lsls	r2, r3, #31
 80101bc:	d423      	bmi.n	8010206 <__lo0bits+0x56>
 80101be:	0798      	lsls	r0, r3, #30
 80101c0:	bf49      	itett	mi
 80101c2:	085b      	lsrmi	r3, r3, #1
 80101c4:	089b      	lsrpl	r3, r3, #2
 80101c6:	2001      	movmi	r0, #1
 80101c8:	600b      	strmi	r3, [r1, #0]
 80101ca:	bf5c      	itt	pl
 80101cc:	600b      	strpl	r3, [r1, #0]
 80101ce:	2002      	movpl	r0, #2
 80101d0:	4770      	bx	lr
 80101d2:	b298      	uxth	r0, r3
 80101d4:	b9a8      	cbnz	r0, 8010202 <__lo0bits+0x52>
 80101d6:	0c1b      	lsrs	r3, r3, #16
 80101d8:	2010      	movs	r0, #16
 80101da:	b2da      	uxtb	r2, r3
 80101dc:	b90a      	cbnz	r2, 80101e2 <__lo0bits+0x32>
 80101de:	3008      	adds	r0, #8
 80101e0:	0a1b      	lsrs	r3, r3, #8
 80101e2:	071a      	lsls	r2, r3, #28
 80101e4:	bf04      	itt	eq
 80101e6:	091b      	lsreq	r3, r3, #4
 80101e8:	3004      	addeq	r0, #4
 80101ea:	079a      	lsls	r2, r3, #30
 80101ec:	bf04      	itt	eq
 80101ee:	089b      	lsreq	r3, r3, #2
 80101f0:	3002      	addeq	r0, #2
 80101f2:	07da      	lsls	r2, r3, #31
 80101f4:	d403      	bmi.n	80101fe <__lo0bits+0x4e>
 80101f6:	085b      	lsrs	r3, r3, #1
 80101f8:	f100 0001 	add.w	r0, r0, #1
 80101fc:	d005      	beq.n	801020a <__lo0bits+0x5a>
 80101fe:	600b      	str	r3, [r1, #0]
 8010200:	4770      	bx	lr
 8010202:	4610      	mov	r0, r2
 8010204:	e7e9      	b.n	80101da <__lo0bits+0x2a>
 8010206:	2000      	movs	r0, #0
 8010208:	4770      	bx	lr
 801020a:	2020      	movs	r0, #32
 801020c:	4770      	bx	lr
	...

08010210 <__i2b>:
 8010210:	b510      	push	{r4, lr}
 8010212:	460c      	mov	r4, r1
 8010214:	2101      	movs	r1, #1
 8010216:	f7ff ff03 	bl	8010020 <_Balloc>
 801021a:	4602      	mov	r2, r0
 801021c:	b928      	cbnz	r0, 801022a <__i2b+0x1a>
 801021e:	4b05      	ldr	r3, [pc, #20]	; (8010234 <__i2b+0x24>)
 8010220:	4805      	ldr	r0, [pc, #20]	; (8010238 <__i2b+0x28>)
 8010222:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8010226:	f7fe fdf1 	bl	800ee0c <__assert_func>
 801022a:	2301      	movs	r3, #1
 801022c:	6144      	str	r4, [r0, #20]
 801022e:	6103      	str	r3, [r0, #16]
 8010230:	bd10      	pop	{r4, pc}
 8010232:	bf00      	nop
 8010234:	08012c3a 	.word	0x08012c3a
 8010238:	08012cb6 	.word	0x08012cb6

0801023c <__multiply>:
 801023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010240:	4691      	mov	r9, r2
 8010242:	690a      	ldr	r2, [r1, #16]
 8010244:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010248:	429a      	cmp	r2, r3
 801024a:	bfb8      	it	lt
 801024c:	460b      	movlt	r3, r1
 801024e:	460c      	mov	r4, r1
 8010250:	bfbc      	itt	lt
 8010252:	464c      	movlt	r4, r9
 8010254:	4699      	movlt	r9, r3
 8010256:	6927      	ldr	r7, [r4, #16]
 8010258:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801025c:	68a3      	ldr	r3, [r4, #8]
 801025e:	6861      	ldr	r1, [r4, #4]
 8010260:	eb07 060a 	add.w	r6, r7, sl
 8010264:	42b3      	cmp	r3, r6
 8010266:	b085      	sub	sp, #20
 8010268:	bfb8      	it	lt
 801026a:	3101      	addlt	r1, #1
 801026c:	f7ff fed8 	bl	8010020 <_Balloc>
 8010270:	b930      	cbnz	r0, 8010280 <__multiply+0x44>
 8010272:	4602      	mov	r2, r0
 8010274:	4b44      	ldr	r3, [pc, #272]	; (8010388 <__multiply+0x14c>)
 8010276:	4845      	ldr	r0, [pc, #276]	; (801038c <__multiply+0x150>)
 8010278:	f240 115d 	movw	r1, #349	; 0x15d
 801027c:	f7fe fdc6 	bl	800ee0c <__assert_func>
 8010280:	f100 0514 	add.w	r5, r0, #20
 8010284:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010288:	462b      	mov	r3, r5
 801028a:	2200      	movs	r2, #0
 801028c:	4543      	cmp	r3, r8
 801028e:	d321      	bcc.n	80102d4 <__multiply+0x98>
 8010290:	f104 0314 	add.w	r3, r4, #20
 8010294:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010298:	f109 0314 	add.w	r3, r9, #20
 801029c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80102a0:	9202      	str	r2, [sp, #8]
 80102a2:	1b3a      	subs	r2, r7, r4
 80102a4:	3a15      	subs	r2, #21
 80102a6:	f022 0203 	bic.w	r2, r2, #3
 80102aa:	3204      	adds	r2, #4
 80102ac:	f104 0115 	add.w	r1, r4, #21
 80102b0:	428f      	cmp	r7, r1
 80102b2:	bf38      	it	cc
 80102b4:	2204      	movcc	r2, #4
 80102b6:	9201      	str	r2, [sp, #4]
 80102b8:	9a02      	ldr	r2, [sp, #8]
 80102ba:	9303      	str	r3, [sp, #12]
 80102bc:	429a      	cmp	r2, r3
 80102be:	d80c      	bhi.n	80102da <__multiply+0x9e>
 80102c0:	2e00      	cmp	r6, #0
 80102c2:	dd03      	ble.n	80102cc <__multiply+0x90>
 80102c4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d05a      	beq.n	8010382 <__multiply+0x146>
 80102cc:	6106      	str	r6, [r0, #16]
 80102ce:	b005      	add	sp, #20
 80102d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d4:	f843 2b04 	str.w	r2, [r3], #4
 80102d8:	e7d8      	b.n	801028c <__multiply+0x50>
 80102da:	f8b3 a000 	ldrh.w	sl, [r3]
 80102de:	f1ba 0f00 	cmp.w	sl, #0
 80102e2:	d024      	beq.n	801032e <__multiply+0xf2>
 80102e4:	f104 0e14 	add.w	lr, r4, #20
 80102e8:	46a9      	mov	r9, r5
 80102ea:	f04f 0c00 	mov.w	ip, #0
 80102ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80102f2:	f8d9 1000 	ldr.w	r1, [r9]
 80102f6:	fa1f fb82 	uxth.w	fp, r2
 80102fa:	b289      	uxth	r1, r1
 80102fc:	fb0a 110b 	mla	r1, sl, fp, r1
 8010300:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8010304:	f8d9 2000 	ldr.w	r2, [r9]
 8010308:	4461      	add	r1, ip
 801030a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801030e:	fb0a c20b 	mla	r2, sl, fp, ip
 8010312:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8010316:	b289      	uxth	r1, r1
 8010318:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801031c:	4577      	cmp	r7, lr
 801031e:	f849 1b04 	str.w	r1, [r9], #4
 8010322:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010326:	d8e2      	bhi.n	80102ee <__multiply+0xb2>
 8010328:	9a01      	ldr	r2, [sp, #4]
 801032a:	f845 c002 	str.w	ip, [r5, r2]
 801032e:	9a03      	ldr	r2, [sp, #12]
 8010330:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010334:	3304      	adds	r3, #4
 8010336:	f1b9 0f00 	cmp.w	r9, #0
 801033a:	d020      	beq.n	801037e <__multiply+0x142>
 801033c:	6829      	ldr	r1, [r5, #0]
 801033e:	f104 0c14 	add.w	ip, r4, #20
 8010342:	46ae      	mov	lr, r5
 8010344:	f04f 0a00 	mov.w	sl, #0
 8010348:	f8bc b000 	ldrh.w	fp, [ip]
 801034c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010350:	fb09 220b 	mla	r2, r9, fp, r2
 8010354:	4492      	add	sl, r2
 8010356:	b289      	uxth	r1, r1
 8010358:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801035c:	f84e 1b04 	str.w	r1, [lr], #4
 8010360:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010364:	f8be 1000 	ldrh.w	r1, [lr]
 8010368:	0c12      	lsrs	r2, r2, #16
 801036a:	fb09 1102 	mla	r1, r9, r2, r1
 801036e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010372:	4567      	cmp	r7, ip
 8010374:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010378:	d8e6      	bhi.n	8010348 <__multiply+0x10c>
 801037a:	9a01      	ldr	r2, [sp, #4]
 801037c:	50a9      	str	r1, [r5, r2]
 801037e:	3504      	adds	r5, #4
 8010380:	e79a      	b.n	80102b8 <__multiply+0x7c>
 8010382:	3e01      	subs	r6, #1
 8010384:	e79c      	b.n	80102c0 <__multiply+0x84>
 8010386:	bf00      	nop
 8010388:	08012c3a 	.word	0x08012c3a
 801038c:	08012cb6 	.word	0x08012cb6

08010390 <__pow5mult>:
 8010390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010394:	4615      	mov	r5, r2
 8010396:	f012 0203 	ands.w	r2, r2, #3
 801039a:	4606      	mov	r6, r0
 801039c:	460f      	mov	r7, r1
 801039e:	d007      	beq.n	80103b0 <__pow5mult+0x20>
 80103a0:	4c25      	ldr	r4, [pc, #148]	; (8010438 <__pow5mult+0xa8>)
 80103a2:	3a01      	subs	r2, #1
 80103a4:	2300      	movs	r3, #0
 80103a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80103aa:	f7ff fe9b 	bl	80100e4 <__multadd>
 80103ae:	4607      	mov	r7, r0
 80103b0:	10ad      	asrs	r5, r5, #2
 80103b2:	d03d      	beq.n	8010430 <__pow5mult+0xa0>
 80103b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80103b6:	b97c      	cbnz	r4, 80103d8 <__pow5mult+0x48>
 80103b8:	2010      	movs	r0, #16
 80103ba:	f7fd fc05 	bl	800dbc8 <malloc>
 80103be:	4602      	mov	r2, r0
 80103c0:	6270      	str	r0, [r6, #36]	; 0x24
 80103c2:	b928      	cbnz	r0, 80103d0 <__pow5mult+0x40>
 80103c4:	4b1d      	ldr	r3, [pc, #116]	; (801043c <__pow5mult+0xac>)
 80103c6:	481e      	ldr	r0, [pc, #120]	; (8010440 <__pow5mult+0xb0>)
 80103c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80103cc:	f7fe fd1e 	bl	800ee0c <__assert_func>
 80103d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80103d4:	6004      	str	r4, [r0, #0]
 80103d6:	60c4      	str	r4, [r0, #12]
 80103d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80103dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80103e0:	b94c      	cbnz	r4, 80103f6 <__pow5mult+0x66>
 80103e2:	f240 2171 	movw	r1, #625	; 0x271
 80103e6:	4630      	mov	r0, r6
 80103e8:	f7ff ff12 	bl	8010210 <__i2b>
 80103ec:	2300      	movs	r3, #0
 80103ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80103f2:	4604      	mov	r4, r0
 80103f4:	6003      	str	r3, [r0, #0]
 80103f6:	f04f 0900 	mov.w	r9, #0
 80103fa:	07eb      	lsls	r3, r5, #31
 80103fc:	d50a      	bpl.n	8010414 <__pow5mult+0x84>
 80103fe:	4639      	mov	r1, r7
 8010400:	4622      	mov	r2, r4
 8010402:	4630      	mov	r0, r6
 8010404:	f7ff ff1a 	bl	801023c <__multiply>
 8010408:	4639      	mov	r1, r7
 801040a:	4680      	mov	r8, r0
 801040c:	4630      	mov	r0, r6
 801040e:	f7ff fe47 	bl	80100a0 <_Bfree>
 8010412:	4647      	mov	r7, r8
 8010414:	106d      	asrs	r5, r5, #1
 8010416:	d00b      	beq.n	8010430 <__pow5mult+0xa0>
 8010418:	6820      	ldr	r0, [r4, #0]
 801041a:	b938      	cbnz	r0, 801042c <__pow5mult+0x9c>
 801041c:	4622      	mov	r2, r4
 801041e:	4621      	mov	r1, r4
 8010420:	4630      	mov	r0, r6
 8010422:	f7ff ff0b 	bl	801023c <__multiply>
 8010426:	6020      	str	r0, [r4, #0]
 8010428:	f8c0 9000 	str.w	r9, [r0]
 801042c:	4604      	mov	r4, r0
 801042e:	e7e4      	b.n	80103fa <__pow5mult+0x6a>
 8010430:	4638      	mov	r0, r7
 8010432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010436:	bf00      	nop
 8010438:	08012e08 	.word	0x08012e08
 801043c:	08012b22 	.word	0x08012b22
 8010440:	08012cb6 	.word	0x08012cb6

08010444 <__lshift>:
 8010444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010448:	460c      	mov	r4, r1
 801044a:	6849      	ldr	r1, [r1, #4]
 801044c:	6923      	ldr	r3, [r4, #16]
 801044e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010452:	68a3      	ldr	r3, [r4, #8]
 8010454:	4607      	mov	r7, r0
 8010456:	4691      	mov	r9, r2
 8010458:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801045c:	f108 0601 	add.w	r6, r8, #1
 8010460:	42b3      	cmp	r3, r6
 8010462:	db0b      	blt.n	801047c <__lshift+0x38>
 8010464:	4638      	mov	r0, r7
 8010466:	f7ff fddb 	bl	8010020 <_Balloc>
 801046a:	4605      	mov	r5, r0
 801046c:	b948      	cbnz	r0, 8010482 <__lshift+0x3e>
 801046e:	4602      	mov	r2, r0
 8010470:	4b2a      	ldr	r3, [pc, #168]	; (801051c <__lshift+0xd8>)
 8010472:	482b      	ldr	r0, [pc, #172]	; (8010520 <__lshift+0xdc>)
 8010474:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010478:	f7fe fcc8 	bl	800ee0c <__assert_func>
 801047c:	3101      	adds	r1, #1
 801047e:	005b      	lsls	r3, r3, #1
 8010480:	e7ee      	b.n	8010460 <__lshift+0x1c>
 8010482:	2300      	movs	r3, #0
 8010484:	f100 0114 	add.w	r1, r0, #20
 8010488:	f100 0210 	add.w	r2, r0, #16
 801048c:	4618      	mov	r0, r3
 801048e:	4553      	cmp	r3, sl
 8010490:	db37      	blt.n	8010502 <__lshift+0xbe>
 8010492:	6920      	ldr	r0, [r4, #16]
 8010494:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010498:	f104 0314 	add.w	r3, r4, #20
 801049c:	f019 091f 	ands.w	r9, r9, #31
 80104a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80104a4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80104a8:	d02f      	beq.n	801050a <__lshift+0xc6>
 80104aa:	f1c9 0e20 	rsb	lr, r9, #32
 80104ae:	468a      	mov	sl, r1
 80104b0:	f04f 0c00 	mov.w	ip, #0
 80104b4:	681a      	ldr	r2, [r3, #0]
 80104b6:	fa02 f209 	lsl.w	r2, r2, r9
 80104ba:	ea42 020c 	orr.w	r2, r2, ip
 80104be:	f84a 2b04 	str.w	r2, [sl], #4
 80104c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80104c6:	4298      	cmp	r0, r3
 80104c8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80104cc:	d8f2      	bhi.n	80104b4 <__lshift+0x70>
 80104ce:	1b03      	subs	r3, r0, r4
 80104d0:	3b15      	subs	r3, #21
 80104d2:	f023 0303 	bic.w	r3, r3, #3
 80104d6:	3304      	adds	r3, #4
 80104d8:	f104 0215 	add.w	r2, r4, #21
 80104dc:	4290      	cmp	r0, r2
 80104de:	bf38      	it	cc
 80104e0:	2304      	movcc	r3, #4
 80104e2:	f841 c003 	str.w	ip, [r1, r3]
 80104e6:	f1bc 0f00 	cmp.w	ip, #0
 80104ea:	d001      	beq.n	80104f0 <__lshift+0xac>
 80104ec:	f108 0602 	add.w	r6, r8, #2
 80104f0:	3e01      	subs	r6, #1
 80104f2:	4638      	mov	r0, r7
 80104f4:	612e      	str	r6, [r5, #16]
 80104f6:	4621      	mov	r1, r4
 80104f8:	f7ff fdd2 	bl	80100a0 <_Bfree>
 80104fc:	4628      	mov	r0, r5
 80104fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010502:	f842 0f04 	str.w	r0, [r2, #4]!
 8010506:	3301      	adds	r3, #1
 8010508:	e7c1      	b.n	801048e <__lshift+0x4a>
 801050a:	3904      	subs	r1, #4
 801050c:	f853 2b04 	ldr.w	r2, [r3], #4
 8010510:	f841 2f04 	str.w	r2, [r1, #4]!
 8010514:	4298      	cmp	r0, r3
 8010516:	d8f9      	bhi.n	801050c <__lshift+0xc8>
 8010518:	e7ea      	b.n	80104f0 <__lshift+0xac>
 801051a:	bf00      	nop
 801051c:	08012c3a 	.word	0x08012c3a
 8010520:	08012cb6 	.word	0x08012cb6

08010524 <__mcmp>:
 8010524:	b530      	push	{r4, r5, lr}
 8010526:	6902      	ldr	r2, [r0, #16]
 8010528:	690c      	ldr	r4, [r1, #16]
 801052a:	1b12      	subs	r2, r2, r4
 801052c:	d10e      	bne.n	801054c <__mcmp+0x28>
 801052e:	f100 0314 	add.w	r3, r0, #20
 8010532:	3114      	adds	r1, #20
 8010534:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010538:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801053c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010540:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010544:	42a5      	cmp	r5, r4
 8010546:	d003      	beq.n	8010550 <__mcmp+0x2c>
 8010548:	d305      	bcc.n	8010556 <__mcmp+0x32>
 801054a:	2201      	movs	r2, #1
 801054c:	4610      	mov	r0, r2
 801054e:	bd30      	pop	{r4, r5, pc}
 8010550:	4283      	cmp	r3, r0
 8010552:	d3f3      	bcc.n	801053c <__mcmp+0x18>
 8010554:	e7fa      	b.n	801054c <__mcmp+0x28>
 8010556:	f04f 32ff 	mov.w	r2, #4294967295
 801055a:	e7f7      	b.n	801054c <__mcmp+0x28>

0801055c <__mdiff>:
 801055c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010560:	460c      	mov	r4, r1
 8010562:	4606      	mov	r6, r0
 8010564:	4611      	mov	r1, r2
 8010566:	4620      	mov	r0, r4
 8010568:	4690      	mov	r8, r2
 801056a:	f7ff ffdb 	bl	8010524 <__mcmp>
 801056e:	1e05      	subs	r5, r0, #0
 8010570:	d110      	bne.n	8010594 <__mdiff+0x38>
 8010572:	4629      	mov	r1, r5
 8010574:	4630      	mov	r0, r6
 8010576:	f7ff fd53 	bl	8010020 <_Balloc>
 801057a:	b930      	cbnz	r0, 801058a <__mdiff+0x2e>
 801057c:	4b3a      	ldr	r3, [pc, #232]	; (8010668 <__mdiff+0x10c>)
 801057e:	4602      	mov	r2, r0
 8010580:	f240 2132 	movw	r1, #562	; 0x232
 8010584:	4839      	ldr	r0, [pc, #228]	; (801066c <__mdiff+0x110>)
 8010586:	f7fe fc41 	bl	800ee0c <__assert_func>
 801058a:	2301      	movs	r3, #1
 801058c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010590:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010594:	bfa4      	itt	ge
 8010596:	4643      	movge	r3, r8
 8010598:	46a0      	movge	r8, r4
 801059a:	4630      	mov	r0, r6
 801059c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80105a0:	bfa6      	itte	ge
 80105a2:	461c      	movge	r4, r3
 80105a4:	2500      	movge	r5, #0
 80105a6:	2501      	movlt	r5, #1
 80105a8:	f7ff fd3a 	bl	8010020 <_Balloc>
 80105ac:	b920      	cbnz	r0, 80105b8 <__mdiff+0x5c>
 80105ae:	4b2e      	ldr	r3, [pc, #184]	; (8010668 <__mdiff+0x10c>)
 80105b0:	4602      	mov	r2, r0
 80105b2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80105b6:	e7e5      	b.n	8010584 <__mdiff+0x28>
 80105b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80105bc:	6926      	ldr	r6, [r4, #16]
 80105be:	60c5      	str	r5, [r0, #12]
 80105c0:	f104 0914 	add.w	r9, r4, #20
 80105c4:	f108 0514 	add.w	r5, r8, #20
 80105c8:	f100 0e14 	add.w	lr, r0, #20
 80105cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80105d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80105d4:	f108 0210 	add.w	r2, r8, #16
 80105d8:	46f2      	mov	sl, lr
 80105da:	2100      	movs	r1, #0
 80105dc:	f859 3b04 	ldr.w	r3, [r9], #4
 80105e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80105e4:	fa1f f883 	uxth.w	r8, r3
 80105e8:	fa11 f18b 	uxtah	r1, r1, fp
 80105ec:	0c1b      	lsrs	r3, r3, #16
 80105ee:	eba1 0808 	sub.w	r8, r1, r8
 80105f2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80105f6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80105fa:	fa1f f888 	uxth.w	r8, r8
 80105fe:	1419      	asrs	r1, r3, #16
 8010600:	454e      	cmp	r6, r9
 8010602:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010606:	f84a 3b04 	str.w	r3, [sl], #4
 801060a:	d8e7      	bhi.n	80105dc <__mdiff+0x80>
 801060c:	1b33      	subs	r3, r6, r4
 801060e:	3b15      	subs	r3, #21
 8010610:	f023 0303 	bic.w	r3, r3, #3
 8010614:	3304      	adds	r3, #4
 8010616:	3415      	adds	r4, #21
 8010618:	42a6      	cmp	r6, r4
 801061a:	bf38      	it	cc
 801061c:	2304      	movcc	r3, #4
 801061e:	441d      	add	r5, r3
 8010620:	4473      	add	r3, lr
 8010622:	469e      	mov	lr, r3
 8010624:	462e      	mov	r6, r5
 8010626:	4566      	cmp	r6, ip
 8010628:	d30e      	bcc.n	8010648 <__mdiff+0xec>
 801062a:	f10c 0203 	add.w	r2, ip, #3
 801062e:	1b52      	subs	r2, r2, r5
 8010630:	f022 0203 	bic.w	r2, r2, #3
 8010634:	3d03      	subs	r5, #3
 8010636:	45ac      	cmp	ip, r5
 8010638:	bf38      	it	cc
 801063a:	2200      	movcc	r2, #0
 801063c:	441a      	add	r2, r3
 801063e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8010642:	b17b      	cbz	r3, 8010664 <__mdiff+0x108>
 8010644:	6107      	str	r7, [r0, #16]
 8010646:	e7a3      	b.n	8010590 <__mdiff+0x34>
 8010648:	f856 8b04 	ldr.w	r8, [r6], #4
 801064c:	fa11 f288 	uxtah	r2, r1, r8
 8010650:	1414      	asrs	r4, r2, #16
 8010652:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010656:	b292      	uxth	r2, r2
 8010658:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801065c:	f84e 2b04 	str.w	r2, [lr], #4
 8010660:	1421      	asrs	r1, r4, #16
 8010662:	e7e0      	b.n	8010626 <__mdiff+0xca>
 8010664:	3f01      	subs	r7, #1
 8010666:	e7ea      	b.n	801063e <__mdiff+0xe2>
 8010668:	08012c3a 	.word	0x08012c3a
 801066c:	08012cb6 	.word	0x08012cb6

08010670 <__d2b>:
 8010670:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010674:	4689      	mov	r9, r1
 8010676:	2101      	movs	r1, #1
 8010678:	ec57 6b10 	vmov	r6, r7, d0
 801067c:	4690      	mov	r8, r2
 801067e:	f7ff fccf 	bl	8010020 <_Balloc>
 8010682:	4604      	mov	r4, r0
 8010684:	b930      	cbnz	r0, 8010694 <__d2b+0x24>
 8010686:	4602      	mov	r2, r0
 8010688:	4b25      	ldr	r3, [pc, #148]	; (8010720 <__d2b+0xb0>)
 801068a:	4826      	ldr	r0, [pc, #152]	; (8010724 <__d2b+0xb4>)
 801068c:	f240 310a 	movw	r1, #778	; 0x30a
 8010690:	f7fe fbbc 	bl	800ee0c <__assert_func>
 8010694:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010698:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801069c:	bb35      	cbnz	r5, 80106ec <__d2b+0x7c>
 801069e:	2e00      	cmp	r6, #0
 80106a0:	9301      	str	r3, [sp, #4]
 80106a2:	d028      	beq.n	80106f6 <__d2b+0x86>
 80106a4:	4668      	mov	r0, sp
 80106a6:	9600      	str	r6, [sp, #0]
 80106a8:	f7ff fd82 	bl	80101b0 <__lo0bits>
 80106ac:	9900      	ldr	r1, [sp, #0]
 80106ae:	b300      	cbz	r0, 80106f2 <__d2b+0x82>
 80106b0:	9a01      	ldr	r2, [sp, #4]
 80106b2:	f1c0 0320 	rsb	r3, r0, #32
 80106b6:	fa02 f303 	lsl.w	r3, r2, r3
 80106ba:	430b      	orrs	r3, r1
 80106bc:	40c2      	lsrs	r2, r0
 80106be:	6163      	str	r3, [r4, #20]
 80106c0:	9201      	str	r2, [sp, #4]
 80106c2:	9b01      	ldr	r3, [sp, #4]
 80106c4:	61a3      	str	r3, [r4, #24]
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	bf14      	ite	ne
 80106ca:	2202      	movne	r2, #2
 80106cc:	2201      	moveq	r2, #1
 80106ce:	6122      	str	r2, [r4, #16]
 80106d0:	b1d5      	cbz	r5, 8010708 <__d2b+0x98>
 80106d2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80106d6:	4405      	add	r5, r0
 80106d8:	f8c9 5000 	str.w	r5, [r9]
 80106dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80106e0:	f8c8 0000 	str.w	r0, [r8]
 80106e4:	4620      	mov	r0, r4
 80106e6:	b003      	add	sp, #12
 80106e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80106ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80106f0:	e7d5      	b.n	801069e <__d2b+0x2e>
 80106f2:	6161      	str	r1, [r4, #20]
 80106f4:	e7e5      	b.n	80106c2 <__d2b+0x52>
 80106f6:	a801      	add	r0, sp, #4
 80106f8:	f7ff fd5a 	bl	80101b0 <__lo0bits>
 80106fc:	9b01      	ldr	r3, [sp, #4]
 80106fe:	6163      	str	r3, [r4, #20]
 8010700:	2201      	movs	r2, #1
 8010702:	6122      	str	r2, [r4, #16]
 8010704:	3020      	adds	r0, #32
 8010706:	e7e3      	b.n	80106d0 <__d2b+0x60>
 8010708:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801070c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010710:	f8c9 0000 	str.w	r0, [r9]
 8010714:	6918      	ldr	r0, [r3, #16]
 8010716:	f7ff fd2b 	bl	8010170 <__hi0bits>
 801071a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801071e:	e7df      	b.n	80106e0 <__d2b+0x70>
 8010720:	08012c3a 	.word	0x08012c3a
 8010724:	08012cb6 	.word	0x08012cb6

08010728 <_realloc_r>:
 8010728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801072c:	4680      	mov	r8, r0
 801072e:	4614      	mov	r4, r2
 8010730:	460e      	mov	r6, r1
 8010732:	b921      	cbnz	r1, 801073e <_realloc_r+0x16>
 8010734:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010738:	4611      	mov	r1, r2
 801073a:	f7fd bb17 	b.w	800dd6c <_malloc_r>
 801073e:	b92a      	cbnz	r2, 801074c <_realloc_r+0x24>
 8010740:	f7fd faa8 	bl	800dc94 <_free_r>
 8010744:	4625      	mov	r5, r4
 8010746:	4628      	mov	r0, r5
 8010748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801074c:	f000 ff6a 	bl	8011624 <_malloc_usable_size_r>
 8010750:	4284      	cmp	r4, r0
 8010752:	4607      	mov	r7, r0
 8010754:	d802      	bhi.n	801075c <_realloc_r+0x34>
 8010756:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801075a:	d812      	bhi.n	8010782 <_realloc_r+0x5a>
 801075c:	4621      	mov	r1, r4
 801075e:	4640      	mov	r0, r8
 8010760:	f7fd fb04 	bl	800dd6c <_malloc_r>
 8010764:	4605      	mov	r5, r0
 8010766:	2800      	cmp	r0, #0
 8010768:	d0ed      	beq.n	8010746 <_realloc_r+0x1e>
 801076a:	42bc      	cmp	r4, r7
 801076c:	4622      	mov	r2, r4
 801076e:	4631      	mov	r1, r6
 8010770:	bf28      	it	cs
 8010772:	463a      	movcs	r2, r7
 8010774:	f7fd fa48 	bl	800dc08 <memcpy>
 8010778:	4631      	mov	r1, r6
 801077a:	4640      	mov	r0, r8
 801077c:	f7fd fa8a 	bl	800dc94 <_free_r>
 8010780:	e7e1      	b.n	8010746 <_realloc_r+0x1e>
 8010782:	4635      	mov	r5, r6
 8010784:	e7df      	b.n	8010746 <_realloc_r+0x1e>

08010786 <__ssputs_r>:
 8010786:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801078a:	688e      	ldr	r6, [r1, #8]
 801078c:	429e      	cmp	r6, r3
 801078e:	4682      	mov	sl, r0
 8010790:	460c      	mov	r4, r1
 8010792:	4690      	mov	r8, r2
 8010794:	461f      	mov	r7, r3
 8010796:	d838      	bhi.n	801080a <__ssputs_r+0x84>
 8010798:	898a      	ldrh	r2, [r1, #12]
 801079a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801079e:	d032      	beq.n	8010806 <__ssputs_r+0x80>
 80107a0:	6825      	ldr	r5, [r4, #0]
 80107a2:	6909      	ldr	r1, [r1, #16]
 80107a4:	eba5 0901 	sub.w	r9, r5, r1
 80107a8:	6965      	ldr	r5, [r4, #20]
 80107aa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80107ae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80107b2:	3301      	adds	r3, #1
 80107b4:	444b      	add	r3, r9
 80107b6:	106d      	asrs	r5, r5, #1
 80107b8:	429d      	cmp	r5, r3
 80107ba:	bf38      	it	cc
 80107bc:	461d      	movcc	r5, r3
 80107be:	0553      	lsls	r3, r2, #21
 80107c0:	d531      	bpl.n	8010826 <__ssputs_r+0xa0>
 80107c2:	4629      	mov	r1, r5
 80107c4:	f7fd fad2 	bl	800dd6c <_malloc_r>
 80107c8:	4606      	mov	r6, r0
 80107ca:	b950      	cbnz	r0, 80107e2 <__ssputs_r+0x5c>
 80107cc:	230c      	movs	r3, #12
 80107ce:	f8ca 3000 	str.w	r3, [sl]
 80107d2:	89a3      	ldrh	r3, [r4, #12]
 80107d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80107d8:	81a3      	strh	r3, [r4, #12]
 80107da:	f04f 30ff 	mov.w	r0, #4294967295
 80107de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80107e2:	6921      	ldr	r1, [r4, #16]
 80107e4:	464a      	mov	r2, r9
 80107e6:	f7fd fa0f 	bl	800dc08 <memcpy>
 80107ea:	89a3      	ldrh	r3, [r4, #12]
 80107ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80107f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80107f4:	81a3      	strh	r3, [r4, #12]
 80107f6:	6126      	str	r6, [r4, #16]
 80107f8:	6165      	str	r5, [r4, #20]
 80107fa:	444e      	add	r6, r9
 80107fc:	eba5 0509 	sub.w	r5, r5, r9
 8010800:	6026      	str	r6, [r4, #0]
 8010802:	60a5      	str	r5, [r4, #8]
 8010804:	463e      	mov	r6, r7
 8010806:	42be      	cmp	r6, r7
 8010808:	d900      	bls.n	801080c <__ssputs_r+0x86>
 801080a:	463e      	mov	r6, r7
 801080c:	6820      	ldr	r0, [r4, #0]
 801080e:	4632      	mov	r2, r6
 8010810:	4641      	mov	r1, r8
 8010812:	f7fd fa07 	bl	800dc24 <memmove>
 8010816:	68a3      	ldr	r3, [r4, #8]
 8010818:	1b9b      	subs	r3, r3, r6
 801081a:	60a3      	str	r3, [r4, #8]
 801081c:	6823      	ldr	r3, [r4, #0]
 801081e:	4433      	add	r3, r6
 8010820:	6023      	str	r3, [r4, #0]
 8010822:	2000      	movs	r0, #0
 8010824:	e7db      	b.n	80107de <__ssputs_r+0x58>
 8010826:	462a      	mov	r2, r5
 8010828:	f7ff ff7e 	bl	8010728 <_realloc_r>
 801082c:	4606      	mov	r6, r0
 801082e:	2800      	cmp	r0, #0
 8010830:	d1e1      	bne.n	80107f6 <__ssputs_r+0x70>
 8010832:	6921      	ldr	r1, [r4, #16]
 8010834:	4650      	mov	r0, sl
 8010836:	f7fd fa2d 	bl	800dc94 <_free_r>
 801083a:	e7c7      	b.n	80107cc <__ssputs_r+0x46>

0801083c <_svfiprintf_r>:
 801083c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010840:	4698      	mov	r8, r3
 8010842:	898b      	ldrh	r3, [r1, #12]
 8010844:	061b      	lsls	r3, r3, #24
 8010846:	b09d      	sub	sp, #116	; 0x74
 8010848:	4607      	mov	r7, r0
 801084a:	460d      	mov	r5, r1
 801084c:	4614      	mov	r4, r2
 801084e:	d50e      	bpl.n	801086e <_svfiprintf_r+0x32>
 8010850:	690b      	ldr	r3, [r1, #16]
 8010852:	b963      	cbnz	r3, 801086e <_svfiprintf_r+0x32>
 8010854:	2140      	movs	r1, #64	; 0x40
 8010856:	f7fd fa89 	bl	800dd6c <_malloc_r>
 801085a:	6028      	str	r0, [r5, #0]
 801085c:	6128      	str	r0, [r5, #16]
 801085e:	b920      	cbnz	r0, 801086a <_svfiprintf_r+0x2e>
 8010860:	230c      	movs	r3, #12
 8010862:	603b      	str	r3, [r7, #0]
 8010864:	f04f 30ff 	mov.w	r0, #4294967295
 8010868:	e0d1      	b.n	8010a0e <_svfiprintf_r+0x1d2>
 801086a:	2340      	movs	r3, #64	; 0x40
 801086c:	616b      	str	r3, [r5, #20]
 801086e:	2300      	movs	r3, #0
 8010870:	9309      	str	r3, [sp, #36]	; 0x24
 8010872:	2320      	movs	r3, #32
 8010874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010878:	f8cd 800c 	str.w	r8, [sp, #12]
 801087c:	2330      	movs	r3, #48	; 0x30
 801087e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010a28 <_svfiprintf_r+0x1ec>
 8010882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010886:	f04f 0901 	mov.w	r9, #1
 801088a:	4623      	mov	r3, r4
 801088c:	469a      	mov	sl, r3
 801088e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010892:	b10a      	cbz	r2, 8010898 <_svfiprintf_r+0x5c>
 8010894:	2a25      	cmp	r2, #37	; 0x25
 8010896:	d1f9      	bne.n	801088c <_svfiprintf_r+0x50>
 8010898:	ebba 0b04 	subs.w	fp, sl, r4
 801089c:	d00b      	beq.n	80108b6 <_svfiprintf_r+0x7a>
 801089e:	465b      	mov	r3, fp
 80108a0:	4622      	mov	r2, r4
 80108a2:	4629      	mov	r1, r5
 80108a4:	4638      	mov	r0, r7
 80108a6:	f7ff ff6e 	bl	8010786 <__ssputs_r>
 80108aa:	3001      	adds	r0, #1
 80108ac:	f000 80aa 	beq.w	8010a04 <_svfiprintf_r+0x1c8>
 80108b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80108b2:	445a      	add	r2, fp
 80108b4:	9209      	str	r2, [sp, #36]	; 0x24
 80108b6:	f89a 3000 	ldrb.w	r3, [sl]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	f000 80a2 	beq.w	8010a04 <_svfiprintf_r+0x1c8>
 80108c0:	2300      	movs	r3, #0
 80108c2:	f04f 32ff 	mov.w	r2, #4294967295
 80108c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80108ca:	f10a 0a01 	add.w	sl, sl, #1
 80108ce:	9304      	str	r3, [sp, #16]
 80108d0:	9307      	str	r3, [sp, #28]
 80108d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80108d6:	931a      	str	r3, [sp, #104]	; 0x68
 80108d8:	4654      	mov	r4, sl
 80108da:	2205      	movs	r2, #5
 80108dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108e0:	4851      	ldr	r0, [pc, #324]	; (8010a28 <_svfiprintf_r+0x1ec>)
 80108e2:	f7ef fc8d 	bl	8000200 <memchr>
 80108e6:	9a04      	ldr	r2, [sp, #16]
 80108e8:	b9d8      	cbnz	r0, 8010922 <_svfiprintf_r+0xe6>
 80108ea:	06d0      	lsls	r0, r2, #27
 80108ec:	bf44      	itt	mi
 80108ee:	2320      	movmi	r3, #32
 80108f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108f4:	0711      	lsls	r1, r2, #28
 80108f6:	bf44      	itt	mi
 80108f8:	232b      	movmi	r3, #43	; 0x2b
 80108fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80108fe:	f89a 3000 	ldrb.w	r3, [sl]
 8010902:	2b2a      	cmp	r3, #42	; 0x2a
 8010904:	d015      	beq.n	8010932 <_svfiprintf_r+0xf6>
 8010906:	9a07      	ldr	r2, [sp, #28]
 8010908:	4654      	mov	r4, sl
 801090a:	2000      	movs	r0, #0
 801090c:	f04f 0c0a 	mov.w	ip, #10
 8010910:	4621      	mov	r1, r4
 8010912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010916:	3b30      	subs	r3, #48	; 0x30
 8010918:	2b09      	cmp	r3, #9
 801091a:	d94e      	bls.n	80109ba <_svfiprintf_r+0x17e>
 801091c:	b1b0      	cbz	r0, 801094c <_svfiprintf_r+0x110>
 801091e:	9207      	str	r2, [sp, #28]
 8010920:	e014      	b.n	801094c <_svfiprintf_r+0x110>
 8010922:	eba0 0308 	sub.w	r3, r0, r8
 8010926:	fa09 f303 	lsl.w	r3, r9, r3
 801092a:	4313      	orrs	r3, r2
 801092c:	9304      	str	r3, [sp, #16]
 801092e:	46a2      	mov	sl, r4
 8010930:	e7d2      	b.n	80108d8 <_svfiprintf_r+0x9c>
 8010932:	9b03      	ldr	r3, [sp, #12]
 8010934:	1d19      	adds	r1, r3, #4
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	9103      	str	r1, [sp, #12]
 801093a:	2b00      	cmp	r3, #0
 801093c:	bfbb      	ittet	lt
 801093e:	425b      	neglt	r3, r3
 8010940:	f042 0202 	orrlt.w	r2, r2, #2
 8010944:	9307      	strge	r3, [sp, #28]
 8010946:	9307      	strlt	r3, [sp, #28]
 8010948:	bfb8      	it	lt
 801094a:	9204      	strlt	r2, [sp, #16]
 801094c:	7823      	ldrb	r3, [r4, #0]
 801094e:	2b2e      	cmp	r3, #46	; 0x2e
 8010950:	d10c      	bne.n	801096c <_svfiprintf_r+0x130>
 8010952:	7863      	ldrb	r3, [r4, #1]
 8010954:	2b2a      	cmp	r3, #42	; 0x2a
 8010956:	d135      	bne.n	80109c4 <_svfiprintf_r+0x188>
 8010958:	9b03      	ldr	r3, [sp, #12]
 801095a:	1d1a      	adds	r2, r3, #4
 801095c:	681b      	ldr	r3, [r3, #0]
 801095e:	9203      	str	r2, [sp, #12]
 8010960:	2b00      	cmp	r3, #0
 8010962:	bfb8      	it	lt
 8010964:	f04f 33ff 	movlt.w	r3, #4294967295
 8010968:	3402      	adds	r4, #2
 801096a:	9305      	str	r3, [sp, #20]
 801096c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010a38 <_svfiprintf_r+0x1fc>
 8010970:	7821      	ldrb	r1, [r4, #0]
 8010972:	2203      	movs	r2, #3
 8010974:	4650      	mov	r0, sl
 8010976:	f7ef fc43 	bl	8000200 <memchr>
 801097a:	b140      	cbz	r0, 801098e <_svfiprintf_r+0x152>
 801097c:	2340      	movs	r3, #64	; 0x40
 801097e:	eba0 000a 	sub.w	r0, r0, sl
 8010982:	fa03 f000 	lsl.w	r0, r3, r0
 8010986:	9b04      	ldr	r3, [sp, #16]
 8010988:	4303      	orrs	r3, r0
 801098a:	3401      	adds	r4, #1
 801098c:	9304      	str	r3, [sp, #16]
 801098e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010992:	4826      	ldr	r0, [pc, #152]	; (8010a2c <_svfiprintf_r+0x1f0>)
 8010994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010998:	2206      	movs	r2, #6
 801099a:	f7ef fc31 	bl	8000200 <memchr>
 801099e:	2800      	cmp	r0, #0
 80109a0:	d038      	beq.n	8010a14 <_svfiprintf_r+0x1d8>
 80109a2:	4b23      	ldr	r3, [pc, #140]	; (8010a30 <_svfiprintf_r+0x1f4>)
 80109a4:	bb1b      	cbnz	r3, 80109ee <_svfiprintf_r+0x1b2>
 80109a6:	9b03      	ldr	r3, [sp, #12]
 80109a8:	3307      	adds	r3, #7
 80109aa:	f023 0307 	bic.w	r3, r3, #7
 80109ae:	3308      	adds	r3, #8
 80109b0:	9303      	str	r3, [sp, #12]
 80109b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109b4:	4433      	add	r3, r6
 80109b6:	9309      	str	r3, [sp, #36]	; 0x24
 80109b8:	e767      	b.n	801088a <_svfiprintf_r+0x4e>
 80109ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80109be:	460c      	mov	r4, r1
 80109c0:	2001      	movs	r0, #1
 80109c2:	e7a5      	b.n	8010910 <_svfiprintf_r+0xd4>
 80109c4:	2300      	movs	r3, #0
 80109c6:	3401      	adds	r4, #1
 80109c8:	9305      	str	r3, [sp, #20]
 80109ca:	4619      	mov	r1, r3
 80109cc:	f04f 0c0a 	mov.w	ip, #10
 80109d0:	4620      	mov	r0, r4
 80109d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80109d6:	3a30      	subs	r2, #48	; 0x30
 80109d8:	2a09      	cmp	r2, #9
 80109da:	d903      	bls.n	80109e4 <_svfiprintf_r+0x1a8>
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d0c5      	beq.n	801096c <_svfiprintf_r+0x130>
 80109e0:	9105      	str	r1, [sp, #20]
 80109e2:	e7c3      	b.n	801096c <_svfiprintf_r+0x130>
 80109e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80109e8:	4604      	mov	r4, r0
 80109ea:	2301      	movs	r3, #1
 80109ec:	e7f0      	b.n	80109d0 <_svfiprintf_r+0x194>
 80109ee:	ab03      	add	r3, sp, #12
 80109f0:	9300      	str	r3, [sp, #0]
 80109f2:	462a      	mov	r2, r5
 80109f4:	4b0f      	ldr	r3, [pc, #60]	; (8010a34 <_svfiprintf_r+0x1f8>)
 80109f6:	a904      	add	r1, sp, #16
 80109f8:	4638      	mov	r0, r7
 80109fa:	f7fd facb 	bl	800df94 <_printf_float>
 80109fe:	1c42      	adds	r2, r0, #1
 8010a00:	4606      	mov	r6, r0
 8010a02:	d1d6      	bne.n	80109b2 <_svfiprintf_r+0x176>
 8010a04:	89ab      	ldrh	r3, [r5, #12]
 8010a06:	065b      	lsls	r3, r3, #25
 8010a08:	f53f af2c 	bmi.w	8010864 <_svfiprintf_r+0x28>
 8010a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010a0e:	b01d      	add	sp, #116	; 0x74
 8010a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a14:	ab03      	add	r3, sp, #12
 8010a16:	9300      	str	r3, [sp, #0]
 8010a18:	462a      	mov	r2, r5
 8010a1a:	4b06      	ldr	r3, [pc, #24]	; (8010a34 <_svfiprintf_r+0x1f8>)
 8010a1c:	a904      	add	r1, sp, #16
 8010a1e:	4638      	mov	r0, r7
 8010a20:	f7fd fd5c 	bl	800e4dc <_printf_i>
 8010a24:	e7eb      	b.n	80109fe <_svfiprintf_r+0x1c2>
 8010a26:	bf00      	nop
 8010a28:	08012e14 	.word	0x08012e14
 8010a2c:	08012e1e 	.word	0x08012e1e
 8010a30:	0800df95 	.word	0x0800df95
 8010a34:	08010787 	.word	0x08010787
 8010a38:	08012e1a 	.word	0x08012e1a

08010a3c <_sungetc_r>:
 8010a3c:	b538      	push	{r3, r4, r5, lr}
 8010a3e:	1c4b      	adds	r3, r1, #1
 8010a40:	4614      	mov	r4, r2
 8010a42:	d103      	bne.n	8010a4c <_sungetc_r+0x10>
 8010a44:	f04f 35ff 	mov.w	r5, #4294967295
 8010a48:	4628      	mov	r0, r5
 8010a4a:	bd38      	pop	{r3, r4, r5, pc}
 8010a4c:	8993      	ldrh	r3, [r2, #12]
 8010a4e:	f023 0320 	bic.w	r3, r3, #32
 8010a52:	8193      	strh	r3, [r2, #12]
 8010a54:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010a56:	6852      	ldr	r2, [r2, #4]
 8010a58:	b2cd      	uxtb	r5, r1
 8010a5a:	b18b      	cbz	r3, 8010a80 <_sungetc_r+0x44>
 8010a5c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8010a5e:	4293      	cmp	r3, r2
 8010a60:	dd08      	ble.n	8010a74 <_sungetc_r+0x38>
 8010a62:	6823      	ldr	r3, [r4, #0]
 8010a64:	1e5a      	subs	r2, r3, #1
 8010a66:	6022      	str	r2, [r4, #0]
 8010a68:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010a6c:	6863      	ldr	r3, [r4, #4]
 8010a6e:	3301      	adds	r3, #1
 8010a70:	6063      	str	r3, [r4, #4]
 8010a72:	e7e9      	b.n	8010a48 <_sungetc_r+0xc>
 8010a74:	4621      	mov	r1, r4
 8010a76:	f000 fd65 	bl	8011544 <__submore>
 8010a7a:	2800      	cmp	r0, #0
 8010a7c:	d0f1      	beq.n	8010a62 <_sungetc_r+0x26>
 8010a7e:	e7e1      	b.n	8010a44 <_sungetc_r+0x8>
 8010a80:	6921      	ldr	r1, [r4, #16]
 8010a82:	6823      	ldr	r3, [r4, #0]
 8010a84:	b151      	cbz	r1, 8010a9c <_sungetc_r+0x60>
 8010a86:	4299      	cmp	r1, r3
 8010a88:	d208      	bcs.n	8010a9c <_sungetc_r+0x60>
 8010a8a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8010a8e:	42a9      	cmp	r1, r5
 8010a90:	d104      	bne.n	8010a9c <_sungetc_r+0x60>
 8010a92:	3b01      	subs	r3, #1
 8010a94:	3201      	adds	r2, #1
 8010a96:	6023      	str	r3, [r4, #0]
 8010a98:	6062      	str	r2, [r4, #4]
 8010a9a:	e7d5      	b.n	8010a48 <_sungetc_r+0xc>
 8010a9c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8010aa0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010aa4:	6363      	str	r3, [r4, #52]	; 0x34
 8010aa6:	2303      	movs	r3, #3
 8010aa8:	63a3      	str	r3, [r4, #56]	; 0x38
 8010aaa:	4623      	mov	r3, r4
 8010aac:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010ab0:	6023      	str	r3, [r4, #0]
 8010ab2:	2301      	movs	r3, #1
 8010ab4:	e7dc      	b.n	8010a70 <_sungetc_r+0x34>

08010ab6 <__ssrefill_r>:
 8010ab6:	b510      	push	{r4, lr}
 8010ab8:	460c      	mov	r4, r1
 8010aba:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8010abc:	b169      	cbz	r1, 8010ada <__ssrefill_r+0x24>
 8010abe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010ac2:	4299      	cmp	r1, r3
 8010ac4:	d001      	beq.n	8010aca <__ssrefill_r+0x14>
 8010ac6:	f7fd f8e5 	bl	800dc94 <_free_r>
 8010aca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010acc:	6063      	str	r3, [r4, #4]
 8010ace:	2000      	movs	r0, #0
 8010ad0:	6360      	str	r0, [r4, #52]	; 0x34
 8010ad2:	b113      	cbz	r3, 8010ada <__ssrefill_r+0x24>
 8010ad4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8010ad6:	6023      	str	r3, [r4, #0]
 8010ad8:	bd10      	pop	{r4, pc}
 8010ada:	6923      	ldr	r3, [r4, #16]
 8010adc:	6023      	str	r3, [r4, #0]
 8010ade:	2300      	movs	r3, #0
 8010ae0:	6063      	str	r3, [r4, #4]
 8010ae2:	89a3      	ldrh	r3, [r4, #12]
 8010ae4:	f043 0320 	orr.w	r3, r3, #32
 8010ae8:	81a3      	strh	r3, [r4, #12]
 8010aea:	f04f 30ff 	mov.w	r0, #4294967295
 8010aee:	e7f3      	b.n	8010ad8 <__ssrefill_r+0x22>

08010af0 <__ssvfiscanf_r>:
 8010af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010af4:	460c      	mov	r4, r1
 8010af6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8010afa:	2100      	movs	r1, #0
 8010afc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8010b00:	49a6      	ldr	r1, [pc, #664]	; (8010d9c <__ssvfiscanf_r+0x2ac>)
 8010b02:	91a0      	str	r1, [sp, #640]	; 0x280
 8010b04:	f10d 0804 	add.w	r8, sp, #4
 8010b08:	49a5      	ldr	r1, [pc, #660]	; (8010da0 <__ssvfiscanf_r+0x2b0>)
 8010b0a:	4fa6      	ldr	r7, [pc, #664]	; (8010da4 <__ssvfiscanf_r+0x2b4>)
 8010b0c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8010da8 <__ssvfiscanf_r+0x2b8>
 8010b10:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8010b14:	4606      	mov	r6, r0
 8010b16:	91a1      	str	r1, [sp, #644]	; 0x284
 8010b18:	9300      	str	r3, [sp, #0]
 8010b1a:	7813      	ldrb	r3, [r2, #0]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	f000 815a 	beq.w	8010dd6 <__ssvfiscanf_r+0x2e6>
 8010b22:	5dd9      	ldrb	r1, [r3, r7]
 8010b24:	f011 0108 	ands.w	r1, r1, #8
 8010b28:	f102 0501 	add.w	r5, r2, #1
 8010b2c:	d019      	beq.n	8010b62 <__ssvfiscanf_r+0x72>
 8010b2e:	6863      	ldr	r3, [r4, #4]
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	dd0f      	ble.n	8010b54 <__ssvfiscanf_r+0x64>
 8010b34:	6823      	ldr	r3, [r4, #0]
 8010b36:	781a      	ldrb	r2, [r3, #0]
 8010b38:	5cba      	ldrb	r2, [r7, r2]
 8010b3a:	0712      	lsls	r2, r2, #28
 8010b3c:	d401      	bmi.n	8010b42 <__ssvfiscanf_r+0x52>
 8010b3e:	462a      	mov	r2, r5
 8010b40:	e7eb      	b.n	8010b1a <__ssvfiscanf_r+0x2a>
 8010b42:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010b44:	3201      	adds	r2, #1
 8010b46:	9245      	str	r2, [sp, #276]	; 0x114
 8010b48:	6862      	ldr	r2, [r4, #4]
 8010b4a:	3301      	adds	r3, #1
 8010b4c:	3a01      	subs	r2, #1
 8010b4e:	6062      	str	r2, [r4, #4]
 8010b50:	6023      	str	r3, [r4, #0]
 8010b52:	e7ec      	b.n	8010b2e <__ssvfiscanf_r+0x3e>
 8010b54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010b56:	4621      	mov	r1, r4
 8010b58:	4630      	mov	r0, r6
 8010b5a:	4798      	blx	r3
 8010b5c:	2800      	cmp	r0, #0
 8010b5e:	d0e9      	beq.n	8010b34 <__ssvfiscanf_r+0x44>
 8010b60:	e7ed      	b.n	8010b3e <__ssvfiscanf_r+0x4e>
 8010b62:	2b25      	cmp	r3, #37	; 0x25
 8010b64:	d012      	beq.n	8010b8c <__ssvfiscanf_r+0x9c>
 8010b66:	469a      	mov	sl, r3
 8010b68:	6863      	ldr	r3, [r4, #4]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	f340 8091 	ble.w	8010c92 <__ssvfiscanf_r+0x1a2>
 8010b70:	6822      	ldr	r2, [r4, #0]
 8010b72:	7813      	ldrb	r3, [r2, #0]
 8010b74:	4553      	cmp	r3, sl
 8010b76:	f040 812e 	bne.w	8010dd6 <__ssvfiscanf_r+0x2e6>
 8010b7a:	6863      	ldr	r3, [r4, #4]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	6063      	str	r3, [r4, #4]
 8010b80:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8010b82:	3201      	adds	r2, #1
 8010b84:	3301      	adds	r3, #1
 8010b86:	6022      	str	r2, [r4, #0]
 8010b88:	9345      	str	r3, [sp, #276]	; 0x114
 8010b8a:	e7d8      	b.n	8010b3e <__ssvfiscanf_r+0x4e>
 8010b8c:	9141      	str	r1, [sp, #260]	; 0x104
 8010b8e:	9143      	str	r1, [sp, #268]	; 0x10c
 8010b90:	7853      	ldrb	r3, [r2, #1]
 8010b92:	2b2a      	cmp	r3, #42	; 0x2a
 8010b94:	bf02      	ittt	eq
 8010b96:	2310      	moveq	r3, #16
 8010b98:	1c95      	addeq	r5, r2, #2
 8010b9a:	9341      	streq	r3, [sp, #260]	; 0x104
 8010b9c:	220a      	movs	r2, #10
 8010b9e:	46aa      	mov	sl, r5
 8010ba0:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8010ba4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8010ba8:	2b09      	cmp	r3, #9
 8010baa:	d91d      	bls.n	8010be8 <__ssvfiscanf_r+0xf8>
 8010bac:	487e      	ldr	r0, [pc, #504]	; (8010da8 <__ssvfiscanf_r+0x2b8>)
 8010bae:	2203      	movs	r2, #3
 8010bb0:	f7ef fb26 	bl	8000200 <memchr>
 8010bb4:	b140      	cbz	r0, 8010bc8 <__ssvfiscanf_r+0xd8>
 8010bb6:	2301      	movs	r3, #1
 8010bb8:	eba0 0009 	sub.w	r0, r0, r9
 8010bbc:	fa03 f000 	lsl.w	r0, r3, r0
 8010bc0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010bc2:	4318      	orrs	r0, r3
 8010bc4:	9041      	str	r0, [sp, #260]	; 0x104
 8010bc6:	4655      	mov	r5, sl
 8010bc8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010bcc:	2b78      	cmp	r3, #120	; 0x78
 8010bce:	d806      	bhi.n	8010bde <__ssvfiscanf_r+0xee>
 8010bd0:	2b57      	cmp	r3, #87	; 0x57
 8010bd2:	d810      	bhi.n	8010bf6 <__ssvfiscanf_r+0x106>
 8010bd4:	2b25      	cmp	r3, #37	; 0x25
 8010bd6:	d0c6      	beq.n	8010b66 <__ssvfiscanf_r+0x76>
 8010bd8:	d856      	bhi.n	8010c88 <__ssvfiscanf_r+0x198>
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d064      	beq.n	8010ca8 <__ssvfiscanf_r+0x1b8>
 8010bde:	2303      	movs	r3, #3
 8010be0:	9347      	str	r3, [sp, #284]	; 0x11c
 8010be2:	230a      	movs	r3, #10
 8010be4:	9342      	str	r3, [sp, #264]	; 0x108
 8010be6:	e071      	b.n	8010ccc <__ssvfiscanf_r+0x1dc>
 8010be8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8010bea:	fb02 1103 	mla	r1, r2, r3, r1
 8010bee:	3930      	subs	r1, #48	; 0x30
 8010bf0:	9143      	str	r1, [sp, #268]	; 0x10c
 8010bf2:	4655      	mov	r5, sl
 8010bf4:	e7d3      	b.n	8010b9e <__ssvfiscanf_r+0xae>
 8010bf6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8010bfa:	2a20      	cmp	r2, #32
 8010bfc:	d8ef      	bhi.n	8010bde <__ssvfiscanf_r+0xee>
 8010bfe:	a101      	add	r1, pc, #4	; (adr r1, 8010c04 <__ssvfiscanf_r+0x114>)
 8010c00:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010c04:	08010cb7 	.word	0x08010cb7
 8010c08:	08010bdf 	.word	0x08010bdf
 8010c0c:	08010bdf 	.word	0x08010bdf
 8010c10:	08010d15 	.word	0x08010d15
 8010c14:	08010bdf 	.word	0x08010bdf
 8010c18:	08010bdf 	.word	0x08010bdf
 8010c1c:	08010bdf 	.word	0x08010bdf
 8010c20:	08010bdf 	.word	0x08010bdf
 8010c24:	08010bdf 	.word	0x08010bdf
 8010c28:	08010bdf 	.word	0x08010bdf
 8010c2c:	08010bdf 	.word	0x08010bdf
 8010c30:	08010d2b 	.word	0x08010d2b
 8010c34:	08010d01 	.word	0x08010d01
 8010c38:	08010c8f 	.word	0x08010c8f
 8010c3c:	08010c8f 	.word	0x08010c8f
 8010c40:	08010c8f 	.word	0x08010c8f
 8010c44:	08010bdf 	.word	0x08010bdf
 8010c48:	08010d05 	.word	0x08010d05
 8010c4c:	08010bdf 	.word	0x08010bdf
 8010c50:	08010bdf 	.word	0x08010bdf
 8010c54:	08010bdf 	.word	0x08010bdf
 8010c58:	08010bdf 	.word	0x08010bdf
 8010c5c:	08010d3b 	.word	0x08010d3b
 8010c60:	08010d0d 	.word	0x08010d0d
 8010c64:	08010caf 	.word	0x08010caf
 8010c68:	08010bdf 	.word	0x08010bdf
 8010c6c:	08010bdf 	.word	0x08010bdf
 8010c70:	08010d37 	.word	0x08010d37
 8010c74:	08010bdf 	.word	0x08010bdf
 8010c78:	08010d01 	.word	0x08010d01
 8010c7c:	08010bdf 	.word	0x08010bdf
 8010c80:	08010bdf 	.word	0x08010bdf
 8010c84:	08010cb7 	.word	0x08010cb7
 8010c88:	3b45      	subs	r3, #69	; 0x45
 8010c8a:	2b02      	cmp	r3, #2
 8010c8c:	d8a7      	bhi.n	8010bde <__ssvfiscanf_r+0xee>
 8010c8e:	2305      	movs	r3, #5
 8010c90:	e01b      	b.n	8010cca <__ssvfiscanf_r+0x1da>
 8010c92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010c94:	4621      	mov	r1, r4
 8010c96:	4630      	mov	r0, r6
 8010c98:	4798      	blx	r3
 8010c9a:	2800      	cmp	r0, #0
 8010c9c:	f43f af68 	beq.w	8010b70 <__ssvfiscanf_r+0x80>
 8010ca0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010ca2:	2800      	cmp	r0, #0
 8010ca4:	f040 808d 	bne.w	8010dc2 <__ssvfiscanf_r+0x2d2>
 8010ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8010cac:	e08f      	b.n	8010dce <__ssvfiscanf_r+0x2de>
 8010cae:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010cb0:	f042 0220 	orr.w	r2, r2, #32
 8010cb4:	9241      	str	r2, [sp, #260]	; 0x104
 8010cb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8010cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010cbc:	9241      	str	r2, [sp, #260]	; 0x104
 8010cbe:	2210      	movs	r2, #16
 8010cc0:	2b6f      	cmp	r3, #111	; 0x6f
 8010cc2:	9242      	str	r2, [sp, #264]	; 0x108
 8010cc4:	bf34      	ite	cc
 8010cc6:	2303      	movcc	r3, #3
 8010cc8:	2304      	movcs	r3, #4
 8010cca:	9347      	str	r3, [sp, #284]	; 0x11c
 8010ccc:	6863      	ldr	r3, [r4, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	dd42      	ble.n	8010d58 <__ssvfiscanf_r+0x268>
 8010cd2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010cd4:	0659      	lsls	r1, r3, #25
 8010cd6:	d404      	bmi.n	8010ce2 <__ssvfiscanf_r+0x1f2>
 8010cd8:	6823      	ldr	r3, [r4, #0]
 8010cda:	781a      	ldrb	r2, [r3, #0]
 8010cdc:	5cba      	ldrb	r2, [r7, r2]
 8010cde:	0712      	lsls	r2, r2, #28
 8010ce0:	d441      	bmi.n	8010d66 <__ssvfiscanf_r+0x276>
 8010ce2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8010ce4:	2b02      	cmp	r3, #2
 8010ce6:	dc50      	bgt.n	8010d8a <__ssvfiscanf_r+0x29a>
 8010ce8:	466b      	mov	r3, sp
 8010cea:	4622      	mov	r2, r4
 8010cec:	a941      	add	r1, sp, #260	; 0x104
 8010cee:	4630      	mov	r0, r6
 8010cf0:	f000 f9d0 	bl	8011094 <_scanf_chars>
 8010cf4:	2801      	cmp	r0, #1
 8010cf6:	d06e      	beq.n	8010dd6 <__ssvfiscanf_r+0x2e6>
 8010cf8:	2802      	cmp	r0, #2
 8010cfa:	f47f af20 	bne.w	8010b3e <__ssvfiscanf_r+0x4e>
 8010cfe:	e7cf      	b.n	8010ca0 <__ssvfiscanf_r+0x1b0>
 8010d00:	220a      	movs	r2, #10
 8010d02:	e7dd      	b.n	8010cc0 <__ssvfiscanf_r+0x1d0>
 8010d04:	2300      	movs	r3, #0
 8010d06:	9342      	str	r3, [sp, #264]	; 0x108
 8010d08:	2303      	movs	r3, #3
 8010d0a:	e7de      	b.n	8010cca <__ssvfiscanf_r+0x1da>
 8010d0c:	2308      	movs	r3, #8
 8010d0e:	9342      	str	r3, [sp, #264]	; 0x108
 8010d10:	2304      	movs	r3, #4
 8010d12:	e7da      	b.n	8010cca <__ssvfiscanf_r+0x1da>
 8010d14:	4629      	mov	r1, r5
 8010d16:	4640      	mov	r0, r8
 8010d18:	f000 fb68 	bl	80113ec <__sccl>
 8010d1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010d1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d22:	9341      	str	r3, [sp, #260]	; 0x104
 8010d24:	4605      	mov	r5, r0
 8010d26:	2301      	movs	r3, #1
 8010d28:	e7cf      	b.n	8010cca <__ssvfiscanf_r+0x1da>
 8010d2a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8010d2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d30:	9341      	str	r3, [sp, #260]	; 0x104
 8010d32:	2300      	movs	r3, #0
 8010d34:	e7c9      	b.n	8010cca <__ssvfiscanf_r+0x1da>
 8010d36:	2302      	movs	r3, #2
 8010d38:	e7c7      	b.n	8010cca <__ssvfiscanf_r+0x1da>
 8010d3a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8010d3c:	06c3      	lsls	r3, r0, #27
 8010d3e:	f53f aefe 	bmi.w	8010b3e <__ssvfiscanf_r+0x4e>
 8010d42:	9b00      	ldr	r3, [sp, #0]
 8010d44:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010d46:	1d19      	adds	r1, r3, #4
 8010d48:	9100      	str	r1, [sp, #0]
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	f010 0f01 	tst.w	r0, #1
 8010d50:	bf14      	ite	ne
 8010d52:	801a      	strhne	r2, [r3, #0]
 8010d54:	601a      	streq	r2, [r3, #0]
 8010d56:	e6f2      	b.n	8010b3e <__ssvfiscanf_r+0x4e>
 8010d58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010d5a:	4621      	mov	r1, r4
 8010d5c:	4630      	mov	r0, r6
 8010d5e:	4798      	blx	r3
 8010d60:	2800      	cmp	r0, #0
 8010d62:	d0b6      	beq.n	8010cd2 <__ssvfiscanf_r+0x1e2>
 8010d64:	e79c      	b.n	8010ca0 <__ssvfiscanf_r+0x1b0>
 8010d66:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8010d68:	3201      	adds	r2, #1
 8010d6a:	9245      	str	r2, [sp, #276]	; 0x114
 8010d6c:	6862      	ldr	r2, [r4, #4]
 8010d6e:	3a01      	subs	r2, #1
 8010d70:	2a00      	cmp	r2, #0
 8010d72:	6062      	str	r2, [r4, #4]
 8010d74:	dd02      	ble.n	8010d7c <__ssvfiscanf_r+0x28c>
 8010d76:	3301      	adds	r3, #1
 8010d78:	6023      	str	r3, [r4, #0]
 8010d7a:	e7ad      	b.n	8010cd8 <__ssvfiscanf_r+0x1e8>
 8010d7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8010d7e:	4621      	mov	r1, r4
 8010d80:	4630      	mov	r0, r6
 8010d82:	4798      	blx	r3
 8010d84:	2800      	cmp	r0, #0
 8010d86:	d0a7      	beq.n	8010cd8 <__ssvfiscanf_r+0x1e8>
 8010d88:	e78a      	b.n	8010ca0 <__ssvfiscanf_r+0x1b0>
 8010d8a:	2b04      	cmp	r3, #4
 8010d8c:	dc0e      	bgt.n	8010dac <__ssvfiscanf_r+0x2bc>
 8010d8e:	466b      	mov	r3, sp
 8010d90:	4622      	mov	r2, r4
 8010d92:	a941      	add	r1, sp, #260	; 0x104
 8010d94:	4630      	mov	r0, r6
 8010d96:	f000 f9d7 	bl	8011148 <_scanf_i>
 8010d9a:	e7ab      	b.n	8010cf4 <__ssvfiscanf_r+0x204>
 8010d9c:	08010a3d 	.word	0x08010a3d
 8010da0:	08010ab7 	.word	0x08010ab7
 8010da4:	080129e9 	.word	0x080129e9
 8010da8:	08012e1a 	.word	0x08012e1a
 8010dac:	4b0b      	ldr	r3, [pc, #44]	; (8010ddc <__ssvfiscanf_r+0x2ec>)
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	f43f aec5 	beq.w	8010b3e <__ssvfiscanf_r+0x4e>
 8010db4:	466b      	mov	r3, sp
 8010db6:	4622      	mov	r2, r4
 8010db8:	a941      	add	r1, sp, #260	; 0x104
 8010dba:	4630      	mov	r0, r6
 8010dbc:	f3af 8000 	nop.w
 8010dc0:	e798      	b.n	8010cf4 <__ssvfiscanf_r+0x204>
 8010dc2:	89a3      	ldrh	r3, [r4, #12]
 8010dc4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8010dc8:	bf18      	it	ne
 8010dca:	f04f 30ff 	movne.w	r0, #4294967295
 8010dce:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8010dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010dd6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8010dd8:	e7f9      	b.n	8010dce <__ssvfiscanf_r+0x2de>
 8010dda:	bf00      	nop
 8010ddc:	00000000 	.word	0x00000000

08010de0 <__sfputc_r>:
 8010de0:	6893      	ldr	r3, [r2, #8]
 8010de2:	3b01      	subs	r3, #1
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	b410      	push	{r4}
 8010de8:	6093      	str	r3, [r2, #8]
 8010dea:	da08      	bge.n	8010dfe <__sfputc_r+0x1e>
 8010dec:	6994      	ldr	r4, [r2, #24]
 8010dee:	42a3      	cmp	r3, r4
 8010df0:	db01      	blt.n	8010df6 <__sfputc_r+0x16>
 8010df2:	290a      	cmp	r1, #10
 8010df4:	d103      	bne.n	8010dfe <__sfputc_r+0x1e>
 8010df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010dfa:	f7fd bf35 	b.w	800ec68 <__swbuf_r>
 8010dfe:	6813      	ldr	r3, [r2, #0]
 8010e00:	1c58      	adds	r0, r3, #1
 8010e02:	6010      	str	r0, [r2, #0]
 8010e04:	7019      	strb	r1, [r3, #0]
 8010e06:	4608      	mov	r0, r1
 8010e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e0c:	4770      	bx	lr

08010e0e <__sfputs_r>:
 8010e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e10:	4606      	mov	r6, r0
 8010e12:	460f      	mov	r7, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	18d5      	adds	r5, r2, r3
 8010e18:	42ac      	cmp	r4, r5
 8010e1a:	d101      	bne.n	8010e20 <__sfputs_r+0x12>
 8010e1c:	2000      	movs	r0, #0
 8010e1e:	e007      	b.n	8010e30 <__sfputs_r+0x22>
 8010e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e24:	463a      	mov	r2, r7
 8010e26:	4630      	mov	r0, r6
 8010e28:	f7ff ffda 	bl	8010de0 <__sfputc_r>
 8010e2c:	1c43      	adds	r3, r0, #1
 8010e2e:	d1f3      	bne.n	8010e18 <__sfputs_r+0xa>
 8010e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e34 <_vfiprintf_r>:
 8010e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e38:	460d      	mov	r5, r1
 8010e3a:	b09d      	sub	sp, #116	; 0x74
 8010e3c:	4614      	mov	r4, r2
 8010e3e:	4698      	mov	r8, r3
 8010e40:	4606      	mov	r6, r0
 8010e42:	b118      	cbz	r0, 8010e4c <_vfiprintf_r+0x18>
 8010e44:	6983      	ldr	r3, [r0, #24]
 8010e46:	b90b      	cbnz	r3, 8010e4c <_vfiprintf_r+0x18>
 8010e48:	f7fe ffa2 	bl	800fd90 <__sinit>
 8010e4c:	4b89      	ldr	r3, [pc, #548]	; (8011074 <_vfiprintf_r+0x240>)
 8010e4e:	429d      	cmp	r5, r3
 8010e50:	d11b      	bne.n	8010e8a <_vfiprintf_r+0x56>
 8010e52:	6875      	ldr	r5, [r6, #4]
 8010e54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e56:	07d9      	lsls	r1, r3, #31
 8010e58:	d405      	bmi.n	8010e66 <_vfiprintf_r+0x32>
 8010e5a:	89ab      	ldrh	r3, [r5, #12]
 8010e5c:	059a      	lsls	r2, r3, #22
 8010e5e:	d402      	bmi.n	8010e66 <_vfiprintf_r+0x32>
 8010e60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010e62:	f7ff f845 	bl	800fef0 <__retarget_lock_acquire_recursive>
 8010e66:	89ab      	ldrh	r3, [r5, #12]
 8010e68:	071b      	lsls	r3, r3, #28
 8010e6a:	d501      	bpl.n	8010e70 <_vfiprintf_r+0x3c>
 8010e6c:	692b      	ldr	r3, [r5, #16]
 8010e6e:	b9eb      	cbnz	r3, 8010eac <_vfiprintf_r+0x78>
 8010e70:	4629      	mov	r1, r5
 8010e72:	4630      	mov	r0, r6
 8010e74:	f7fd ff5c 	bl	800ed30 <__swsetup_r>
 8010e78:	b1c0      	cbz	r0, 8010eac <_vfiprintf_r+0x78>
 8010e7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010e7c:	07dc      	lsls	r4, r3, #31
 8010e7e:	d50e      	bpl.n	8010e9e <_vfiprintf_r+0x6a>
 8010e80:	f04f 30ff 	mov.w	r0, #4294967295
 8010e84:	b01d      	add	sp, #116	; 0x74
 8010e86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e8a:	4b7b      	ldr	r3, [pc, #492]	; (8011078 <_vfiprintf_r+0x244>)
 8010e8c:	429d      	cmp	r5, r3
 8010e8e:	d101      	bne.n	8010e94 <_vfiprintf_r+0x60>
 8010e90:	68b5      	ldr	r5, [r6, #8]
 8010e92:	e7df      	b.n	8010e54 <_vfiprintf_r+0x20>
 8010e94:	4b79      	ldr	r3, [pc, #484]	; (801107c <_vfiprintf_r+0x248>)
 8010e96:	429d      	cmp	r5, r3
 8010e98:	bf08      	it	eq
 8010e9a:	68f5      	ldreq	r5, [r6, #12]
 8010e9c:	e7da      	b.n	8010e54 <_vfiprintf_r+0x20>
 8010e9e:	89ab      	ldrh	r3, [r5, #12]
 8010ea0:	0598      	lsls	r0, r3, #22
 8010ea2:	d4ed      	bmi.n	8010e80 <_vfiprintf_r+0x4c>
 8010ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010ea6:	f7ff f824 	bl	800fef2 <__retarget_lock_release_recursive>
 8010eaa:	e7e9      	b.n	8010e80 <_vfiprintf_r+0x4c>
 8010eac:	2300      	movs	r3, #0
 8010eae:	9309      	str	r3, [sp, #36]	; 0x24
 8010eb0:	2320      	movs	r3, #32
 8010eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010eba:	2330      	movs	r3, #48	; 0x30
 8010ebc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8011080 <_vfiprintf_r+0x24c>
 8010ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010ec4:	f04f 0901 	mov.w	r9, #1
 8010ec8:	4623      	mov	r3, r4
 8010eca:	469a      	mov	sl, r3
 8010ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010ed0:	b10a      	cbz	r2, 8010ed6 <_vfiprintf_r+0xa2>
 8010ed2:	2a25      	cmp	r2, #37	; 0x25
 8010ed4:	d1f9      	bne.n	8010eca <_vfiprintf_r+0x96>
 8010ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8010eda:	d00b      	beq.n	8010ef4 <_vfiprintf_r+0xc0>
 8010edc:	465b      	mov	r3, fp
 8010ede:	4622      	mov	r2, r4
 8010ee0:	4629      	mov	r1, r5
 8010ee2:	4630      	mov	r0, r6
 8010ee4:	f7ff ff93 	bl	8010e0e <__sfputs_r>
 8010ee8:	3001      	adds	r0, #1
 8010eea:	f000 80aa 	beq.w	8011042 <_vfiprintf_r+0x20e>
 8010eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010ef0:	445a      	add	r2, fp
 8010ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8010ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	f000 80a2 	beq.w	8011042 <_vfiprintf_r+0x20e>
 8010efe:	2300      	movs	r3, #0
 8010f00:	f04f 32ff 	mov.w	r2, #4294967295
 8010f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f08:	f10a 0a01 	add.w	sl, sl, #1
 8010f0c:	9304      	str	r3, [sp, #16]
 8010f0e:	9307      	str	r3, [sp, #28]
 8010f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010f14:	931a      	str	r3, [sp, #104]	; 0x68
 8010f16:	4654      	mov	r4, sl
 8010f18:	2205      	movs	r2, #5
 8010f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f1e:	4858      	ldr	r0, [pc, #352]	; (8011080 <_vfiprintf_r+0x24c>)
 8010f20:	f7ef f96e 	bl	8000200 <memchr>
 8010f24:	9a04      	ldr	r2, [sp, #16]
 8010f26:	b9d8      	cbnz	r0, 8010f60 <_vfiprintf_r+0x12c>
 8010f28:	06d1      	lsls	r1, r2, #27
 8010f2a:	bf44      	itt	mi
 8010f2c:	2320      	movmi	r3, #32
 8010f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f32:	0713      	lsls	r3, r2, #28
 8010f34:	bf44      	itt	mi
 8010f36:	232b      	movmi	r3, #43	; 0x2b
 8010f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8010f40:	2b2a      	cmp	r3, #42	; 0x2a
 8010f42:	d015      	beq.n	8010f70 <_vfiprintf_r+0x13c>
 8010f44:	9a07      	ldr	r2, [sp, #28]
 8010f46:	4654      	mov	r4, sl
 8010f48:	2000      	movs	r0, #0
 8010f4a:	f04f 0c0a 	mov.w	ip, #10
 8010f4e:	4621      	mov	r1, r4
 8010f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f54:	3b30      	subs	r3, #48	; 0x30
 8010f56:	2b09      	cmp	r3, #9
 8010f58:	d94e      	bls.n	8010ff8 <_vfiprintf_r+0x1c4>
 8010f5a:	b1b0      	cbz	r0, 8010f8a <_vfiprintf_r+0x156>
 8010f5c:	9207      	str	r2, [sp, #28]
 8010f5e:	e014      	b.n	8010f8a <_vfiprintf_r+0x156>
 8010f60:	eba0 0308 	sub.w	r3, r0, r8
 8010f64:	fa09 f303 	lsl.w	r3, r9, r3
 8010f68:	4313      	orrs	r3, r2
 8010f6a:	9304      	str	r3, [sp, #16]
 8010f6c:	46a2      	mov	sl, r4
 8010f6e:	e7d2      	b.n	8010f16 <_vfiprintf_r+0xe2>
 8010f70:	9b03      	ldr	r3, [sp, #12]
 8010f72:	1d19      	adds	r1, r3, #4
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	9103      	str	r1, [sp, #12]
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	bfbb      	ittet	lt
 8010f7c:	425b      	neglt	r3, r3
 8010f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8010f82:	9307      	strge	r3, [sp, #28]
 8010f84:	9307      	strlt	r3, [sp, #28]
 8010f86:	bfb8      	it	lt
 8010f88:	9204      	strlt	r2, [sp, #16]
 8010f8a:	7823      	ldrb	r3, [r4, #0]
 8010f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8010f8e:	d10c      	bne.n	8010faa <_vfiprintf_r+0x176>
 8010f90:	7863      	ldrb	r3, [r4, #1]
 8010f92:	2b2a      	cmp	r3, #42	; 0x2a
 8010f94:	d135      	bne.n	8011002 <_vfiprintf_r+0x1ce>
 8010f96:	9b03      	ldr	r3, [sp, #12]
 8010f98:	1d1a      	adds	r2, r3, #4
 8010f9a:	681b      	ldr	r3, [r3, #0]
 8010f9c:	9203      	str	r2, [sp, #12]
 8010f9e:	2b00      	cmp	r3, #0
 8010fa0:	bfb8      	it	lt
 8010fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8010fa6:	3402      	adds	r4, #2
 8010fa8:	9305      	str	r3, [sp, #20]
 8010faa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8011090 <_vfiprintf_r+0x25c>
 8010fae:	7821      	ldrb	r1, [r4, #0]
 8010fb0:	2203      	movs	r2, #3
 8010fb2:	4650      	mov	r0, sl
 8010fb4:	f7ef f924 	bl	8000200 <memchr>
 8010fb8:	b140      	cbz	r0, 8010fcc <_vfiprintf_r+0x198>
 8010fba:	2340      	movs	r3, #64	; 0x40
 8010fbc:	eba0 000a 	sub.w	r0, r0, sl
 8010fc0:	fa03 f000 	lsl.w	r0, r3, r0
 8010fc4:	9b04      	ldr	r3, [sp, #16]
 8010fc6:	4303      	orrs	r3, r0
 8010fc8:	3401      	adds	r4, #1
 8010fca:	9304      	str	r3, [sp, #16]
 8010fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010fd0:	482c      	ldr	r0, [pc, #176]	; (8011084 <_vfiprintf_r+0x250>)
 8010fd2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010fd6:	2206      	movs	r2, #6
 8010fd8:	f7ef f912 	bl	8000200 <memchr>
 8010fdc:	2800      	cmp	r0, #0
 8010fde:	d03f      	beq.n	8011060 <_vfiprintf_r+0x22c>
 8010fe0:	4b29      	ldr	r3, [pc, #164]	; (8011088 <_vfiprintf_r+0x254>)
 8010fe2:	bb1b      	cbnz	r3, 801102c <_vfiprintf_r+0x1f8>
 8010fe4:	9b03      	ldr	r3, [sp, #12]
 8010fe6:	3307      	adds	r3, #7
 8010fe8:	f023 0307 	bic.w	r3, r3, #7
 8010fec:	3308      	adds	r3, #8
 8010fee:	9303      	str	r3, [sp, #12]
 8010ff0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ff2:	443b      	add	r3, r7
 8010ff4:	9309      	str	r3, [sp, #36]	; 0x24
 8010ff6:	e767      	b.n	8010ec8 <_vfiprintf_r+0x94>
 8010ff8:	fb0c 3202 	mla	r2, ip, r2, r3
 8010ffc:	460c      	mov	r4, r1
 8010ffe:	2001      	movs	r0, #1
 8011000:	e7a5      	b.n	8010f4e <_vfiprintf_r+0x11a>
 8011002:	2300      	movs	r3, #0
 8011004:	3401      	adds	r4, #1
 8011006:	9305      	str	r3, [sp, #20]
 8011008:	4619      	mov	r1, r3
 801100a:	f04f 0c0a 	mov.w	ip, #10
 801100e:	4620      	mov	r0, r4
 8011010:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011014:	3a30      	subs	r2, #48	; 0x30
 8011016:	2a09      	cmp	r2, #9
 8011018:	d903      	bls.n	8011022 <_vfiprintf_r+0x1ee>
 801101a:	2b00      	cmp	r3, #0
 801101c:	d0c5      	beq.n	8010faa <_vfiprintf_r+0x176>
 801101e:	9105      	str	r1, [sp, #20]
 8011020:	e7c3      	b.n	8010faa <_vfiprintf_r+0x176>
 8011022:	fb0c 2101 	mla	r1, ip, r1, r2
 8011026:	4604      	mov	r4, r0
 8011028:	2301      	movs	r3, #1
 801102a:	e7f0      	b.n	801100e <_vfiprintf_r+0x1da>
 801102c:	ab03      	add	r3, sp, #12
 801102e:	9300      	str	r3, [sp, #0]
 8011030:	462a      	mov	r2, r5
 8011032:	4b16      	ldr	r3, [pc, #88]	; (801108c <_vfiprintf_r+0x258>)
 8011034:	a904      	add	r1, sp, #16
 8011036:	4630      	mov	r0, r6
 8011038:	f7fc ffac 	bl	800df94 <_printf_float>
 801103c:	4607      	mov	r7, r0
 801103e:	1c78      	adds	r0, r7, #1
 8011040:	d1d6      	bne.n	8010ff0 <_vfiprintf_r+0x1bc>
 8011042:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8011044:	07d9      	lsls	r1, r3, #31
 8011046:	d405      	bmi.n	8011054 <_vfiprintf_r+0x220>
 8011048:	89ab      	ldrh	r3, [r5, #12]
 801104a:	059a      	lsls	r2, r3, #22
 801104c:	d402      	bmi.n	8011054 <_vfiprintf_r+0x220>
 801104e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011050:	f7fe ff4f 	bl	800fef2 <__retarget_lock_release_recursive>
 8011054:	89ab      	ldrh	r3, [r5, #12]
 8011056:	065b      	lsls	r3, r3, #25
 8011058:	f53f af12 	bmi.w	8010e80 <_vfiprintf_r+0x4c>
 801105c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801105e:	e711      	b.n	8010e84 <_vfiprintf_r+0x50>
 8011060:	ab03      	add	r3, sp, #12
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	462a      	mov	r2, r5
 8011066:	4b09      	ldr	r3, [pc, #36]	; (801108c <_vfiprintf_r+0x258>)
 8011068:	a904      	add	r1, sp, #16
 801106a:	4630      	mov	r0, r6
 801106c:	f7fd fa36 	bl	800e4dc <_printf_i>
 8011070:	e7e4      	b.n	801103c <_vfiprintf_r+0x208>
 8011072:	bf00      	nop
 8011074:	08012c6c 	.word	0x08012c6c
 8011078:	08012c8c 	.word	0x08012c8c
 801107c:	08012c4c 	.word	0x08012c4c
 8011080:	08012e14 	.word	0x08012e14
 8011084:	08012e1e 	.word	0x08012e1e
 8011088:	0800df95 	.word	0x0800df95
 801108c:	08010e0f 	.word	0x08010e0f
 8011090:	08012e1a 	.word	0x08012e1a

08011094 <_scanf_chars>:
 8011094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011098:	4615      	mov	r5, r2
 801109a:	688a      	ldr	r2, [r1, #8]
 801109c:	4680      	mov	r8, r0
 801109e:	460c      	mov	r4, r1
 80110a0:	b932      	cbnz	r2, 80110b0 <_scanf_chars+0x1c>
 80110a2:	698a      	ldr	r2, [r1, #24]
 80110a4:	2a00      	cmp	r2, #0
 80110a6:	bf0c      	ite	eq
 80110a8:	2201      	moveq	r2, #1
 80110aa:	f04f 32ff 	movne.w	r2, #4294967295
 80110ae:	608a      	str	r2, [r1, #8]
 80110b0:	6822      	ldr	r2, [r4, #0]
 80110b2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8011144 <_scanf_chars+0xb0>
 80110b6:	06d1      	lsls	r1, r2, #27
 80110b8:	bf5f      	itttt	pl
 80110ba:	681a      	ldrpl	r2, [r3, #0]
 80110bc:	1d11      	addpl	r1, r2, #4
 80110be:	6019      	strpl	r1, [r3, #0]
 80110c0:	6816      	ldrpl	r6, [r2, #0]
 80110c2:	2700      	movs	r7, #0
 80110c4:	69a0      	ldr	r0, [r4, #24]
 80110c6:	b188      	cbz	r0, 80110ec <_scanf_chars+0x58>
 80110c8:	2801      	cmp	r0, #1
 80110ca:	d107      	bne.n	80110dc <_scanf_chars+0x48>
 80110cc:	682a      	ldr	r2, [r5, #0]
 80110ce:	7811      	ldrb	r1, [r2, #0]
 80110d0:	6962      	ldr	r2, [r4, #20]
 80110d2:	5c52      	ldrb	r2, [r2, r1]
 80110d4:	b952      	cbnz	r2, 80110ec <_scanf_chars+0x58>
 80110d6:	2f00      	cmp	r7, #0
 80110d8:	d031      	beq.n	801113e <_scanf_chars+0xaa>
 80110da:	e022      	b.n	8011122 <_scanf_chars+0x8e>
 80110dc:	2802      	cmp	r0, #2
 80110de:	d120      	bne.n	8011122 <_scanf_chars+0x8e>
 80110e0:	682b      	ldr	r3, [r5, #0]
 80110e2:	781b      	ldrb	r3, [r3, #0]
 80110e4:	f813 3009 	ldrb.w	r3, [r3, r9]
 80110e8:	071b      	lsls	r3, r3, #28
 80110ea:	d41a      	bmi.n	8011122 <_scanf_chars+0x8e>
 80110ec:	6823      	ldr	r3, [r4, #0]
 80110ee:	06da      	lsls	r2, r3, #27
 80110f0:	bf5e      	ittt	pl
 80110f2:	682b      	ldrpl	r3, [r5, #0]
 80110f4:	781b      	ldrbpl	r3, [r3, #0]
 80110f6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80110fa:	682a      	ldr	r2, [r5, #0]
 80110fc:	686b      	ldr	r3, [r5, #4]
 80110fe:	3201      	adds	r2, #1
 8011100:	602a      	str	r2, [r5, #0]
 8011102:	68a2      	ldr	r2, [r4, #8]
 8011104:	3b01      	subs	r3, #1
 8011106:	3a01      	subs	r2, #1
 8011108:	606b      	str	r3, [r5, #4]
 801110a:	3701      	adds	r7, #1
 801110c:	60a2      	str	r2, [r4, #8]
 801110e:	b142      	cbz	r2, 8011122 <_scanf_chars+0x8e>
 8011110:	2b00      	cmp	r3, #0
 8011112:	dcd7      	bgt.n	80110c4 <_scanf_chars+0x30>
 8011114:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8011118:	4629      	mov	r1, r5
 801111a:	4640      	mov	r0, r8
 801111c:	4798      	blx	r3
 801111e:	2800      	cmp	r0, #0
 8011120:	d0d0      	beq.n	80110c4 <_scanf_chars+0x30>
 8011122:	6823      	ldr	r3, [r4, #0]
 8011124:	f013 0310 	ands.w	r3, r3, #16
 8011128:	d105      	bne.n	8011136 <_scanf_chars+0xa2>
 801112a:	68e2      	ldr	r2, [r4, #12]
 801112c:	3201      	adds	r2, #1
 801112e:	60e2      	str	r2, [r4, #12]
 8011130:	69a2      	ldr	r2, [r4, #24]
 8011132:	b102      	cbz	r2, 8011136 <_scanf_chars+0xa2>
 8011134:	7033      	strb	r3, [r6, #0]
 8011136:	6923      	ldr	r3, [r4, #16]
 8011138:	443b      	add	r3, r7
 801113a:	6123      	str	r3, [r4, #16]
 801113c:	2000      	movs	r0, #0
 801113e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011142:	bf00      	nop
 8011144:	080129e9 	.word	0x080129e9

08011148 <_scanf_i>:
 8011148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801114c:	4698      	mov	r8, r3
 801114e:	4b76      	ldr	r3, [pc, #472]	; (8011328 <_scanf_i+0x1e0>)
 8011150:	460c      	mov	r4, r1
 8011152:	4682      	mov	sl, r0
 8011154:	4616      	mov	r6, r2
 8011156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801115a:	b087      	sub	sp, #28
 801115c:	ab03      	add	r3, sp, #12
 801115e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011162:	4b72      	ldr	r3, [pc, #456]	; (801132c <_scanf_i+0x1e4>)
 8011164:	69a1      	ldr	r1, [r4, #24]
 8011166:	4a72      	ldr	r2, [pc, #456]	; (8011330 <_scanf_i+0x1e8>)
 8011168:	2903      	cmp	r1, #3
 801116a:	bf18      	it	ne
 801116c:	461a      	movne	r2, r3
 801116e:	68a3      	ldr	r3, [r4, #8]
 8011170:	9201      	str	r2, [sp, #4]
 8011172:	1e5a      	subs	r2, r3, #1
 8011174:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8011178:	bf88      	it	hi
 801117a:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801117e:	4627      	mov	r7, r4
 8011180:	bf82      	ittt	hi
 8011182:	eb03 0905 	addhi.w	r9, r3, r5
 8011186:	f240 135d 	movwhi	r3, #349	; 0x15d
 801118a:	60a3      	strhi	r3, [r4, #8]
 801118c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011190:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8011194:	bf98      	it	ls
 8011196:	f04f 0900 	movls.w	r9, #0
 801119a:	6023      	str	r3, [r4, #0]
 801119c:	463d      	mov	r5, r7
 801119e:	f04f 0b00 	mov.w	fp, #0
 80111a2:	6831      	ldr	r1, [r6, #0]
 80111a4:	ab03      	add	r3, sp, #12
 80111a6:	7809      	ldrb	r1, [r1, #0]
 80111a8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80111ac:	2202      	movs	r2, #2
 80111ae:	f7ef f827 	bl	8000200 <memchr>
 80111b2:	b328      	cbz	r0, 8011200 <_scanf_i+0xb8>
 80111b4:	f1bb 0f01 	cmp.w	fp, #1
 80111b8:	d159      	bne.n	801126e <_scanf_i+0x126>
 80111ba:	6862      	ldr	r2, [r4, #4]
 80111bc:	b92a      	cbnz	r2, 80111ca <_scanf_i+0x82>
 80111be:	6822      	ldr	r2, [r4, #0]
 80111c0:	2308      	movs	r3, #8
 80111c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80111c6:	6063      	str	r3, [r4, #4]
 80111c8:	6022      	str	r2, [r4, #0]
 80111ca:	6822      	ldr	r2, [r4, #0]
 80111cc:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80111d0:	6022      	str	r2, [r4, #0]
 80111d2:	68a2      	ldr	r2, [r4, #8]
 80111d4:	1e51      	subs	r1, r2, #1
 80111d6:	60a1      	str	r1, [r4, #8]
 80111d8:	b192      	cbz	r2, 8011200 <_scanf_i+0xb8>
 80111da:	6832      	ldr	r2, [r6, #0]
 80111dc:	1c51      	adds	r1, r2, #1
 80111de:	6031      	str	r1, [r6, #0]
 80111e0:	7812      	ldrb	r2, [r2, #0]
 80111e2:	f805 2b01 	strb.w	r2, [r5], #1
 80111e6:	6872      	ldr	r2, [r6, #4]
 80111e8:	3a01      	subs	r2, #1
 80111ea:	2a00      	cmp	r2, #0
 80111ec:	6072      	str	r2, [r6, #4]
 80111ee:	dc07      	bgt.n	8011200 <_scanf_i+0xb8>
 80111f0:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80111f4:	4631      	mov	r1, r6
 80111f6:	4650      	mov	r0, sl
 80111f8:	4790      	blx	r2
 80111fa:	2800      	cmp	r0, #0
 80111fc:	f040 8085 	bne.w	801130a <_scanf_i+0x1c2>
 8011200:	f10b 0b01 	add.w	fp, fp, #1
 8011204:	f1bb 0f03 	cmp.w	fp, #3
 8011208:	d1cb      	bne.n	80111a2 <_scanf_i+0x5a>
 801120a:	6863      	ldr	r3, [r4, #4]
 801120c:	b90b      	cbnz	r3, 8011212 <_scanf_i+0xca>
 801120e:	230a      	movs	r3, #10
 8011210:	6063      	str	r3, [r4, #4]
 8011212:	6863      	ldr	r3, [r4, #4]
 8011214:	4947      	ldr	r1, [pc, #284]	; (8011334 <_scanf_i+0x1ec>)
 8011216:	6960      	ldr	r0, [r4, #20]
 8011218:	1ac9      	subs	r1, r1, r3
 801121a:	f000 f8e7 	bl	80113ec <__sccl>
 801121e:	f04f 0b00 	mov.w	fp, #0
 8011222:	68a3      	ldr	r3, [r4, #8]
 8011224:	6822      	ldr	r2, [r4, #0]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d03d      	beq.n	80112a6 <_scanf_i+0x15e>
 801122a:	6831      	ldr	r1, [r6, #0]
 801122c:	6960      	ldr	r0, [r4, #20]
 801122e:	f891 c000 	ldrb.w	ip, [r1]
 8011232:	f810 000c 	ldrb.w	r0, [r0, ip]
 8011236:	2800      	cmp	r0, #0
 8011238:	d035      	beq.n	80112a6 <_scanf_i+0x15e>
 801123a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 801123e:	d124      	bne.n	801128a <_scanf_i+0x142>
 8011240:	0510      	lsls	r0, r2, #20
 8011242:	d522      	bpl.n	801128a <_scanf_i+0x142>
 8011244:	f10b 0b01 	add.w	fp, fp, #1
 8011248:	f1b9 0f00 	cmp.w	r9, #0
 801124c:	d003      	beq.n	8011256 <_scanf_i+0x10e>
 801124e:	3301      	adds	r3, #1
 8011250:	f109 39ff 	add.w	r9, r9, #4294967295
 8011254:	60a3      	str	r3, [r4, #8]
 8011256:	6873      	ldr	r3, [r6, #4]
 8011258:	3b01      	subs	r3, #1
 801125a:	2b00      	cmp	r3, #0
 801125c:	6073      	str	r3, [r6, #4]
 801125e:	dd1b      	ble.n	8011298 <_scanf_i+0x150>
 8011260:	6833      	ldr	r3, [r6, #0]
 8011262:	3301      	adds	r3, #1
 8011264:	6033      	str	r3, [r6, #0]
 8011266:	68a3      	ldr	r3, [r4, #8]
 8011268:	3b01      	subs	r3, #1
 801126a:	60a3      	str	r3, [r4, #8]
 801126c:	e7d9      	b.n	8011222 <_scanf_i+0xda>
 801126e:	f1bb 0f02 	cmp.w	fp, #2
 8011272:	d1ae      	bne.n	80111d2 <_scanf_i+0x8a>
 8011274:	6822      	ldr	r2, [r4, #0]
 8011276:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 801127a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 801127e:	d1bf      	bne.n	8011200 <_scanf_i+0xb8>
 8011280:	2310      	movs	r3, #16
 8011282:	6063      	str	r3, [r4, #4]
 8011284:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8011288:	e7a2      	b.n	80111d0 <_scanf_i+0x88>
 801128a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 801128e:	6022      	str	r2, [r4, #0]
 8011290:	780b      	ldrb	r3, [r1, #0]
 8011292:	f805 3b01 	strb.w	r3, [r5], #1
 8011296:	e7de      	b.n	8011256 <_scanf_i+0x10e>
 8011298:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801129c:	4631      	mov	r1, r6
 801129e:	4650      	mov	r0, sl
 80112a0:	4798      	blx	r3
 80112a2:	2800      	cmp	r0, #0
 80112a4:	d0df      	beq.n	8011266 <_scanf_i+0x11e>
 80112a6:	6823      	ldr	r3, [r4, #0]
 80112a8:	05db      	lsls	r3, r3, #23
 80112aa:	d50d      	bpl.n	80112c8 <_scanf_i+0x180>
 80112ac:	42bd      	cmp	r5, r7
 80112ae:	d909      	bls.n	80112c4 <_scanf_i+0x17c>
 80112b0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80112b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80112b8:	4632      	mov	r2, r6
 80112ba:	4650      	mov	r0, sl
 80112bc:	4798      	blx	r3
 80112be:	f105 39ff 	add.w	r9, r5, #4294967295
 80112c2:	464d      	mov	r5, r9
 80112c4:	42bd      	cmp	r5, r7
 80112c6:	d02d      	beq.n	8011324 <_scanf_i+0x1dc>
 80112c8:	6822      	ldr	r2, [r4, #0]
 80112ca:	f012 0210 	ands.w	r2, r2, #16
 80112ce:	d113      	bne.n	80112f8 <_scanf_i+0x1b0>
 80112d0:	702a      	strb	r2, [r5, #0]
 80112d2:	6863      	ldr	r3, [r4, #4]
 80112d4:	9e01      	ldr	r6, [sp, #4]
 80112d6:	4639      	mov	r1, r7
 80112d8:	4650      	mov	r0, sl
 80112da:	47b0      	blx	r6
 80112dc:	6821      	ldr	r1, [r4, #0]
 80112de:	f8d8 3000 	ldr.w	r3, [r8]
 80112e2:	f011 0f20 	tst.w	r1, #32
 80112e6:	d013      	beq.n	8011310 <_scanf_i+0x1c8>
 80112e8:	1d1a      	adds	r2, r3, #4
 80112ea:	f8c8 2000 	str.w	r2, [r8]
 80112ee:	681b      	ldr	r3, [r3, #0]
 80112f0:	6018      	str	r0, [r3, #0]
 80112f2:	68e3      	ldr	r3, [r4, #12]
 80112f4:	3301      	adds	r3, #1
 80112f6:	60e3      	str	r3, [r4, #12]
 80112f8:	1bed      	subs	r5, r5, r7
 80112fa:	44ab      	add	fp, r5
 80112fc:	6925      	ldr	r5, [r4, #16]
 80112fe:	445d      	add	r5, fp
 8011300:	6125      	str	r5, [r4, #16]
 8011302:	2000      	movs	r0, #0
 8011304:	b007      	add	sp, #28
 8011306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801130a:	f04f 0b00 	mov.w	fp, #0
 801130e:	e7ca      	b.n	80112a6 <_scanf_i+0x15e>
 8011310:	1d1a      	adds	r2, r3, #4
 8011312:	f8c8 2000 	str.w	r2, [r8]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	f011 0f01 	tst.w	r1, #1
 801131c:	bf14      	ite	ne
 801131e:	8018      	strhne	r0, [r3, #0]
 8011320:	6018      	streq	r0, [r3, #0]
 8011322:	e7e6      	b.n	80112f2 <_scanf_i+0x1aa>
 8011324:	2001      	movs	r0, #1
 8011326:	e7ed      	b.n	8011304 <_scanf_i+0x1bc>
 8011328:	08012860 	.word	0x08012860
 801132c:	08011541 	.word	0x08011541
 8011330:	0800ec51 	.word	0x0800ec51
 8011334:	08012e3e 	.word	0x08012e3e

08011338 <_putc_r>:
 8011338:	b570      	push	{r4, r5, r6, lr}
 801133a:	460d      	mov	r5, r1
 801133c:	4614      	mov	r4, r2
 801133e:	4606      	mov	r6, r0
 8011340:	b118      	cbz	r0, 801134a <_putc_r+0x12>
 8011342:	6983      	ldr	r3, [r0, #24]
 8011344:	b90b      	cbnz	r3, 801134a <_putc_r+0x12>
 8011346:	f7fe fd23 	bl	800fd90 <__sinit>
 801134a:	4b1c      	ldr	r3, [pc, #112]	; (80113bc <_putc_r+0x84>)
 801134c:	429c      	cmp	r4, r3
 801134e:	d124      	bne.n	801139a <_putc_r+0x62>
 8011350:	6874      	ldr	r4, [r6, #4]
 8011352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011354:	07d8      	lsls	r0, r3, #31
 8011356:	d405      	bmi.n	8011364 <_putc_r+0x2c>
 8011358:	89a3      	ldrh	r3, [r4, #12]
 801135a:	0599      	lsls	r1, r3, #22
 801135c:	d402      	bmi.n	8011364 <_putc_r+0x2c>
 801135e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011360:	f7fe fdc6 	bl	800fef0 <__retarget_lock_acquire_recursive>
 8011364:	68a3      	ldr	r3, [r4, #8]
 8011366:	3b01      	subs	r3, #1
 8011368:	2b00      	cmp	r3, #0
 801136a:	60a3      	str	r3, [r4, #8]
 801136c:	da05      	bge.n	801137a <_putc_r+0x42>
 801136e:	69a2      	ldr	r2, [r4, #24]
 8011370:	4293      	cmp	r3, r2
 8011372:	db1c      	blt.n	80113ae <_putc_r+0x76>
 8011374:	b2eb      	uxtb	r3, r5
 8011376:	2b0a      	cmp	r3, #10
 8011378:	d019      	beq.n	80113ae <_putc_r+0x76>
 801137a:	6823      	ldr	r3, [r4, #0]
 801137c:	1c5a      	adds	r2, r3, #1
 801137e:	6022      	str	r2, [r4, #0]
 8011380:	701d      	strb	r5, [r3, #0]
 8011382:	b2ed      	uxtb	r5, r5
 8011384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011386:	07da      	lsls	r2, r3, #31
 8011388:	d405      	bmi.n	8011396 <_putc_r+0x5e>
 801138a:	89a3      	ldrh	r3, [r4, #12]
 801138c:	059b      	lsls	r3, r3, #22
 801138e:	d402      	bmi.n	8011396 <_putc_r+0x5e>
 8011390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011392:	f7fe fdae 	bl	800fef2 <__retarget_lock_release_recursive>
 8011396:	4628      	mov	r0, r5
 8011398:	bd70      	pop	{r4, r5, r6, pc}
 801139a:	4b09      	ldr	r3, [pc, #36]	; (80113c0 <_putc_r+0x88>)
 801139c:	429c      	cmp	r4, r3
 801139e:	d101      	bne.n	80113a4 <_putc_r+0x6c>
 80113a0:	68b4      	ldr	r4, [r6, #8]
 80113a2:	e7d6      	b.n	8011352 <_putc_r+0x1a>
 80113a4:	4b07      	ldr	r3, [pc, #28]	; (80113c4 <_putc_r+0x8c>)
 80113a6:	429c      	cmp	r4, r3
 80113a8:	bf08      	it	eq
 80113aa:	68f4      	ldreq	r4, [r6, #12]
 80113ac:	e7d1      	b.n	8011352 <_putc_r+0x1a>
 80113ae:	4629      	mov	r1, r5
 80113b0:	4622      	mov	r2, r4
 80113b2:	4630      	mov	r0, r6
 80113b4:	f7fd fc58 	bl	800ec68 <__swbuf_r>
 80113b8:	4605      	mov	r5, r0
 80113ba:	e7e3      	b.n	8011384 <_putc_r+0x4c>
 80113bc:	08012c6c 	.word	0x08012c6c
 80113c0:	08012c8c 	.word	0x08012c8c
 80113c4:	08012c4c 	.word	0x08012c4c

080113c8 <_read_r>:
 80113c8:	b538      	push	{r3, r4, r5, lr}
 80113ca:	4d07      	ldr	r5, [pc, #28]	; (80113e8 <_read_r+0x20>)
 80113cc:	4604      	mov	r4, r0
 80113ce:	4608      	mov	r0, r1
 80113d0:	4611      	mov	r1, r2
 80113d2:	2200      	movs	r2, #0
 80113d4:	602a      	str	r2, [r5, #0]
 80113d6:	461a      	mov	r2, r3
 80113d8:	f7f2 fcc4 	bl	8003d64 <_read>
 80113dc:	1c43      	adds	r3, r0, #1
 80113de:	d102      	bne.n	80113e6 <_read_r+0x1e>
 80113e0:	682b      	ldr	r3, [r5, #0]
 80113e2:	b103      	cbz	r3, 80113e6 <_read_r+0x1e>
 80113e4:	6023      	str	r3, [r4, #0]
 80113e6:	bd38      	pop	{r3, r4, r5, pc}
 80113e8:	20001894 	.word	0x20001894

080113ec <__sccl>:
 80113ec:	b570      	push	{r4, r5, r6, lr}
 80113ee:	780b      	ldrb	r3, [r1, #0]
 80113f0:	4604      	mov	r4, r0
 80113f2:	2b5e      	cmp	r3, #94	; 0x5e
 80113f4:	bf0b      	itete	eq
 80113f6:	784b      	ldrbeq	r3, [r1, #1]
 80113f8:	1c48      	addne	r0, r1, #1
 80113fa:	1c88      	addeq	r0, r1, #2
 80113fc:	2200      	movne	r2, #0
 80113fe:	bf08      	it	eq
 8011400:	2201      	moveq	r2, #1
 8011402:	1e61      	subs	r1, r4, #1
 8011404:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8011408:	f801 2f01 	strb.w	r2, [r1, #1]!
 801140c:	42a9      	cmp	r1, r5
 801140e:	d1fb      	bne.n	8011408 <__sccl+0x1c>
 8011410:	b90b      	cbnz	r3, 8011416 <__sccl+0x2a>
 8011412:	3801      	subs	r0, #1
 8011414:	bd70      	pop	{r4, r5, r6, pc}
 8011416:	f082 0201 	eor.w	r2, r2, #1
 801141a:	54e2      	strb	r2, [r4, r3]
 801141c:	4605      	mov	r5, r0
 801141e:	4628      	mov	r0, r5
 8011420:	f810 1b01 	ldrb.w	r1, [r0], #1
 8011424:	292d      	cmp	r1, #45	; 0x2d
 8011426:	d006      	beq.n	8011436 <__sccl+0x4a>
 8011428:	295d      	cmp	r1, #93	; 0x5d
 801142a:	d0f3      	beq.n	8011414 <__sccl+0x28>
 801142c:	b909      	cbnz	r1, 8011432 <__sccl+0x46>
 801142e:	4628      	mov	r0, r5
 8011430:	e7f0      	b.n	8011414 <__sccl+0x28>
 8011432:	460b      	mov	r3, r1
 8011434:	e7f1      	b.n	801141a <__sccl+0x2e>
 8011436:	786e      	ldrb	r6, [r5, #1]
 8011438:	2e5d      	cmp	r6, #93	; 0x5d
 801143a:	d0fa      	beq.n	8011432 <__sccl+0x46>
 801143c:	42b3      	cmp	r3, r6
 801143e:	dcf8      	bgt.n	8011432 <__sccl+0x46>
 8011440:	3502      	adds	r5, #2
 8011442:	4619      	mov	r1, r3
 8011444:	3101      	adds	r1, #1
 8011446:	428e      	cmp	r6, r1
 8011448:	5462      	strb	r2, [r4, r1]
 801144a:	dcfb      	bgt.n	8011444 <__sccl+0x58>
 801144c:	1af1      	subs	r1, r6, r3
 801144e:	3901      	subs	r1, #1
 8011450:	1c58      	adds	r0, r3, #1
 8011452:	42b3      	cmp	r3, r6
 8011454:	bfa8      	it	ge
 8011456:	2100      	movge	r1, #0
 8011458:	1843      	adds	r3, r0, r1
 801145a:	e7e0      	b.n	801141e <__sccl+0x32>

0801145c <_strtoul_l.constprop.0>:
 801145c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011460:	4f36      	ldr	r7, [pc, #216]	; (801153c <_strtoul_l.constprop.0+0xe0>)
 8011462:	4686      	mov	lr, r0
 8011464:	460d      	mov	r5, r1
 8011466:	4628      	mov	r0, r5
 8011468:	f815 4b01 	ldrb.w	r4, [r5], #1
 801146c:	5de6      	ldrb	r6, [r4, r7]
 801146e:	f016 0608 	ands.w	r6, r6, #8
 8011472:	d1f8      	bne.n	8011466 <_strtoul_l.constprop.0+0xa>
 8011474:	2c2d      	cmp	r4, #45	; 0x2d
 8011476:	d12f      	bne.n	80114d8 <_strtoul_l.constprop.0+0x7c>
 8011478:	782c      	ldrb	r4, [r5, #0]
 801147a:	2601      	movs	r6, #1
 801147c:	1c85      	adds	r5, r0, #2
 801147e:	2b00      	cmp	r3, #0
 8011480:	d057      	beq.n	8011532 <_strtoul_l.constprop.0+0xd6>
 8011482:	2b10      	cmp	r3, #16
 8011484:	d109      	bne.n	801149a <_strtoul_l.constprop.0+0x3e>
 8011486:	2c30      	cmp	r4, #48	; 0x30
 8011488:	d107      	bne.n	801149a <_strtoul_l.constprop.0+0x3e>
 801148a:	7828      	ldrb	r0, [r5, #0]
 801148c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8011490:	2858      	cmp	r0, #88	; 0x58
 8011492:	d149      	bne.n	8011528 <_strtoul_l.constprop.0+0xcc>
 8011494:	786c      	ldrb	r4, [r5, #1]
 8011496:	2310      	movs	r3, #16
 8011498:	3502      	adds	r5, #2
 801149a:	f04f 38ff 	mov.w	r8, #4294967295
 801149e:	2700      	movs	r7, #0
 80114a0:	fbb8 f8f3 	udiv	r8, r8, r3
 80114a4:	fb03 f908 	mul.w	r9, r3, r8
 80114a8:	ea6f 0909 	mvn.w	r9, r9
 80114ac:	4638      	mov	r0, r7
 80114ae:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80114b2:	f1bc 0f09 	cmp.w	ip, #9
 80114b6:	d814      	bhi.n	80114e2 <_strtoul_l.constprop.0+0x86>
 80114b8:	4664      	mov	r4, ip
 80114ba:	42a3      	cmp	r3, r4
 80114bc:	dd22      	ble.n	8011504 <_strtoul_l.constprop.0+0xa8>
 80114be:	2f00      	cmp	r7, #0
 80114c0:	db1d      	blt.n	80114fe <_strtoul_l.constprop.0+0xa2>
 80114c2:	4580      	cmp	r8, r0
 80114c4:	d31b      	bcc.n	80114fe <_strtoul_l.constprop.0+0xa2>
 80114c6:	d101      	bne.n	80114cc <_strtoul_l.constprop.0+0x70>
 80114c8:	45a1      	cmp	r9, r4
 80114ca:	db18      	blt.n	80114fe <_strtoul_l.constprop.0+0xa2>
 80114cc:	fb00 4003 	mla	r0, r0, r3, r4
 80114d0:	2701      	movs	r7, #1
 80114d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80114d6:	e7ea      	b.n	80114ae <_strtoul_l.constprop.0+0x52>
 80114d8:	2c2b      	cmp	r4, #43	; 0x2b
 80114da:	bf04      	itt	eq
 80114dc:	782c      	ldrbeq	r4, [r5, #0]
 80114de:	1c85      	addeq	r5, r0, #2
 80114e0:	e7cd      	b.n	801147e <_strtoul_l.constprop.0+0x22>
 80114e2:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80114e6:	f1bc 0f19 	cmp.w	ip, #25
 80114ea:	d801      	bhi.n	80114f0 <_strtoul_l.constprop.0+0x94>
 80114ec:	3c37      	subs	r4, #55	; 0x37
 80114ee:	e7e4      	b.n	80114ba <_strtoul_l.constprop.0+0x5e>
 80114f0:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80114f4:	f1bc 0f19 	cmp.w	ip, #25
 80114f8:	d804      	bhi.n	8011504 <_strtoul_l.constprop.0+0xa8>
 80114fa:	3c57      	subs	r4, #87	; 0x57
 80114fc:	e7dd      	b.n	80114ba <_strtoul_l.constprop.0+0x5e>
 80114fe:	f04f 37ff 	mov.w	r7, #4294967295
 8011502:	e7e6      	b.n	80114d2 <_strtoul_l.constprop.0+0x76>
 8011504:	2f00      	cmp	r7, #0
 8011506:	da07      	bge.n	8011518 <_strtoul_l.constprop.0+0xbc>
 8011508:	2322      	movs	r3, #34	; 0x22
 801150a:	f8ce 3000 	str.w	r3, [lr]
 801150e:	f04f 30ff 	mov.w	r0, #4294967295
 8011512:	b932      	cbnz	r2, 8011522 <_strtoul_l.constprop.0+0xc6>
 8011514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011518:	b106      	cbz	r6, 801151c <_strtoul_l.constprop.0+0xc0>
 801151a:	4240      	negs	r0, r0
 801151c:	2a00      	cmp	r2, #0
 801151e:	d0f9      	beq.n	8011514 <_strtoul_l.constprop.0+0xb8>
 8011520:	b107      	cbz	r7, 8011524 <_strtoul_l.constprop.0+0xc8>
 8011522:	1e69      	subs	r1, r5, #1
 8011524:	6011      	str	r1, [r2, #0]
 8011526:	e7f5      	b.n	8011514 <_strtoul_l.constprop.0+0xb8>
 8011528:	2430      	movs	r4, #48	; 0x30
 801152a:	2b00      	cmp	r3, #0
 801152c:	d1b5      	bne.n	801149a <_strtoul_l.constprop.0+0x3e>
 801152e:	2308      	movs	r3, #8
 8011530:	e7b3      	b.n	801149a <_strtoul_l.constprop.0+0x3e>
 8011532:	2c30      	cmp	r4, #48	; 0x30
 8011534:	d0a9      	beq.n	801148a <_strtoul_l.constprop.0+0x2e>
 8011536:	230a      	movs	r3, #10
 8011538:	e7af      	b.n	801149a <_strtoul_l.constprop.0+0x3e>
 801153a:	bf00      	nop
 801153c:	080129e9 	.word	0x080129e9

08011540 <_strtoul_r>:
 8011540:	f7ff bf8c 	b.w	801145c <_strtoul_l.constprop.0>

08011544 <__submore>:
 8011544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011548:	460c      	mov	r4, r1
 801154a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 801154c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011550:	4299      	cmp	r1, r3
 8011552:	d11d      	bne.n	8011590 <__submore+0x4c>
 8011554:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8011558:	f7fc fc08 	bl	800dd6c <_malloc_r>
 801155c:	b918      	cbnz	r0, 8011566 <__submore+0x22>
 801155e:	f04f 30ff 	mov.w	r0, #4294967295
 8011562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011566:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801156a:	63a3      	str	r3, [r4, #56]	; 0x38
 801156c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8011570:	6360      	str	r0, [r4, #52]	; 0x34
 8011572:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8011576:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 801157a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 801157e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8011582:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8011586:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 801158a:	6020      	str	r0, [r4, #0]
 801158c:	2000      	movs	r0, #0
 801158e:	e7e8      	b.n	8011562 <__submore+0x1e>
 8011590:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8011592:	0077      	lsls	r7, r6, #1
 8011594:	463a      	mov	r2, r7
 8011596:	f7ff f8c7 	bl	8010728 <_realloc_r>
 801159a:	4605      	mov	r5, r0
 801159c:	2800      	cmp	r0, #0
 801159e:	d0de      	beq.n	801155e <__submore+0x1a>
 80115a0:	eb00 0806 	add.w	r8, r0, r6
 80115a4:	4601      	mov	r1, r0
 80115a6:	4632      	mov	r2, r6
 80115a8:	4640      	mov	r0, r8
 80115aa:	f7fc fb2d 	bl	800dc08 <memcpy>
 80115ae:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80115b2:	f8c4 8000 	str.w	r8, [r4]
 80115b6:	e7e9      	b.n	801158c <__submore+0x48>

080115b8 <__ascii_wctomb>:
 80115b8:	b149      	cbz	r1, 80115ce <__ascii_wctomb+0x16>
 80115ba:	2aff      	cmp	r2, #255	; 0xff
 80115bc:	bf85      	ittet	hi
 80115be:	238a      	movhi	r3, #138	; 0x8a
 80115c0:	6003      	strhi	r3, [r0, #0]
 80115c2:	700a      	strbls	r2, [r1, #0]
 80115c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80115c8:	bf98      	it	ls
 80115ca:	2001      	movls	r0, #1
 80115cc:	4770      	bx	lr
 80115ce:	4608      	mov	r0, r1
 80115d0:	4770      	bx	lr

080115d2 <abort>:
 80115d2:	b508      	push	{r3, lr}
 80115d4:	2006      	movs	r0, #6
 80115d6:	f000 f855 	bl	8011684 <raise>
 80115da:	2001      	movs	r0, #1
 80115dc:	f7f2 fbb8 	bl	8003d50 <_exit>

080115e0 <_fstat_r>:
 80115e0:	b538      	push	{r3, r4, r5, lr}
 80115e2:	4d07      	ldr	r5, [pc, #28]	; (8011600 <_fstat_r+0x20>)
 80115e4:	2300      	movs	r3, #0
 80115e6:	4604      	mov	r4, r0
 80115e8:	4608      	mov	r0, r1
 80115ea:	4611      	mov	r1, r2
 80115ec:	602b      	str	r3, [r5, #0]
 80115ee:	f7f2 fbe2 	bl	8003db6 <_fstat>
 80115f2:	1c43      	adds	r3, r0, #1
 80115f4:	d102      	bne.n	80115fc <_fstat_r+0x1c>
 80115f6:	682b      	ldr	r3, [r5, #0]
 80115f8:	b103      	cbz	r3, 80115fc <_fstat_r+0x1c>
 80115fa:	6023      	str	r3, [r4, #0]
 80115fc:	bd38      	pop	{r3, r4, r5, pc}
 80115fe:	bf00      	nop
 8011600:	20001894 	.word	0x20001894

08011604 <_isatty_r>:
 8011604:	b538      	push	{r3, r4, r5, lr}
 8011606:	4d06      	ldr	r5, [pc, #24]	; (8011620 <_isatty_r+0x1c>)
 8011608:	2300      	movs	r3, #0
 801160a:	4604      	mov	r4, r0
 801160c:	4608      	mov	r0, r1
 801160e:	602b      	str	r3, [r5, #0]
 8011610:	f7f2 fbe1 	bl	8003dd6 <_isatty>
 8011614:	1c43      	adds	r3, r0, #1
 8011616:	d102      	bne.n	801161e <_isatty_r+0x1a>
 8011618:	682b      	ldr	r3, [r5, #0]
 801161a:	b103      	cbz	r3, 801161e <_isatty_r+0x1a>
 801161c:	6023      	str	r3, [r4, #0]
 801161e:	bd38      	pop	{r3, r4, r5, pc}
 8011620:	20001894 	.word	0x20001894

08011624 <_malloc_usable_size_r>:
 8011624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011628:	1f18      	subs	r0, r3, #4
 801162a:	2b00      	cmp	r3, #0
 801162c:	bfbc      	itt	lt
 801162e:	580b      	ldrlt	r3, [r1, r0]
 8011630:	18c0      	addlt	r0, r0, r3
 8011632:	4770      	bx	lr

08011634 <_raise_r>:
 8011634:	291f      	cmp	r1, #31
 8011636:	b538      	push	{r3, r4, r5, lr}
 8011638:	4604      	mov	r4, r0
 801163a:	460d      	mov	r5, r1
 801163c:	d904      	bls.n	8011648 <_raise_r+0x14>
 801163e:	2316      	movs	r3, #22
 8011640:	6003      	str	r3, [r0, #0]
 8011642:	f04f 30ff 	mov.w	r0, #4294967295
 8011646:	bd38      	pop	{r3, r4, r5, pc}
 8011648:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801164a:	b112      	cbz	r2, 8011652 <_raise_r+0x1e>
 801164c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011650:	b94b      	cbnz	r3, 8011666 <_raise_r+0x32>
 8011652:	4620      	mov	r0, r4
 8011654:	f000 f830 	bl	80116b8 <_getpid_r>
 8011658:	462a      	mov	r2, r5
 801165a:	4601      	mov	r1, r0
 801165c:	4620      	mov	r0, r4
 801165e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011662:	f000 b817 	b.w	8011694 <_kill_r>
 8011666:	2b01      	cmp	r3, #1
 8011668:	d00a      	beq.n	8011680 <_raise_r+0x4c>
 801166a:	1c59      	adds	r1, r3, #1
 801166c:	d103      	bne.n	8011676 <_raise_r+0x42>
 801166e:	2316      	movs	r3, #22
 8011670:	6003      	str	r3, [r0, #0]
 8011672:	2001      	movs	r0, #1
 8011674:	e7e7      	b.n	8011646 <_raise_r+0x12>
 8011676:	2400      	movs	r4, #0
 8011678:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801167c:	4628      	mov	r0, r5
 801167e:	4798      	blx	r3
 8011680:	2000      	movs	r0, #0
 8011682:	e7e0      	b.n	8011646 <_raise_r+0x12>

08011684 <raise>:
 8011684:	4b02      	ldr	r3, [pc, #8]	; (8011690 <raise+0xc>)
 8011686:	4601      	mov	r1, r0
 8011688:	6818      	ldr	r0, [r3, #0]
 801168a:	f7ff bfd3 	b.w	8011634 <_raise_r>
 801168e:	bf00      	nop
 8011690:	2000000c 	.word	0x2000000c

08011694 <_kill_r>:
 8011694:	b538      	push	{r3, r4, r5, lr}
 8011696:	4d07      	ldr	r5, [pc, #28]	; (80116b4 <_kill_r+0x20>)
 8011698:	2300      	movs	r3, #0
 801169a:	4604      	mov	r4, r0
 801169c:	4608      	mov	r0, r1
 801169e:	4611      	mov	r1, r2
 80116a0:	602b      	str	r3, [r5, #0]
 80116a2:	f7f2 fb45 	bl	8003d30 <_kill>
 80116a6:	1c43      	adds	r3, r0, #1
 80116a8:	d102      	bne.n	80116b0 <_kill_r+0x1c>
 80116aa:	682b      	ldr	r3, [r5, #0]
 80116ac:	b103      	cbz	r3, 80116b0 <_kill_r+0x1c>
 80116ae:	6023      	str	r3, [r4, #0]
 80116b0:	bd38      	pop	{r3, r4, r5, pc}
 80116b2:	bf00      	nop
 80116b4:	20001894 	.word	0x20001894

080116b8 <_getpid_r>:
 80116b8:	f7f2 bb32 	b.w	8003d20 <_getpid>

080116bc <_init>:
 80116bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116be:	bf00      	nop
 80116c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116c2:	bc08      	pop	{r3}
 80116c4:	469e      	mov	lr, r3
 80116c6:	4770      	bx	lr

080116c8 <_fini>:
 80116c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116ca:	bf00      	nop
 80116cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80116ce:	bc08      	pop	{r3}
 80116d0:	469e      	mov	lr, r3
 80116d2:	4770      	bx	lr
